/*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        WienerMpodLvHvCtrlClass.cpp
//
// description : C++ source for the WienerMpodLvHvCtrlClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the WienerMpodLvHvCtrl once per process.
//
// project :     MPOD Ctrl for iseg HV
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <WienerMpodLvHvCtrlClass.h>

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass.cpp

//-------------------------------------------------------------------
/**
 *    Create WienerMpodLvHvCtrlClass singleton and
 *    return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

    Tango::DeviceClass *_create_WienerMpodLvHvCtrl_class(const char *name) {
        return WienerMpodLvHvCtrl_ns::WienerMpodLvHvCtrlClass::init(name);
    }
}

namespace WienerMpodLvHvCtrl_ns
{
//===================================================================
//    Initialize pointer for singleton pattern
//===================================================================
WienerMpodLvHvCtrlClass *WienerMpodLvHvCtrlClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method :         WienerMpodLvHvCtrlClass::WienerMpodLvHvCtrlClass(string &s)
 * description :     constructor for the WienerMpodLvHvCtrlClass
 *
 * @param s    The class name
 */
//--------------------------------------------------------
WienerMpodLvHvCtrlClass::WienerMpodLvHvCtrlClass(string &s):Tango::DeviceClass(s)
{
    cout2 << "Entering WienerMpodLvHvCtrlClass constructor" << endl;
    set_default_property();
    write_class_property();

    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::constructor) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::constructor

    cout2 << "Leaving WienerMpodLvHvCtrlClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method :         WienerMpodLvHvCtrlClass::~WienerMpodLvHvCtrlClass()
 * description :     destructor for the WienerMpodLvHvCtrlClass
 */
//--------------------------------------------------------
WienerMpodLvHvCtrlClass::~WienerMpodLvHvCtrlClass()
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::destructor) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::destructor

    _instance = NULL;
}


//--------------------------------------------------------
/**
 * method :         WienerMpodLvHvCtrlClass::init
 * description :     Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param    name    The class name
 */
//--------------------------------------------------------
WienerMpodLvHvCtrlClass *WienerMpodLvHvCtrlClass::init(const char *name)
{
    if (_instance == NULL)
    {
        try
        {
            string s(name);
            _instance = new WienerMpodLvHvCtrlClass(s);
        }
        catch (bad_alloc &)
        {
            throw;
        }
    }
    return _instance;
}

//--------------------------------------------------------
/**
 * method :         WienerMpodLvHvCtrlClass::instance
 * description :     Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
WienerMpodLvHvCtrlClass *WienerMpodLvHvCtrlClass::instance()
{
    if (_instance == NULL)
    {
        cerr << "Class is not initialised !!" << endl;
        exit(-1);
    }
    return _instance;
}



//===================================================================
//    Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method :         ChannelGetConfigMaxCurrentClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetConfigMaxCurrentClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetConfigMaxCurrentClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_config_max_current(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetConfigMaxSenseVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetConfigMaxSenseVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetConfigMaxSenseVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_config_max_sense_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetConfigMaxTerminalVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetConfigMaxTerminalVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetConfigMaxTerminalVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_config_max_terminal_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetCurrentClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetCurrentClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetCurrentClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_current(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetCurrentFallRateClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetCurrentFallRateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetCurrentFallRateClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_current_fall_rate(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetCurrentRiseRateClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetCurrentRiseRateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetCurrentRiseRateClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_current_rise_rate(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetIndexClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetIndexClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetIndexClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_index(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetMeasurementCurrentClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetMeasurementCurrentClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetMeasurementCurrentClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_measurement_current(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetMeasurementSenseVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetMeasurementSenseVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetMeasurementSenseVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_measurement_sense_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetMeasurementTemperatureClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetMeasurementTemperatureClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetMeasurementTemperatureClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_measurement_temperature(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetMeasurementTerminalVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetMeasurementTerminalVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetMeasurementTerminalVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_measurement_terminal_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetStatusClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetStatusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetStatusClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_status(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetStatusAsStringClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetStatusAsStringClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetStatusAsStringClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_status_as_string(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetSupervisionBehaviorClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetSupervisionBehaviorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetSupervisionBehaviorClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_supervision_behavior(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetSupervisionMaxCurrentClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetSupervisionMaxCurrentClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetSupervisionMaxCurrentClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_supervision_max_current(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetSupervisionMaxPowerClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetSupervisionMaxPowerClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetSupervisionMaxPowerClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_supervision_max_power(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetSupervisionMaxTerminalVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetSupervisionMaxTerminalVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetSupervisionMaxTerminalVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_supervision_max_terminal_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetSupervisionMinSenseVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetSupervisionMinSenseVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetSupervisionMinSenseVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_supervision_min_sense_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetSwitchClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetSwitchClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetSwitchClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_switch(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetTripTimeClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetTripTimeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetTripTimeClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_trip_time(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetUserConfigClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetUserConfigClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetUserConfigClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_user_config(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetVoltageFallRateClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetVoltageFallRateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetVoltageFallRateClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_voltage_fall_rate(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetVoltageRiseRateClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetVoltageRiseRateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetVoltageRiseRateClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_voltage_rise_rate(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetCurrentClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetCurrentClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetCurrentClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_current(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetCurrentFallRateClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetCurrentFallRateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetCurrentFallRateClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_current_fall_rate(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetCurrentRiseRateClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetCurrentRiseRateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetCurrentRiseRateClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_current_rise_rate(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetSupervisionBehaviorClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetSupervisionBehaviorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetSupervisionBehaviorClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_supervision_behavior(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetSupervisionMaxCurrentClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetSupervisionMaxCurrentClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetSupervisionMaxCurrentClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_supervision_max_current(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetSupervisionMaxTerminalVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetSupervisionMaxTerminalVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetSupervisionMaxTerminalVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_supervision_max_terminal_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetSupervisionMinSenseVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetSupervisionMinSenseVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetSupervisionMinSenseVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_supervision_min_sense_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetSwitchClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetSwitchClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetSwitchClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_switch(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetTripTimeClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetTripTimeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetTripTimeClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_trip_time(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetUserConfigClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetUserConfigClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetUserConfigClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_user_config(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetVoltageFallRateClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetVoltageFallRateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetVoltageFallRateClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_voltage_fall_rate(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelSetVoltageRiseRateClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelSetVoltageRiseRateClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelSetVoltageRiseRateClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_set_voltage_rise_rate(argin));
}

//--------------------------------------------------------
/**
 * method :         CrateGetFanSpeedClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateGetFanSpeedClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "CrateGetFanSpeedClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_get_fan_speed());
}

//--------------------------------------------------------
/**
 * method :         CrateGetNumberOfChannelsClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateGetNumberOfChannelsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "CrateGetNumberOfChannelsClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_get_number_of_channels());
}

//--------------------------------------------------------
/**
 * method :         CrateGetNumberOfGroupsClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateGetNumberOfGroupsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "CrateGetNumberOfGroupsClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_get_number_of_groups());
}

//--------------------------------------------------------
/**
 * method :         CrateGetNumberOfModulesClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateGetNumberOfModulesClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "CrateGetNumberOfModulesClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_get_number_of_modules());
}

//--------------------------------------------------------
/**
 * method :         CrateGetOccupiedSlotsClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateGetOccupiedSlotsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "CrateGetOccupiedSlotsClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_get_occupied_slots());
}

//--------------------------------------------------------
/**
 * method :         CrateGetSerialNumberClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateGetSerialNumberClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "CrateGetSerialNumberClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_get_serial_number());
}

//--------------------------------------------------------
/**
 * method :         CrateGetSysDescrClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateGetSysDescrClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "CrateGetSysDescrClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_get_sys_descr());
}

//--------------------------------------------------------
/**
 * method :         CrateGetSysMainSwitchClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateGetSysMainSwitchClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "CrateGetSysMainSwitchClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_get_sys_main_switch());
}

//--------------------------------------------------------
/**
 * method :         CrateGetSysStatusClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateGetSysStatusClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "CrateGetSysStatusClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_get_sys_status());
}

//--------------------------------------------------------
/**
 * method :         CrateGetSysStatusAsStringClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateGetSysStatusAsStringClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "CrateGetSysStatusAsStringClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_get_sys_status_as_string());
}

//--------------------------------------------------------
/**
 * method :         CrateSetFanSpeedClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateSetFanSpeedClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "CrateSetFanSpeedClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_set_fan_speed(argin));
}

//--------------------------------------------------------
/**
 * method :         CrateSetSysHardwareResetClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateSetSysHardwareResetClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "CrateSetSysHardwareResetClass::execute(): arrived" << endl;
    Tango::DevULong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_set_sys_hardware_reset(argin));
}

//--------------------------------------------------------
/**
 * method :         CrateSetSysMainSwitchClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CrateSetSysMainSwitchClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "CrateSetSysMainSwitchClass::execute(): arrived" << endl;
    Tango::DevULong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->crate_set_sys_main_switch(argin));
}

//--------------------------------------------------------
/**
 * method :         GroupGetIndexClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GroupGetIndexClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "GroupGetIndexClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->group_get_index(argin));
}

//--------------------------------------------------------
/**
 * method :         GroupSetSwitchClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GroupSetSwitchClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "GroupSetSwitchClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->group_set_switch(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetAuxiliaryMeasurementVoltage0Class::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetAuxiliaryMeasurementVoltage0Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetAuxiliaryMeasurementVoltage0Class::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_auxiliary_measurement_voltage0(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetAuxiliaryMeasurementVoltage1Class::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetAuxiliaryMeasurementVoltage1Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetAuxiliaryMeasurementVoltage1Class::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_auxiliary_measurement_voltage1(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetDescriptionClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetDescriptionClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetDescriptionClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_description(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetEventChannelStatusClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetEventChannelStatusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetEventChannelStatusClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_event_channel_status(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetEventStatusClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetEventStatusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetEventStatusClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_event_status(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetEventStatusAsStringClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetEventStatusAsStringClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetEventStatusAsStringClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_event_status_as_string(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetHardwareLimitCurrentClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetHardwareLimitCurrentClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetHardwareLimitCurrentClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_hardware_limit_current(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetHardwareLimitVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetHardwareLimitVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetHardwareLimitVoltageClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_hardware_limit_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetIndexClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetIndexClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetIndexClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_index(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetIsHvModuleClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetIsHvModuleClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetIsHvModuleClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_is_hv_module(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetMeasurementTemperature0Class::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetMeasurementTemperature0Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetMeasurementTemperature0Class::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_measurement_temperature0(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetMeasurementTemperature1Class::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetMeasurementTemperature1Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetMeasurementTemperature1Class::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_measurement_temperature1(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetMeasurementTemperature2Class::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetMeasurementTemperature2Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetMeasurementTemperature2Class::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_measurement_temperature2(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetMeasurementTemperature3Class::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetMeasurementTemperature3Class::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetMeasurementTemperature3Class::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_measurement_temperature3(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetNumberOfChannelsClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetNumberOfChannelsClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetNumberOfChannelsClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_number_of_channels(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetRampSpeedCurrentClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetRampSpeedCurrentClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetRampSpeedCurrentClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_ramp_speed_current(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetRampSpeedVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetRampSpeedVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetRampSpeedVoltageClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_ramp_speed_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetStatusClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetStatusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetStatusClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_status(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleGetStatusAsStringClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleGetStatusAsStringClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleGetStatusAsStringClass::execute(): arrived" << endl;
    Tango::DevLong argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_get_status_as_string(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleSetDoClearClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleSetDoClearClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleSetDoClearClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_set_do_clear(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleSetRampSpeedCurrentClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleSetRampSpeedCurrentClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleSetRampSpeedCurrentClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_set_ramp_speed_current(argin));
}

//--------------------------------------------------------
/**
 * method :         ModuleSetRampSpeedVoltageClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ModuleSetRampSpeedVoltageClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ModuleSetRampSpeedVoltageClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->module_set_ramp_speed_voltage(argin));
}

//--------------------------------------------------------
/**
 * method :         SnmpGetDescriptionClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SnmpGetDescriptionClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "SnmpGetDescriptionClass::execute(): arrived" << endl;
    Tango::DevString argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->snmp_get_description(argin));
}

//--------------------------------------------------------
/**
 * method :         SnmpGetNextOIDClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SnmpGetNextOIDClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "SnmpGetNextOIDClass::execute(): arrived" << endl;
    Tango::DevString argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->snmp_get_next_oid(argin));
}

//--------------------------------------------------------
/**
 * method :         SnmpGetValueDoubleClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SnmpGetValueDoubleClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "SnmpGetValueDoubleClass::execute(): arrived" << endl;
    Tango::DevString argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->snmp_get_value_double(argin));
}

//--------------------------------------------------------
/**
 * method :         SnmpGetValueIntClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SnmpGetValueIntClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "SnmpGetValueIntClass::execute(): arrived" << endl;
    Tango::DevString argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->snmp_get_value_int(argin));
}

//--------------------------------------------------------
/**
 * method :         SnmpGetValueStringClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SnmpGetValueStringClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "SnmpGetValueStringClass::execute(): arrived" << endl;
    Tango::DevString argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->snmp_get_value_string(argin));
}

//--------------------------------------------------------
/**
 * method :         SnmpSetValueDoubleClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SnmpSetValueDoubleClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "SnmpSetValueDoubleClass::execute(): arrived" << endl;
    const Tango::DevVarDoubleStringArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->snmp_set_value_double(argin));
}

//--------------------------------------------------------
/**
 * method :         SnmpSetValueIntClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SnmpSetValueIntClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "SnmpSetValueIntClass::execute(): arrived" << endl;
    const Tango::DevVarLongStringArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->snmp_set_value_int(argin));
}

//--------------------------------------------------------
/**
 * method :         SnmpTranslateFromOIDClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SnmpTranslateFromOIDClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "SnmpTranslateFromOIDClass::execute(): arrived" << endl;
    Tango::DevString argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->snmp_translate_from_oid(argin));
}

//--------------------------------------------------------
/**
 * method :         SnmpTranslateToOIDClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SnmpTranslateToOIDClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "SnmpTranslateToOIDClass::execute(): arrived" << endl;
    Tango::DevString argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->snmp_translate_to_oid(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetMeasurementCurrentVectorClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetMeasurementCurrentVectorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetMeasurementCurrentVectorClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_measurement_current_vector(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetMeasurementSenseVoltageVectorClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetMeasurementSenseVoltageVectorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetMeasurementSenseVoltageVectorClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_measurement_sense_voltage_vector(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetMeasurementTerminalVoltageVectorClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetMeasurementTerminalVoltageVectorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
    cout2 << "ChannelGetMeasurementTerminalVoltageVectorClass::execute(): arrived" << endl;
    const Tango::DevVarULongArray *argin;
    extract(in_any, argin);
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_measurement_terminal_voltage_vector(argin));
}

//--------------------------------------------------------
/**
 * method :         ChannelGetMeasurementTimeVectorClass::execute()
 * description :     method to trigger the execution of the command.
 *
 * @param    device    The device on which the command must be executed
 * @param    in_any    The command input data
 *
 *    returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ChannelGetMeasurementTimeVectorClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
    cout2 << "ChannelGetMeasurementTimeVectorClass::execute(): arrived" << endl;
    return insert((static_cast<WienerMpodLvHvCtrl *>(device))->channel_get_measurement_time_vector());
}


//===================================================================
//    Properties management
//===================================================================
//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrlClass::get_class_property()
 *    Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum WienerMpodLvHvCtrlClass::get_class_property(string &prop_name)
{
    for (unsigned int i=0 ; i<cl_prop.size() ; i++)
        if (cl_prop[i].name == prop_name)
            return cl_prop[i];
    //    if not found, returns  an empty DbDatum
    return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrlClass::get_default_device_property()
 *    Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum WienerMpodLvHvCtrlClass::get_default_device_property(string &prop_name)
{
    for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
        if (dev_def_prop[i].name == prop_name)
            return dev_def_prop[i];
    //    if not found, return  an empty DbDatum
    return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrlClass::get_default_class_property()
 *    Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum WienerMpodLvHvCtrlClass::get_default_class_property(string &prop_name)
{
    for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
        if (cl_def_prop[i].name == prop_name)
            return cl_def_prop[i];
    //    if not found, return  an empty DbDatum
    return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrlClass::set_default_property()
 *    Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrlClass::set_default_property()
{
    string    prop_name;
    string    prop_desc;
    string    prop_def;
    vector<string>    vect_data;

    //    Set Default Class Properties

    //    Set Default device Properties
    prop_name = "IpAddr";
    prop_desc = "IP Address for the MPOD controller.";
    prop_def  = "";
    vect_data.clear();
    if (prop_def.length()>0)
    {
        Tango::DbDatum    data(prop_name);
        data << vect_data ;
        dev_def_prop.push_back(data);
        add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
    }
    else
        add_wiz_dev_prop(prop_name, prop_desc);
    prop_name = "SnmpCommunityName";
    prop_desc = "Used SNMP community. This property can limit the access to SNMP variables.\nBy default `guru` defines the read-write community.\nThe community `public` prohibits write operations.\nThese default settings can be changed.";
    prop_def  = "guru";
    vect_data.clear();
    vect_data.push_back("guru");
    if (prop_def.length()>0)
    {
        Tango::DbDatum    data(prop_name);
        data << vect_data ;
        dev_def_prop.push_back(data);
        add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
    }
    else
        add_wiz_dev_prop(prop_name, prop_desc);
    prop_name = "SnmpTimeout";
    prop_desc = "This value is passed to the net-snmp library. For values\n<= 0 the library default is used. The value is given in ms.\nAppropriate values are 500 ... 2000.";
    prop_def  = "-1";
    vect_data.clear();
    vect_data.push_back("-1");
    if (prop_def.length()>0)
    {
        Tango::DbDatum    data(prop_name);
        data << vect_data ;
        dev_def_prop.push_back(data);
        add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
    }
    else
        add_wiz_dev_prop(prop_name, prop_desc);
    prop_name = "ThreadPollingIntervalMsFast";
    prop_desc = "The communication to the MPOD can be run in a thread.\nThis property defines a time intarval for periodic \npolling of all data in milliseconds. The defined interval\nshould be 200 ms or greater.\nIf the value of this property is 0, the thread is not started, \nall commands are directly sent to the MPOD, the device \nserver waits for the response from the MPOD.\n\nThe property ThreadPollingIntervalMsFast concerns the \nmeasured voltages and currents.";
    prop_def  = "500";
    vect_data.clear();
    vect_data.push_back("500");
    if (prop_def.length()>0)
    {
        Tango::DbDatum    data(prop_name);
        data << vect_data ;
        dev_def_prop.push_back(data);
        add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
    }
    else
        add_wiz_dev_prop(prop_name, prop_desc);
    prop_name = "ThreadPollingIntervalMsIntermediate";
    prop_desc = "Like ThreadPollingIntervalMsFast.\n\nThe property ThreadPollingIntervalMsIntermediate concerns the \npolling for status flags and most other SNMP variables.";
    prop_def  = "1000";
    vect_data.clear();
    vect_data.push_back("1000");
    if (prop_def.length()>0)
    {
        Tango::DbDatum    data(prop_name);
        data << vect_data ;
        dev_def_prop.push_back(data);
        add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
    }
    else
        add_wiz_dev_prop(prop_name, prop_desc);
    prop_name = "ThreadPollingIntervalMsSlow";
    prop_desc = "Like ThreadPollingIntervalMsFast.\n\nThe property ThreadPollingIntervalMsSlow concerns the \npolling of SNMP variables that are set by the user.\n\nThese variables are read if ThreadPollingIntervalMsSlow \nhas expired or a value has been set. This represents an\nimportant speedup for the communication with the MPOD.";
    prop_def  = "2000";
    vect_data.clear();
    vect_data.push_back("2000");
    if (prop_def.length()>0)
    {
        Tango::DbDatum    data(prop_name);
        data << vect_data ;
        dev_def_prop.push_back(data);
        add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
    }
    else
        add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrlClass::write_class_property()
 *    Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrlClass::write_class_property()
{
    //    First time, check if database used
    if (Tango::Util::_UseDb == false)
        return;

    Tango::DbData    data;
    string    classname = get_name();
    string    header;
    string::size_type    start, end;

    //    Put title
    Tango::DbDatum    title("ProjectTitle");
    string    str_title("MPOD Ctrl for iseg HV");
    title << str_title;
    data.push_back(title);

    //    Put Description
    Tango::DbDatum    description("Description");
    vector<string>    str_desc;
    str_desc.push_back("Device Server controlling the Wiener MPOD and it`s power modules such as ");
    str_desc.push_back("- Wiener LV power supplies");
    str_desc.push_back("- iseg HV power supplies");
    str_desc.push_back("");
    str_desc.push_back("It contains low level access functions for directly accessing the");
    str_desc.push_back("SNMP protocol.");
    str_desc.push_back("These functions are named `snmp...`.");
    str_desc.push_back("");
    str_desc.push_back("It also contains high level access functions for controlling:");
    str_desc.push_back("");
    str_desc.push_back("- the crate functionality. The functions are named `crate...`.");
    str_desc.push_back("The `crateGet...` functions don`t take arguments. ");
    str_desc.push_back("The `crateSet...` functions need the new value as argument.");
    str_desc.push_back("");
    str_desc.push_back("- the module functionality. The functions are named `module...`.");
    str_desc.push_back("The `moduleGet...` functions need the `slot_index` as argument. ");
    str_desc.push_back("The `moduleSet...` functions need the `slot_index` and the new value as argument.");
    str_desc.push_back("");
    str_desc.push_back("- the channel functionality. The functions are named `channel...`.");
    str_desc.push_back("The `channelGet...` functions need the `slot_index` and the `channel_index` as arguments. ");
    str_desc.push_back("The `channelSet...` functions need the `slot_index`, the `channel_index` and new value as arguments.");
    str_desc.push_back("");
    str_desc.push_back("- the group functionality. The functions are named `group...`.");
    str_desc.push_back("The `groupGet...` functions requires the `group_index` as argument. ");
    str_desc.push_back("The `groupSet...` functions need the `group_index` ant the new value as argument.");
    str_desc.push_back("");
    str_desc.push_back("Further information can be found on the manufacturer`s web sites ");
    str_desc.push_back("and in the user manuals for MPOD and the inserted modules.");
    description << str_desc;
    data.push_back(description);

    //  Put inheritance
    Tango::DbDatum    inher_datum("InheritedFrom");
    vector<string> inheritance;
    inheritance.push_back("TANGO_BASE_CLASS");
    inher_datum << inheritance;
    data.push_back(inher_datum);

    //    Call database and and values
    get_db_class()->put_property(data);
}

//===================================================================
//    Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrlClass::device_factory()
 *    Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrlClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::device_factory_before) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::device_factory_before

    //    Create devices and add it into the device list
    for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
    {
        cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
        device_list.push_back(new WienerMpodLvHvCtrl(this, (*devlist_ptr)[i]));
    }

    //    Manage dynamic attributes if any
    erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

    //    Export devices to the outside world
    for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
    {
        //    Add dynamic attributes if any
        WienerMpodLvHvCtrl *dev = static_cast<WienerMpodLvHvCtrl *>(device_list[device_list.size()-i]);
        dev->add_dynamic_attributes();

        //    Check before if database used.
        if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
            export_device(dev);
        else
            export_device(dev, dev->get_name().c_str());
    }

    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::device_factory_after) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::device_factory_after
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrlClass::attribute_factory()
 *    Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrlClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::attribute_factory_before) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::attribute_factory_before
    //    Attribute : IsMibFileLoaded
    IsMibFileLoadedAttrib    *ismibfileloaded = new IsMibFileLoadedAttrib();
    Tango::UserDefaultAttrProp    ismibfileloaded_prop;
    ismibfileloaded_prop.set_description("This value is set when th device server is initialized. It is true if the file WIENER-CRATE-MIB.txt\nwas found. The functionality of the device server will be restricted without this file.");
    //    label    not set for IsMibFileLoaded
    //    unit    not set for IsMibFileLoaded
    //    standard_unit    not set for IsMibFileLoaded
    //    display_unit    not set for IsMibFileLoaded
    //    format    not set for IsMibFileLoaded
    //    max_value    not set for IsMibFileLoaded
    //    min_value    not set for IsMibFileLoaded
    //    max_alarm    not set for IsMibFileLoaded
    //    min_alarm    not set for IsMibFileLoaded
    //    max_warning    not set for IsMibFileLoaded
    //    min_warning    not set for IsMibFileLoaded
    //    delta_t    not set for IsMibFileLoaded
    //    delta_val    not set for IsMibFileLoaded
    
    ismibfileloaded->set_default_properties(ismibfileloaded_prop);
    //    Not Polled
    ismibfileloaded->set_disp_level(Tango::EXPERT);
    //    Not Memorized
    att_list.push_back(ismibfileloaded);

    //    Attribute : SysDescr
    SysDescrAttrib    *sysdescr = new SysDescrAttrib();
    Tango::UserDefaultAttrProp    sysdescr_prop;
    sysdescr_prop.set_description("The system description. This string also contains the firmware version.");
    //    label    not set for SysDescr
    //    unit    not set for SysDescr
    //    standard_unit    not set for SysDescr
    //    display_unit    not set for SysDescr
    //    format    not set for SysDescr
    //    max_value    not set for SysDescr
    //    min_value    not set for SysDescr
    //    max_alarm    not set for SysDescr
    //    min_alarm    not set for SysDescr
    //    max_warning    not set for SysDescr
    //    min_warning    not set for SysDescr
    //    delta_t    not set for SysDescr
    //    delta_val    not set for SysDescr
    
    sysdescr->set_default_properties(sysdescr_prop);
    //    Not Polled
    sysdescr->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(sysdescr);

    //    Attribute : SysMainSwitch
    SysMainSwitchAttrib    *sysmainswitch = new SysMainSwitchAttrib();
    Tango::UserDefaultAttrProp    sysmainswitch_prop;
    sysmainswitch_prop.set_description("The crate`s main switch. Possible values are 0 (off) or 1 (on).");
    sysmainswitch_prop.set_label("Crate main switch");
    //    unit    not set for SysMainSwitch
    //    standard_unit    not set for SysMainSwitch
    //    display_unit    not set for SysMainSwitch
    //    format    not set for SysMainSwitch
    sysmainswitch_prop.set_max_value("1");
    sysmainswitch_prop.set_min_value("0");
    //    max_alarm    not set for SysMainSwitch
    //    min_alarm    not set for SysMainSwitch
    //    max_warning    not set for SysMainSwitch
    //    min_warning    not set for SysMainSwitch
    //    delta_t    not set for SysMainSwitch
    //    delta_val    not set for SysMainSwitch
    
    sysmainswitch->set_default_properties(sysmainswitch_prop);
    //    Not Polled
    sysmainswitch->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(sysmainswitch);

    //    Attribute : SysStatus
    SysStatusAttrib    *sysstatus = new SysStatusAttrib();
    Tango::UserDefaultAttrProp    sysstatus_prop;
    sysstatus_prop.set_description("The crate`s status. Possible values are: \n        mainOn (0) ,\n        mainInhibit (1) ,\n        localControlOnly (2) ,\n        inputFailure (3) ,\n        outputFailure (4) ,\n        fantrayFailure (5) ,\n        sensorFailure (6),\n        vmeSysfail (7),\n        plugAndPlayIncompatible (8),\n        busReset (9),\n        supplyDerating (10),\n        supplyFailure (11),\n        supplyDerating2 (12),\n        supplyFailure2 (13)");
    sysstatus_prop.set_label("System Status");
    //    unit    not set for SysStatus
    //    standard_unit    not set for SysStatus
    //    display_unit    not set for SysStatus
    sysstatus_prop.set_format("%xX");
    //    max_value    not set for SysStatus
    //    min_value    not set for SysStatus
    //    max_alarm    not set for SysStatus
    //    min_alarm    not set for SysStatus
    //    max_warning    not set for SysStatus
    //    min_warning    not set for SysStatus
    //    delta_t    not set for SysStatus
    //    delta_val    not set for SysStatus
    
    sysstatus->set_default_properties(sysstatus_prop);
    //    Not Polled
    sysstatus->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(sysstatus);

    //    Attribute : SysStatusAsString
    SysStatusAsStringAttrib    *sysstatusasstring = new SysStatusAsStringAttrib();
    Tango::UserDefaultAttrProp    sysstatusasstring_prop;
    sysstatusasstring_prop.set_description("The crate`s status as string. Only the most important flag of SysStatus is reported.");
    sysstatusasstring_prop.set_label("System Status (string)");
    //    unit    not set for SysStatusAsString
    //    standard_unit    not set for SysStatusAsString
    //    display_unit    not set for SysStatusAsString
    //    format    not set for SysStatusAsString
    //    max_value    not set for SysStatusAsString
    //    min_value    not set for SysStatusAsString
    //    max_alarm    not set for SysStatusAsString
    //    min_alarm    not set for SysStatusAsString
    //    max_warning    not set for SysStatusAsString
    //    min_warning    not set for SysStatusAsString
    //    delta_t    not set for SysStatusAsString
    //    delta_val    not set for SysStatusAsString
    
    sysstatusasstring->set_default_properties(sysstatusasstring_prop);
    //    Not Polled
    sysstatusasstring->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(sysstatusasstring);

    //    Attribute : SerialNumber
    SerialNumberAttrib    *serialnumber = new SerialNumberAttrib();
    Tango::UserDefaultAttrProp    serialnumber_prop;
    serialnumber_prop.set_description("The crate's serial number.");
    //    label    not set for SerialNumber
    //    unit    not set for SerialNumber
    //    standard_unit    not set for SerialNumber
    //    display_unit    not set for SerialNumber
    //    format    not set for SerialNumber
    //    max_value    not set for SerialNumber
    //    min_value    not set for SerialNumber
    //    max_alarm    not set for SerialNumber
    //    min_alarm    not set for SerialNumber
    //    max_warning    not set for SerialNumber
    //    min_warning    not set for SerialNumber
    //    delta_t    not set for SerialNumber
    //    delta_val    not set for SerialNumber
    
    serialnumber->set_default_properties(serialnumber_prop);
    //    Not Polled
    serialnumber->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(serialnumber);

    //    Attribute : FanSpeed
    FanSpeedAttrib    *fanspeed = new FanSpeedAttrib();
    Tango::UserDefaultAttrProp    fanspeed_prop;
    fanspeed_prop.set_description("The crate`s fan speed. For most crates the allowed values are 0 or 1200 - 5000.");
    //    label    not set for FanSpeed
    fanspeed_prop.set_unit("RPM");
    fanspeed_prop.set_standard_unit("RPM");
    fanspeed_prop.set_display_unit("RPM");
    //    format    not set for FanSpeed
    fanspeed_prop.set_max_value("10000");
    fanspeed_prop.set_min_value("0");
    //    max_alarm    not set for FanSpeed
    //    min_alarm    not set for FanSpeed
    //    max_warning    not set for FanSpeed
    //    min_warning    not set for FanSpeed
    //    delta_t    not set for FanSpeed
    //    delta_val    not set for FanSpeed
    
    fanspeed->set_default_properties(fanspeed_prop);
    //    Not Polled
    fanspeed->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(fanspeed);

    //    Attribute : NumberOfModules
    NumberOfModulesAttrib    *numberofmodules = new NumberOfModulesAttrib();
    Tango::UserDefaultAttrProp    numberofmodules_prop;
    numberofmodules_prop.set_description("The number of modules inserted and recognized. This is only valid when the crate has been switched on.");
    //    label    not set for NumberOfModules
    //    unit    not set for NumberOfModules
    //    standard_unit    not set for NumberOfModules
    //    display_unit    not set for NumberOfModules
    //    format    not set for NumberOfModules
    //    max_value    not set for NumberOfModules
    //    min_value    not set for NumberOfModules
    //    max_alarm    not set for NumberOfModules
    //    min_alarm    not set for NumberOfModules
    //    max_warning    not set for NumberOfModules
    //    min_warning    not set for NumberOfModules
    //    delta_t    not set for NumberOfModules
    //    delta_val    not set for NumberOfModules
    
    numberofmodules->set_default_properties(numberofmodules_prop);
    //    Not Polled
    numberofmodules->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(numberofmodules);

    //    Attribute : NumberOfChannels
    NumberOfChannelsAttrib    *numberofchannels = new NumberOfChannelsAttrib();
    Tango::UserDefaultAttrProp    numberofchannels_prop;
    numberofchannels_prop.set_description("The number of detected HV and LV channels. Requires that the crate has been switched on.");
    //    label    not set for NumberOfChannels
    //    unit    not set for NumberOfChannels
    //    standard_unit    not set for NumberOfChannels
    //    display_unit    not set for NumberOfChannels
    //    format    not set for NumberOfChannels
    //    max_value    not set for NumberOfChannels
    //    min_value    not set for NumberOfChannels
    //    max_alarm    not set for NumberOfChannels
    //    min_alarm    not set for NumberOfChannels
    //    max_warning    not set for NumberOfChannels
    //    min_warning    not set for NumberOfChannels
    //    delta_t    not set for NumberOfChannels
    //    delta_val    not set for NumberOfChannels
    
    numberofchannels->set_default_properties(numberofchannels_prop);
    //    Not Polled
    numberofchannels->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(numberofchannels);

    //    Attribute : NumberOfGroups
    NumberOfGroupsAttrib    *numberofgroups = new NumberOfGroupsAttrib();
    Tango::UserDefaultAttrProp    numberofgroups_prop;
    numberofgroups_prop.set_description("The number of groups defined for HV and LV channels. Requires that thecrate has been switched on.");
    //    label    not set for NumberOfGroups
    //    unit    not set for NumberOfGroups
    //    standard_unit    not set for NumberOfGroups
    //    display_unit    not set for NumberOfGroups
    //    format    not set for NumberOfGroups
    //    max_value    not set for NumberOfGroups
    //    min_value    not set for NumberOfGroups
    //    max_alarm    not set for NumberOfGroups
    //    min_alarm    not set for NumberOfGroups
    //    max_warning    not set for NumberOfGroups
    //    min_warning    not set for NumberOfGroups
    //    delta_t    not set for NumberOfGroups
    //    delta_val    not set for NumberOfGroups
    
    numberofgroups->set_default_properties(numberofgroups_prop);
    //    Not Polled
    numberofgroups->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(numberofgroups);


    //    Create a list of static attributes
    create_static_attribute_list(get_class_attr()->get_attr_list());
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::attribute_factory_after) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrlClass::pipe_factory()
 *    Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrlClass::pipe_factory()
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::pipe_factory_before) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::pipe_factory_before
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::pipe_factory_after) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrlClass::command_factory()
 *    Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrlClass::command_factory()
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::command_factory_before) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::command_factory_before

    //    Command ChannelGetConfigMaxCurrent
    ChannelGetConfigMaxCurrentClass    *pChannelGetConfigMaxCurrentCmd =
        new ChannelGetConfigMaxCurrentClass("ChannelGetConfigMaxCurrent",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetConfigMaxCurrentCmd);

    //    Command ChannelGetConfigMaxSenseVoltage
    ChannelGetConfigMaxSenseVoltageClass    *pChannelGetConfigMaxSenseVoltageCmd =
        new ChannelGetConfigMaxSenseVoltageClass("ChannelGetConfigMaxSenseVoltage",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetConfigMaxSenseVoltageCmd);

    //    Command ChannelGetConfigMaxTerminalVoltage
    ChannelGetConfigMaxTerminalVoltageClass    *pChannelGetConfigMaxTerminalVoltageCmd =
        new ChannelGetConfigMaxTerminalVoltageClass("ChannelGetConfigMaxTerminalVoltage",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetConfigMaxTerminalVoltageCmd);

    //    Command ChannelGetCurrent
    ChannelGetCurrentClass    *pChannelGetCurrentCmd =
        new ChannelGetCurrentClass("ChannelGetCurrent",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "Output current or trip current (HV).",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetCurrentCmd);

    //    Command ChannelGetCurrentFallRate
    ChannelGetCurrentFallRateClass    *pChannelGetCurrentFallRateCmd =
        new ChannelGetCurrentFallRateClass("ChannelGetCurrentFallRate",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetCurrentFallRateCmd);

    //    Command ChannelGetCurrentRiseRate
    ChannelGetCurrentRiseRateClass    *pChannelGetCurrentRiseRateCmd =
        new ChannelGetCurrentRiseRateClass("ChannelGetCurrentRiseRate",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetCurrentRiseRateCmd);

    //    Command ChannelGetIndex
    ChannelGetIndexClass    *pChannelGetIndexCmd =
        new ChannelGetIndexClass("ChannelGetIndex",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_LONG,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetIndexCmd);

    //    Command ChannelGetMeasurementCurrent
    ChannelGetMeasurementCurrentClass    *pChannelGetMeasurementCurrentCmd =
        new ChannelGetMeasurementCurrentClass("ChannelGetMeasurementCurrent",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetMeasurementCurrentCmd);

    //    Command ChannelGetMeasurementSenseVoltage
    ChannelGetMeasurementSenseVoltageClass    *pChannelGetMeasurementSenseVoltageCmd =
        new ChannelGetMeasurementSenseVoltageClass("ChannelGetMeasurementSenseVoltage",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetMeasurementSenseVoltageCmd);

    //    Command ChannelGetMeasurementTemperature
    ChannelGetMeasurementTemperatureClass    *pChannelGetMeasurementTemperatureCmd =
        new ChannelGetMeasurementTemperatureClass("ChannelGetMeasurementTemperature",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetMeasurementTemperatureCmd);

    //    Command ChannelGetMeasurementTerminalVoltage
    ChannelGetMeasurementTerminalVoltageClass    *pChannelGetMeasurementTerminalVoltageCmd =
        new ChannelGetMeasurementTerminalVoltageClass("ChannelGetMeasurementTerminalVoltage",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetMeasurementTerminalVoltageCmd);

    //    Command ChannelGetStatus
    ChannelGetStatusClass    *pChannelGetStatusCmd =
        new ChannelGetStatusClass("ChannelGetStatus",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_LONG,
            "ModuleSlotIndex, ChannelIndex",
            "ChannelStatus",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetStatusCmd);

    //    Command ChannelGetStatusAsString
    ChannelGetStatusAsStringClass    *pChannelGetStatusAsStringCmd =
        new ChannelGetStatusAsStringClass("ChannelGetStatusAsString",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_STRING,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetStatusAsStringCmd);

    //    Command ChannelGetSupervisionBehavior
    ChannelGetSupervisionBehaviorClass    *pChannelGetSupervisionBehaviorCmd =
        new ChannelGetSupervisionBehaviorClass("ChannelGetSupervisionBehavior",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_LONG,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetSupervisionBehaviorCmd);

    //    Command ChannelGetSupervisionMaxCurrent
    ChannelGetSupervisionMaxCurrentClass    *pChannelGetSupervisionMaxCurrentCmd =
        new ChannelGetSupervisionMaxCurrentClass("ChannelGetSupervisionMaxCurrent",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetSupervisionMaxCurrentCmd);

    //    Command ChannelGetSupervisionMaxPower
    ChannelGetSupervisionMaxPowerClass    *pChannelGetSupervisionMaxPowerCmd =
        new ChannelGetSupervisionMaxPowerClass("ChannelGetSupervisionMaxPower",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetSupervisionMaxPowerCmd);

    //    Command ChannelGetSupervisionMaxTerminalVoltage
    ChannelGetSupervisionMaxTerminalVoltageClass    *pChannelGetSupervisionMaxTerminalVoltageCmd =
        new ChannelGetSupervisionMaxTerminalVoltageClass("ChannelGetSupervisionMaxTerminalVoltage",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetSupervisionMaxTerminalVoltageCmd);

    //    Command ChannelGetSupervisionMinSenseVoltage
    ChannelGetSupervisionMinSenseVoltageClass    *pChannelGetSupervisionMinSenseVoltageCmd =
        new ChannelGetSupervisionMinSenseVoltageClass("ChannelGetSupervisionMinSenseVoltage",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetSupervisionMinSenseVoltageCmd);

    //    Command ChannelGetSwitch
    ChannelGetSwitchClass    *pChannelGetSwitchCmd =
        new ChannelGetSwitchClass("ChannelGetSwitch",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_LONG,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetSwitchCmd);

    //    Command ChannelGetTripTime
    ChannelGetTripTimeClass    *pChannelGetTripTimeCmd =
        new ChannelGetTripTimeClass("ChannelGetTripTime",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_LONG,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetTripTimeCmd);

    //    Command ChannelGetUserConfig
    ChannelGetUserConfigClass    *pChannelGetUserConfigCmd =
        new ChannelGetUserConfigClass("ChannelGetUserConfig",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_LONG,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetUserConfigCmd);

    //    Command ChannelGetVoltage
    ChannelGetVoltageClass    *pChannelGetVoltageCmd =
        new ChannelGetVoltageClass("ChannelGetVoltage",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetVoltageCmd);

    //    Command ChannelGetVoltageFallRate
    ChannelGetVoltageFallRateClass    *pChannelGetVoltageFallRateCmd =
        new ChannelGetVoltageFallRateClass("ChannelGetVoltageFallRate",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetVoltageFallRateCmd);

    //    Command ChannelGetVoltageRiseRate
    ChannelGetVoltageRiseRateClass    *pChannelGetVoltageRiseRateCmd =
        new ChannelGetVoltageRiseRateClass("ChannelGetVoltageRiseRate",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_DOUBLE,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetVoltageRiseRateCmd);

    //    Command ChannelSetCurrent
    ChannelSetCurrentClass    *pChannelSetCurrentCmd =
        new ChannelSetCurrentClass("ChannelSetCurrent",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetCurrentCmd);

    //    Command ChannelSetCurrentFallRate
    ChannelSetCurrentFallRateClass    *pChannelSetCurrentFallRateCmd =
        new ChannelSetCurrentFallRateClass("ChannelSetCurrentFallRate",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetCurrentFallRateCmd);

    //    Command ChannelSetCurrentRiseRate
    ChannelSetCurrentRiseRateClass    *pChannelSetCurrentRiseRateCmd =
        new ChannelSetCurrentRiseRateClass("ChannelSetCurrentRiseRate",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetCurrentRiseRateCmd);

    //    Command ChannelSetSupervisionBehavior
    ChannelSetSupervisionBehaviorClass    *pChannelSetSupervisionBehaviorCmd =
        new ChannelSetSupervisionBehaviorClass("ChannelSetSupervisionBehavior",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetSupervisionBehaviorCmd);

    //    Command ChannelSetSupervisionMaxCurrent
    ChannelSetSupervisionMaxCurrentClass    *pChannelSetSupervisionMaxCurrentCmd =
        new ChannelSetSupervisionMaxCurrentClass("ChannelSetSupervisionMaxCurrent",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetSupervisionMaxCurrentCmd);

    //    Command ChannelSetSupervisionMaxTerminalVoltage
    ChannelSetSupervisionMaxTerminalVoltageClass    *pChannelSetSupervisionMaxTerminalVoltageCmd =
        new ChannelSetSupervisionMaxTerminalVoltageClass("ChannelSetSupervisionMaxTerminalVoltage",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetSupervisionMaxTerminalVoltageCmd);

    //    Command ChannelSetSupervisionMinSenseVoltage
    ChannelSetSupervisionMinSenseVoltageClass    *pChannelSetSupervisionMinSenseVoltageCmd =
        new ChannelSetSupervisionMinSenseVoltageClass("ChannelSetSupervisionMinSenseVoltage",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetSupervisionMinSenseVoltageCmd);

    //    Command ChannelSetSwitch
    ChannelSetSwitchClass    *pChannelSetSwitchCmd =
        new ChannelSetSwitchClass("ChannelSetSwitch",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetSwitchCmd);

    //    Command ChannelSetTripTime
    ChannelSetTripTimeClass    *pChannelSetTripTimeCmd =
        new ChannelSetTripTimeClass("ChannelSetTripTime",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetTripTimeCmd);

    //    Command ChannelSetUserConfig
    ChannelSetUserConfigClass    *pChannelSetUserConfigCmd =
        new ChannelSetUserConfigClass("ChannelSetUserConfig",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetUserConfigCmd);

    //    Command ChannelSetVoltage
    ChannelSetVoltageClass    *pChannelSetVoltageCmd =
        new ChannelSetVoltageClass("ChannelSetVoltage",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetVoltageCmd);

    //    Command ChannelSetVoltageFallRate
    ChannelSetVoltageFallRateClass    *pChannelSetVoltageFallRateCmd =
        new ChannelSetVoltageFallRateClass("ChannelSetVoltageFallRate",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetVoltageFallRateCmd);

    //    Command ChannelSetVoltageRiseRate
    ChannelSetVoltageRiseRateClass    *pChannelSetVoltageRiseRateCmd =
        new ChannelSetVoltageRiseRateClass("ChannelSetVoltageRiseRate",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "ModuleSlotIndex, ChannelIndex, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelSetVoltageRiseRateCmd);

    //    Command CrateGetFanSpeed
    CrateGetFanSpeedClass    *pCrateGetFanSpeedCmd =
        new CrateGetFanSpeedClass("CrateGetFanSpeed",
            Tango::DEV_VOID, Tango::DEV_LONG,
            "",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateGetFanSpeedCmd);

    //    Command CrateGetNumberOfChannels
    CrateGetNumberOfChannelsClass    *pCrateGetNumberOfChannelsCmd =
        new CrateGetNumberOfChannelsClass("CrateGetNumberOfChannels",
            Tango::DEV_VOID, Tango::DEV_LONG,
            "",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateGetNumberOfChannelsCmd);

    //    Command CrateGetNumberOfGroups
    CrateGetNumberOfGroupsClass    *pCrateGetNumberOfGroupsCmd =
        new CrateGetNumberOfGroupsClass("CrateGetNumberOfGroups",
            Tango::DEV_VOID, Tango::DEV_LONG,
            "",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateGetNumberOfGroupsCmd);


    //    Command CrateGetNumberOfModules
    CrateGetNumberOfModulesClass    *pCrateGetNumberOfModulesCmd =
        new CrateGetNumberOfModulesClass("CrateGetNumberOfModules",
            Tango::DEV_VOID, Tango::DEV_LONG,
            "",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateGetNumberOfModulesCmd);

    //    Command CrateGetOccupiedSlots
    CrateGetOccupiedSlotsClass    *pCrateGetOccupiedSlotsCmd =
        new CrateGetOccupiedSlotsClass("CrateGetOccupiedSlots",
            Tango::DEV_VOID, Tango::DEVVAR_ULONGARRAY,
            "Value",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateGetOccupiedSlotsCmd);

    //    Command CrateGetSerialNumber
    CrateGetSerialNumberClass    *pCrateGetSerialNumberCmd =
        new CrateGetSerialNumberClass("CrateGetSerialNumber",
            Tango::DEV_VOID, Tango::DEV_STRING,
            "",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateGetSerialNumberCmd);

    //    Command CrateGetSysDescr
    CrateGetSysDescrClass    *pCrateGetSysDescrCmd =
        new CrateGetSysDescrClass("CrateGetSysDescr",
            Tango::DEV_VOID, Tango::DEV_STRING,
            "",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateGetSysDescrCmd);

    //    Command CrateGetSysMainSwitch
    CrateGetSysMainSwitchClass    *pCrateGetSysMainSwitchCmd =
        new CrateGetSysMainSwitchClass("CrateGetSysMainSwitch",
            Tango::DEV_VOID, Tango::DEV_LONG,
            "",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateGetSysMainSwitchCmd);

    //    Command CrateGetSysStatus
    CrateGetSysStatusClass    *pCrateGetSysStatusCmd =
        new CrateGetSysStatusClass("CrateGetSysStatus",
            Tango::DEV_VOID, Tango::DEV_LONG,
            "",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateGetSysStatusCmd);

    //    Command CrateGetSysStatusAsString
    CrateGetSysStatusAsStringClass    *pCrateGetSysStatusAsStringCmd =
        new CrateGetSysStatusAsStringClass("CrateGetSysStatusAsString",
            Tango::DEV_VOID, Tango::DEV_STRING,
            "",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateGetSysStatusAsStringCmd);

    //    Command CrateSetFanSpeed
    CrateSetFanSpeedClass    *pCrateSetFanSpeedCmd =
        new CrateSetFanSpeedClass("CrateSetFanSpeed",
            Tango::DEV_LONG, Tango::DEV_BOOLEAN,
            "Value",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateSetFanSpeedCmd);

    //    Command CrateSetSysHardwareReset
    CrateSetSysHardwareResetClass    *pCrateSetSysHardwareResetCmd =
        new CrateSetSysHardwareResetClass("CrateSetSysHardwareReset",
            Tango::DEV_ULONG, Tango::DEV_BOOLEAN,
            "Value",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateSetSysHardwareResetCmd);

    //    Command CrateSetSysMainSwitch
    CrateSetSysMainSwitchClass    *pCrateSetSysMainSwitchCmd =
        new CrateSetSysMainSwitchClass("CrateSetSysMainSwitch",
            Tango::DEV_ULONG, Tango::DEV_BOOLEAN,
            "Value",
            "",
            Tango::EXPERT);
    command_list.push_back(pCrateSetSysMainSwitchCmd);

    //    Command GroupGetIndex
    GroupGetIndexClass    *pGroupGetIndexCmd =
        new GroupGetIndexClass("GroupGetIndex",
            Tango::DEV_LONG, Tango::DEV_LONG,
            "Group index",
            "",
            Tango::EXPERT);
    command_list.push_back(pGroupGetIndexCmd);

    //    Command GroupSetSwitch
    GroupSetSwitchClass    *pGroupSetSwitchCmd =
        new GroupSetSwitchClass("GroupSetSwitch",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_BOOLEAN,
            "Group index, Value",
            "",
            Tango::EXPERT);
    command_list.push_back(pGroupSetSwitchCmd);

    //    Command ModuleGetAuxiliaryMeasurementVoltage0
    ModuleGetAuxiliaryMeasurementVoltage0Class    *pModuleGetAuxiliaryMeasurementVoltage0Cmd =
        new ModuleGetAuxiliaryMeasurementVoltage0Class("ModuleGetAuxiliaryMeasurementVoltage0",
            Tango::DEV_LONG, Tango::DEV_DOUBLE,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetAuxiliaryMeasurementVoltage0Cmd);

    //    Command ModuleGetAuxiliaryMeasurementVoltage1
    ModuleGetAuxiliaryMeasurementVoltage1Class    *pModuleGetAuxiliaryMeasurementVoltage1Cmd =
        new ModuleGetAuxiliaryMeasurementVoltage1Class("ModuleGetAuxiliaryMeasurementVoltage1",
            Tango::DEV_LONG, Tango::DEV_DOUBLE,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetAuxiliaryMeasurementVoltage1Cmd);

    //    Command ModuleGetDescription
    ModuleGetDescriptionClass    *pModuleGetDescriptionCmd =
        new ModuleGetDescriptionClass("ModuleGetDescription",
            Tango::DEV_LONG, Tango::DEV_STRING,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetDescriptionCmd);

    //    Command ModuleGetEventChannelStatus
    ModuleGetEventChannelStatusClass    *pModuleGetEventChannelStatusCmd =
        new ModuleGetEventChannelStatusClass("ModuleGetEventChannelStatus",
            Tango::DEV_LONG, Tango::DEV_LONG,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetEventChannelStatusCmd);

    //    Command ModuleGetEventStatus
    ModuleGetEventStatusClass    *pModuleGetEventStatusCmd =
        new ModuleGetEventStatusClass("ModuleGetEventStatus",
            Tango::DEV_LONG, Tango::DEV_LONG,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetEventStatusCmd);

    //    Command ModuleGetEventStatusAsString
    ModuleGetEventStatusAsStringClass    *pModuleGetEventStatusAsStringCmd =
        new ModuleGetEventStatusAsStringClass("ModuleGetEventStatusAsString",
            Tango::DEV_LONG, Tango::DEV_STRING,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetEventStatusAsStringCmd);

    //    Command ModuleGetHardwareLimitCurrent
    ModuleGetHardwareLimitCurrentClass    *pModuleGetHardwareLimitCurrentCmd =
        new ModuleGetHardwareLimitCurrentClass("ModuleGetHardwareLimitCurrent",
            Tango::DEV_LONG, Tango::DEV_DOUBLE,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetHardwareLimitCurrentCmd);

    //    Command ModuleGetHardwareLimitVoltage
    ModuleGetHardwareLimitVoltageClass    *pModuleGetHardwareLimitVoltageCmd =
        new ModuleGetHardwareLimitVoltageClass("ModuleGetHardwareLimitVoltage",
            Tango::DEV_LONG, Tango::DEV_DOUBLE,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetHardwareLimitVoltageCmd);

    //    Command ModuleGetIndex
    ModuleGetIndexClass    *pModuleGetIndexCmd =
        new ModuleGetIndexClass("ModuleGetIndex",
            Tango::DEV_LONG, Tango::DEV_LONG,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetIndexCmd);

    //    Command ModuleGetIsHvModule
    ModuleGetIsHvModuleClass    *pModuleGetIsHvModuleCmd =
        new ModuleGetIsHvModuleClass("ModuleGetIsHvModule",
            Tango::DEV_LONG, Tango::DEV_BOOLEAN,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetIsHvModuleCmd);

    //    Command ModuleGetMeasurementTemperature0
    ModuleGetMeasurementTemperature0Class    *pModuleGetMeasurementTemperature0Cmd =
        new ModuleGetMeasurementTemperature0Class("ModuleGetMeasurementTemperature0",
            Tango::DEV_LONG, Tango::DEV_DOUBLE,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetMeasurementTemperature0Cmd);

    //    Command ModuleGetMeasurementTemperature1
    ModuleGetMeasurementTemperature1Class    *pModuleGetMeasurementTemperature1Cmd =
        new ModuleGetMeasurementTemperature1Class("ModuleGetMeasurementTemperature1",
            Tango::DEV_LONG, Tango::DEV_DOUBLE,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetMeasurementTemperature1Cmd);

    //    Command ModuleGetMeasurementTemperature2
    ModuleGetMeasurementTemperature2Class    *pModuleGetMeasurementTemperature2Cmd =
        new ModuleGetMeasurementTemperature2Class("ModuleGetMeasurementTemperature2",
            Tango::DEV_LONG, Tango::DEV_DOUBLE,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetMeasurementTemperature2Cmd);

    //    Command ModuleGetMeasurementTemperature3
    ModuleGetMeasurementTemperature3Class    *pModuleGetMeasurementTemperature3Cmd =
        new ModuleGetMeasurementTemperature3Class("ModuleGetMeasurementTemperature3",
            Tango::DEV_LONG, Tango::DEV_DOUBLE,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetMeasurementTemperature3Cmd);

    //    Command ModuleGetNumberOfChannels
    ModuleGetNumberOfChannelsClass    *pModuleGetNumberOfChannelsCmd =
        new ModuleGetNumberOfChannelsClass("ModuleGetNumberOfChannels",
            Tango::DEV_LONG, Tango::DEV_LONG,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetNumberOfChannelsCmd);

    //    Command ModuleGetRampSpeedCurrent
    ModuleGetRampSpeedCurrentClass    *pModuleGetRampSpeedCurrentCmd =
        new ModuleGetRampSpeedCurrentClass("ModuleGetRampSpeedCurrent",
            Tango::DEV_LONG, Tango::DEV_DOUBLE,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetRampSpeedCurrentCmd);

    //    Command ModuleGetRampSpeedVoltage
    ModuleGetRampSpeedVoltageClass    *pModuleGetRampSpeedVoltageCmd =
        new ModuleGetRampSpeedVoltageClass("ModuleGetRampSpeedVoltage",
            Tango::DEV_LONG, Tango::DEV_DOUBLE,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetRampSpeedVoltageCmd);

    //    Command ModuleGetStatus
    ModuleGetStatusClass    *pModuleGetStatusCmd =
        new ModuleGetStatusClass("ModuleGetStatus",
            Tango::DEV_LONG, Tango::DEV_LONG,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetStatusCmd);

    //    Command ModuleGetStatusAsString
    ModuleGetStatusAsStringClass    *pModuleGetStatusAsStringCmd =
        new ModuleGetStatusAsStringClass("ModuleGetStatusAsString",
            Tango::DEV_LONG, Tango::DEV_STRING,
            "Slot index",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleGetStatusAsStringCmd);

    //    Command ModuleSetDoClear
    ModuleSetDoClearClass    *pModuleSetDoClearCmd =
        new ModuleSetDoClearClass("ModuleSetDoClear",
            Tango::DEVVAR_ULONGARRAY, Tango::DEV_BOOLEAN,
            "Slot index, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleSetDoClearCmd);

    //    Command ModuleSetRampSpeedCurrent
    ModuleSetRampSpeedCurrentClass    *pModuleSetRampSpeedCurrentCmd =
        new ModuleSetRampSpeedCurrentClass("ModuleSetRampSpeedCurrent",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "Slot index, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleSetRampSpeedCurrentCmd);

    //    Command ModuleSetRampSpeedVoltage
    ModuleSetRampSpeedVoltageClass    *pModuleSetRampSpeedVoltageCmd =
        new ModuleSetRampSpeedVoltageClass("ModuleSetRampSpeedVoltage",
            Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_BOOLEAN,
            "Slot index, Value",
            "",
            Tango::OPERATOR);
    command_list.push_back(pModuleSetRampSpeedVoltageCmd);

    //    Command SnmpGetDescription
    SnmpGetDescriptionClass    *pSnmpGetDescriptionCmd =
        new SnmpGetDescriptionClass("SnmpGetDescription",
            Tango::DEV_STRING, Tango::DEV_STRING,
            "OID as string",
            "Description from MIB file.",
            Tango::EXPERT);
    command_list.push_back(pSnmpGetDescriptionCmd);

    //    Command SnmpGetNextOID
    SnmpGetNextOIDClass    *pSnmpGetNextOIDCmd =
        new SnmpGetNextOIDClass("SnmpGetNextOID",
            Tango::DEV_STRING, Tango::DEV_STRING,
            "CurrentOID",
            "NextOID",
            Tango::EXPERT);
    command_list.push_back(pSnmpGetNextOIDCmd);

    //    Command SnmpGetValueDouble
    SnmpGetValueDoubleClass    *pSnmpGetValueDoubleCmd =
        new SnmpGetValueDoubleClass("SnmpGetValueDouble",
            Tango::DEV_STRING, Tango::DEV_DOUBLE,
            "OID name",
            "Double value",
            Tango::EXPERT);
    command_list.push_back(pSnmpGetValueDoubleCmd);

    //    Command SnmpGetValueInt
    SnmpGetValueIntClass    *pSnmpGetValueIntCmd =
        new SnmpGetValueIntClass("SnmpGetValueInt",
            Tango::DEV_STRING, Tango::DEV_LONG,
            "OID name",
            "",
            Tango::EXPERT);
    command_list.push_back(pSnmpGetValueIntCmd);

    //    Command SnmpGetValueString
    SnmpGetValueStringClass    *pSnmpGetValueStringCmd =
        new SnmpGetValueStringClass("SnmpGetValueString",
            Tango::DEV_STRING, Tango::DEV_STRING,
            "OID name",
            "String variable value",
            Tango::EXPERT);
    command_list.push_back(pSnmpGetValueStringCmd);

    //    Command SnmpSetValueDouble
    SnmpSetValueDoubleClass    *pSnmpSetValueDoubleCmd =
        new SnmpSetValueDoubleClass("SnmpSetValueDouble",
            Tango::DEVVAR_DOUBLESTRINGARRAY, Tango::DEV_BOOLEAN,
            "Variable name (string) and value to set (double).",
            "True on success, false otherwise.",
            Tango::EXPERT);
    command_list.push_back(pSnmpSetValueDoubleCmd);

    //    Command SnmpSetValueInt
    SnmpSetValueIntClass    *pSnmpSetValueIntCmd =
        new SnmpSetValueIntClass("SnmpSetValueInt",
            Tango::DEVVAR_LONGSTRINGARRAY, Tango::DEV_BOOLEAN,
            "Variable name and value to set",
            "True on success, false otherwise.",
            Tango::EXPERT);
    command_list.push_back(pSnmpSetValueIntCmd);

    //    Command SnmpTranslateFromOID
    SnmpTranslateFromOIDClass    *pSnmpTranslateFromOIDCmd =
        new SnmpTranslateFromOIDClass("SnmpTranslateFromOID",
            Tango::DEV_STRING, Tango::DEV_STRING,
            "OID as string",
            "Human readable string",
            Tango::EXPERT);
    command_list.push_back(pSnmpTranslateFromOIDCmd);

    //    Command SnmpTranslateToOID
    SnmpTranslateToOIDClass    *pSnmpTranslateToOIDCmd =
        new SnmpTranslateToOIDClass("SnmpTranslateToOID",
            Tango::DEV_STRING, Tango::DEV_STRING,
            "Human readable string",
            "OID as string",
            Tango::EXPERT);
    command_list.push_back(pSnmpTranslateToOIDCmd);

    //    Command ChannelGetMeasurementCurrentVector
    ChannelGetMeasurementCurrentVectorClass    *pChannelGetMeasurementCurrentVectorCmd =
        new ChannelGetMeasurementCurrentVectorClass("ChannelGetMeasurementCurrentVector",
            Tango::DEVVAR_ULONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetMeasurementCurrentVectorCmd);

    //    Command ChannelGetMeasurementSenseVoltageVector
    ChannelGetMeasurementSenseVoltageVectorClass    *pChannelGetMeasurementSenseVoltageVectorCmd =
        new ChannelGetMeasurementSenseVoltageVectorClass("ChannelGetMeasurementSenseVoltageVector",
            Tango::DEVVAR_ULONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetMeasurementSenseVoltageVectorCmd);

    //    Command ChannelGetMeasurementTerminalVoltageVector
    ChannelGetMeasurementTerminalVoltageVectorClass    *pChannelGetMeasurementTerminalVoltageVectorCmd =
        new ChannelGetMeasurementTerminalVoltageVectorClass("ChannelGetMeasurementTerminalVoltageVector",
            Tango::DEVVAR_ULONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
            "ModuleSlotIndex, ChannelIndex",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetMeasurementTerminalVoltageVectorCmd);

    //    Command ChannelGetMeasurementTimeVector
    ChannelGetMeasurementTimeVectorClass    *pChannelGetMeasurementTimeVectorCmd =
        new ChannelGetMeasurementTimeVectorClass("ChannelGetMeasurementTimeVector",
            Tango::DEV_VOID, Tango::DEVVAR_DOUBLEARRAY,
            "",
            "",
            Tango::OPERATOR);
    command_list.push_back(pChannelGetMeasurementTimeVectorCmd);

    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::command_factory_after) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::command_factory_after
}

//===================================================================
//    Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method :         WienerMpodLvHvCtrlClass::create_static_attribute_list
 * description :     Create the a list of static attributes
 *
 * @param    att_list    the ceated attribute list
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrlClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
    for (unsigned long i=0 ; i<att_list.size() ; i++)
    {
        string att_name(att_list[i]->get_name());
        transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
        defaultAttList.push_back(att_name);
    }

    cout2 << defaultAttList.size() << " attributes in default list" << endl;

    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::create_static_att_list) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method :         WienerMpodLvHvCtrlClass::erase_dynamic_attributes
 * description :     delete the dynamic attributes if any.
 *
 * @param    devlist_ptr    the device list pointer
 * @param    list of all attributes
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrlClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
    Tango::Util *tg = Tango::Util::instance();

    for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
    {
        Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
        WienerMpodLvHvCtrl *dev = static_cast<WienerMpodLvHvCtrl *> (dev_impl);

        vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
        vector<Tango::Attribute *>::iterator ite_att;
        for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
        {
            string att_name((*ite_att)->get_name_lower());
            if ((att_name == "state") || (att_name == "status"))
                continue;
            vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
            if (ite_str == defaultAttList.end())
            {
                cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
                Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
                dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
                --ite_att;
            }
        }
    }
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::erase_dynamic_attributes) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrlClass::get_attr_object_by_name()
 *    Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *WienerMpodLvHvCtrlClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
    vector<Tango::Attr *>::iterator it;
    for (it=att_list.begin() ; it<att_list.end() ; ++it)
        if ((*it)->get_name()==attname)
            return (*it);
    //    Attr does not exist
    return NULL;
}


/*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::Additional Methods
} //    namespace
