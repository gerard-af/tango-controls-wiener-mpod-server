/*----- PROTECTED REGION ID(WienerMpodLvHvCtrlStateMachine.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        WienerMpodLvHvCtrlStateMachine.cpp
//
// description : State machine file for the WienerMpodLvHvCtrl class
//
// project :     MPOD Ctrl for iseg HV
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <WienerMpodLvHvCtrl.h>

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::WienerMpodLvHvCtrlStateMachine.cpp

//================================================================
//  States  |  Description
//================================================================
//  ON      |  The connection to the crate is established.
//          |  The crate is switched on.
//          |  All channels and modules are visible.
//  FAULT   |  Problems in connection.
//  OFF     |  The connection to the crate is established.
//          |  The crate is switched off.
//          |  The channel and module information is not accessible.


namespace WienerMpodLvHvCtrl_ns
{
//=================================================
//        Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_IsMibFileLoaded_allowed()
 *    Description : Execution allowed for IsMibFileLoaded attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_IsMibFileLoaded_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

    //    Not any excluded states for IsMibFileLoaded attribute in read access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::IsMibFileLoadedStateAllowed_READ) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::IsMibFileLoadedStateAllowed_READ
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SysDescr_allowed()
 *    Description : Execution allowed for SysDescr attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SysDescr_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

    //    Not any excluded states for SysDescr attribute in read access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SysDescrStateAllowed_READ) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SysDescrStateAllowed_READ
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SysMainSwitch_allowed()
 *    Description : Execution allowed for SysMainSwitch attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SysMainSwitch_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
    //    Not any excluded states for SysMainSwitch attribute in Write access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SysMainSwitchStateAllowed_WRITE) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SysMainSwitchStateAllowed_WRITE

    //    Not any excluded states for SysMainSwitch attribute in read access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SysMainSwitchStateAllowed_READ) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SysMainSwitchStateAllowed_READ
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SysStatus_allowed()
 *    Description : Execution allowed for SysStatus attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SysStatus_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

    //    Not any excluded states for SysStatus attribute in read access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SysStatusStateAllowed_READ) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SysStatusStateAllowed_READ
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SysStatusAsString_allowed()
 *    Description : Execution allowed for SysStatusAsString attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SysStatusAsString_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

    //    Not any excluded states for SysStatusAsString attribute in read access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SysStatusAsStringStateAllowed_READ) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SysStatusAsStringStateAllowed_READ
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SerialNumber_allowed()
 *    Description : Execution allowed for SerialNumber attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SerialNumber_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

    //    Not any excluded states for SerialNumber attribute in read access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SerialNumberStateAllowed_READ) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SerialNumberStateAllowed_READ
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_FanSpeed_allowed()
 *    Description : Execution allowed for FanSpeed attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_FanSpeed_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
    //    Not any excluded states for FanSpeed attribute in Write access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::FanSpeedStateAllowed_WRITE) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::FanSpeedStateAllowed_WRITE

    //    Not any excluded states for FanSpeed attribute in read access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::FanSpeedStateAllowed_READ) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::FanSpeedStateAllowed_READ
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_NumberOfModules_allowed()
 *    Description : Execution allowed for NumberOfModules attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_NumberOfModules_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

    //    Not any excluded states for NumberOfModules attribute in read access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::NumberOfModulesStateAllowed_READ) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::NumberOfModulesStateAllowed_READ
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_NumberOfChannels_allowed()
 *    Description : Execution allowed for NumberOfChannels attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_NumberOfChannels_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

    //    Not any excluded states for NumberOfChannels attribute in read access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::NumberOfChannelsStateAllowed_READ) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::NumberOfChannelsStateAllowed_READ
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_NumberOfGroups_allowed()
 *    Description : Execution allowed for NumberOfGroups attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_NumberOfGroups_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

    //    Not any excluded states for NumberOfGroups attribute in read access.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::NumberOfGroupsStateAllowed_READ) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::NumberOfGroupsStateAllowed_READ
    return true;
}


//=================================================
//        Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetConfigMaxCurrent_allowed()
 *    Description : Execution allowed for ChannelGetConfigMaxCurrent attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetConfigMaxCurrent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetConfigMaxCurrent command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetConfigMaxCurrentStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetConfigMaxCurrentStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetConfigMaxSenseVoltage_allowed()
 *    Description : Execution allowed for ChannelGetConfigMaxSenseVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetConfigMaxSenseVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetConfigMaxSenseVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetConfigMaxSenseVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetConfigMaxSenseVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetConfigMaxTerminalVoltage_allowed()
 *    Description : Execution allowed for ChannelGetConfigMaxTerminalVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetConfigMaxTerminalVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetConfigMaxTerminalVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetConfigMaxTerminalVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetConfigMaxTerminalVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetCurrent_allowed()
 *    Description : Execution allowed for ChannelGetCurrent attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetCurrent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetCurrent command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetCurrentStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetCurrentStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetCurrentFallRate_allowed()
 *    Description : Execution allowed for ChannelGetCurrentFallRate attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetCurrentFallRate_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetCurrentFallRate command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetCurrentFallRateStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetCurrentFallRateStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetCurrentRiseRate_allowed()
 *    Description : Execution allowed for ChannelGetCurrentRiseRate attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetCurrentRiseRate_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetCurrentRiseRate command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetCurrentRiseRateStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetCurrentRiseRateStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetIndex_allowed()
 *    Description : Execution allowed for ChannelGetIndex attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetIndex_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetIndex command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetIndexStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetIndexStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetMeasurementCurrent_allowed()
 *    Description : Execution allowed for ChannelGetMeasurementCurrent attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetMeasurementCurrent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetMeasurementCurrent command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetMeasurementCurrentStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetMeasurementCurrentStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetMeasurementSenseVoltage_allowed()
 *    Description : Execution allowed for ChannelGetMeasurementSenseVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetMeasurementSenseVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetMeasurementSenseVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetMeasurementSenseVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetMeasurementSenseVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetMeasurementTemperature_allowed()
 *    Description : Execution allowed for ChannelGetMeasurementTemperature attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetMeasurementTemperature_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetMeasurementTemperature command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetMeasurementTemperatureStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetMeasurementTemperatureStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetMeasurementTerminalVoltage_allowed()
 *    Description : Execution allowed for ChannelGetMeasurementTerminalVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetMeasurementTerminalVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetMeasurementTerminalVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetMeasurementTerminalVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetMeasurementTerminalVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetStatus_allowed()
 *    Description : Execution allowed for ChannelGetStatus attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetStatus_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetStatus command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetStatusStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetStatusStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetStatusAsString_allowed()
 *    Description : Execution allowed for ChannelGetStatusAsString attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetStatusAsString_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetStatusAsString command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetStatusAsStringStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetStatusAsStringStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetSupervisionBehavior_allowed()
 *    Description : Execution allowed for ChannelGetSupervisionBehavior attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetSupervisionBehavior_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetSupervisionBehavior command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetSupervisionBehaviorStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetSupervisionBehaviorStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetSupervisionMaxCurrent_allowed()
 *    Description : Execution allowed for ChannelGetSupervisionMaxCurrent attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetSupervisionMaxCurrent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetSupervisionMaxCurrent command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetSupervisionMaxCurrentStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetSupervisionMaxCurrentStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetSupervisionMaxPower_allowed()
 *    Description : Execution allowed for ChannelGetSupervisionMaxPower attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetSupervisionMaxPower_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetSupervisionMaxPower command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetSupervisionMaxPowerStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetSupervisionMaxPowerStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetSupervisionMaxTerminalVoltage_allowed()
 *    Description : Execution allowed for ChannelGetSupervisionMaxTerminalVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetSupervisionMaxTerminalVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetSupervisionMaxTerminalVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetSupervisionMaxTerminalVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetSupervisionMaxTerminalVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetSupervisionMinSenseVoltage_allowed()
 *    Description : Execution allowed for ChannelGetSupervisionMinSenseVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetSupervisionMinSenseVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetSupervisionMinSenseVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetSupervisionMinSenseVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetSupervisionMinSenseVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetSwitch_allowed()
 *    Description : Execution allowed for ChannelGetSwitch attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetSwitch_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetSwitch command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetSwitchStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetSwitchStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetTripTime_allowed()
 *    Description : Execution allowed for ChannelGetTripTime attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetTripTime_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetTripTime command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetTripTimeStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetTripTimeStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetUserConfig_allowed()
 *    Description : Execution allowed for ChannelGetUserConfig attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetUserConfig_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetUserConfig command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetUserConfigStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetUserConfigStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetVoltage_allowed()
 *    Description : Execution allowed for ChannelGetVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetVoltageFallRate_allowed()
 *    Description : Execution allowed for ChannelGetVoltageFallRate attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetVoltageFallRate_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetVoltageFallRate command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetVoltageFallRateStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetVoltageFallRateStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetVoltageRiseRate_allowed()
 *    Description : Execution allowed for ChannelGetVoltageRiseRate attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetVoltageRiseRate_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetVoltageRiseRate command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetVoltageRiseRateStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetVoltageRiseRateStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetCurrent_allowed()
 *    Description : Execution allowed for ChannelSetCurrent attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetCurrent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetCurrent command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetCurrentStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetCurrentStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetCurrentFallRate_allowed()
 *    Description : Execution allowed for ChannelSetCurrentFallRate attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetCurrentFallRate_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetCurrentFallRate command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetCurrentFallRateStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetCurrentFallRateStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetCurrentRiseRate_allowed()
 *    Description : Execution allowed for ChannelSetCurrentRiseRate attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetCurrentRiseRate_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetCurrentRiseRate command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetCurrentRiseRateStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetCurrentRiseRateStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetSupervisionBehavior_allowed()
 *    Description : Execution allowed for ChannelSetSupervisionBehavior attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetSupervisionBehavior_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetSupervisionBehavior command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetSupervisionBehaviorStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetSupervisionBehaviorStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetSupervisionMaxCurrent_allowed()
 *    Description : Execution allowed for ChannelSetSupervisionMaxCurrent attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetSupervisionMaxCurrent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetSupervisionMaxCurrent command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetSupervisionMaxCurrentStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetSupervisionMaxCurrentStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetSupervisionMaxTerminalVoltage_allowed()
 *    Description : Execution allowed for ChannelSetSupervisionMaxTerminalVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetSupervisionMaxTerminalVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetSupervisionMaxTerminalVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetSupervisionMaxTerminalVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetSupervisionMaxTerminalVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetSupervisionMinSenseVoltage_allowed()
 *    Description : Execution allowed for ChannelSetSupervisionMinSenseVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetSupervisionMinSenseVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetSupervisionMinSenseVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetSupervisionMinSenseVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetSupervisionMinSenseVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetSwitch_allowed()
 *    Description : Execution allowed for ChannelSetSwitch attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetSwitch_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetSwitch command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetSwitchStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetSwitchStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetTripTime_allowed()
 *    Description : Execution allowed for ChannelSetTripTime attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetTripTime_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetTripTime command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetTripTimeStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetTripTimeStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetUserConfig_allowed()
 *    Description : Execution allowed for ChannelSetUserConfig attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetUserConfig_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetUserConfig command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetUserConfigStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetUserConfigStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetVoltage_allowed()
 *    Description : Execution allowed for ChannelSetVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetVoltageFallRate_allowed()
 *    Description : Execution allowed for ChannelSetVoltageFallRate attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetVoltageFallRate_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetVoltageFallRate command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetVoltageFallRateStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetVoltageFallRateStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelSetVoltageRiseRate_allowed()
 *    Description : Execution allowed for ChannelSetVoltageRiseRate attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelSetVoltageRiseRate_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelSetVoltageRiseRate command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelSetVoltageRiseRateStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelSetVoltageRiseRateStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateGetFanSpeed_allowed()
 *    Description : Execution allowed for CrateGetFanSpeed attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateGetFanSpeed_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateGetFanSpeed command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateGetFanSpeedStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateGetFanSpeedStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateGetNumberOfChannels_allowed()
 *    Description : Execution allowed for CrateGetNumberOfChannels attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateGetNumberOfChannels_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateGetNumberOfChannels command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateGetNumberOfChannelsStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateGetNumberOfChannelsStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateGetNumberOfGroups_allowed()
 *    Description : Execution allowed for CrateGetNumberOfGroups attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateGetNumberOfGroups_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateGetNumberOfGroups command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateGetNumberOfGroupsStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateGetNumberOfGroupsStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateGetNumberOfModules_allowed()
 *    Description : Execution allowed for CrateGetNumberOfModules attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateGetNumberOfModules_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateGetNumberOfModules command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateGetNumberOfModulesStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateGetNumberOfModulesStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateGetOccupiedSlots_allowed()
 *    Description : Execution allowed for CrateGetOccupiedSlots attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateGetOccupiedSlots_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateGetOccupiedSlots command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateGetOccupiedSlotsStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateGetOccupiedSlotsStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateGetSerialNumber_allowed()
 *    Description : Execution allowed for CrateGetSerialNumber attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateGetSerialNumber_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateGetSerialNumber command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateGetSerialNumberStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateGetSerialNumberStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateGetSysDescr_allowed()
 *    Description : Execution allowed for CrateGetSysDescr attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateGetSysDescr_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateGetSysDescr command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateGetSysDescrStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateGetSysDescrStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateGetSysMainSwitch_allowed()
 *    Description : Execution allowed for CrateGetSysMainSwitch attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateGetSysMainSwitch_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateGetSysMainSwitch command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateGetSysMainSwitchStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateGetSysMainSwitchStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateGetSysStatus_allowed()
 *    Description : Execution allowed for CrateGetSysStatus attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateGetSysStatus_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateGetSysStatus command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateGetSysStatusStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateGetSysStatusStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateGetSysStatusAsString_allowed()
 *    Description : Execution allowed for CrateGetSysStatusAsString attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateGetSysStatusAsString_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateGetSysStatusAsString command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateGetSysStatusAsStringStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateGetSysStatusAsStringStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateSetFanSpeed_allowed()
 *    Description : Execution allowed for CrateSetFanSpeed attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateSetFanSpeed_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateSetFanSpeed command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateSetFanSpeedStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateSetFanSpeedStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateSetSysHardwareReset_allowed()
 *    Description : Execution allowed for CrateSetSysHardwareReset attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateSetSysHardwareReset_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateSetSysHardwareReset command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateSetSysHardwareResetStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateSetSysHardwareResetStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_CrateSetSysMainSwitch_allowed()
 *    Description : Execution allowed for CrateSetSysMainSwitch attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_CrateSetSysMainSwitch_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for CrateSetSysMainSwitch command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::CrateSetSysMainSwitchStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::CrateSetSysMainSwitchStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_GroupGetIndex_allowed()
 *    Description : Execution allowed for GroupGetIndex attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_GroupGetIndex_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for GroupGetIndex command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::GroupGetIndexStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::GroupGetIndexStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_GroupSetSwitch_allowed()
 *    Description : Execution allowed for GroupSetSwitch attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_GroupSetSwitch_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for GroupSetSwitch command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::GroupSetSwitchStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::GroupSetSwitchStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetAuxiliaryMeasurementVoltage0_allowed()
 *    Description : Execution allowed for ModuleGetAuxiliaryMeasurementVoltage0 attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetAuxiliaryMeasurementVoltage0_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetAuxiliaryMeasurementVoltage0 command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetAuxiliaryMeasurementVoltage0StateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetAuxiliaryMeasurementVoltage0StateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetAuxiliaryMeasurementVoltage1_allowed()
 *    Description : Execution allowed for ModuleGetAuxiliaryMeasurementVoltage1 attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetAuxiliaryMeasurementVoltage1_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetAuxiliaryMeasurementVoltage1 command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetAuxiliaryMeasurementVoltage1StateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetAuxiliaryMeasurementVoltage1StateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetDescription_allowed()
 *    Description : Execution allowed for ModuleGetDescription attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetDescription_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetDescription command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetDescriptionStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetDescriptionStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetEventChannelStatus_allowed()
 *    Description : Execution allowed for ModuleGetEventChannelStatus attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetEventChannelStatus_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetEventChannelStatus command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetEventChannelStatusStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetEventChannelStatusStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetEventStatus_allowed()
 *    Description : Execution allowed for ModuleGetEventStatus attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetEventStatus_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetEventStatus command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetEventStatusStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetEventStatusStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetEventStatusAsString_allowed()
 *    Description : Execution allowed for ModuleGetEventStatusAsString attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetEventStatusAsString_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetEventStatusAsString command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetEventStatusAsStringStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetEventStatusAsStringStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetHardwareLimitCurrent_allowed()
 *    Description : Execution allowed for ModuleGetHardwareLimitCurrent attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetHardwareLimitCurrent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetHardwareLimitCurrent command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetHardwareLimitCurrentStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetHardwareLimitCurrentStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetHardwareLimitVoltage_allowed()
 *    Description : Execution allowed for ModuleGetHardwareLimitVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetHardwareLimitVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetHardwareLimitVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetHardwareLimitVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetHardwareLimitVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetIndex_allowed()
 *    Description : Execution allowed for ModuleGetIndex attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetIndex_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetIndex command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetIndexStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetIndexStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetIsHvModule_allowed()
 *    Description : Execution allowed for ModuleGetIsHvModule attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetIsHvModule_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetIsHvModule command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetIsHvModuleStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetIsHvModuleStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetMeasurementTemperature0_allowed()
 *    Description : Execution allowed for ModuleGetMeasurementTemperature0 attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetMeasurementTemperature0_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetMeasurementTemperature0 command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature0StateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature0StateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetMeasurementTemperature1_allowed()
 *    Description : Execution allowed for ModuleGetMeasurementTemperature1 attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetMeasurementTemperature1_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetMeasurementTemperature1 command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature1StateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature1StateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetMeasurementTemperature2_allowed()
 *    Description : Execution allowed for ModuleGetMeasurementTemperature2 attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetMeasurementTemperature2_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetMeasurementTemperature2 command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature2StateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature2StateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetMeasurementTemperature3_allowed()
 *    Description : Execution allowed for ModuleGetMeasurementTemperature3 attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetMeasurementTemperature3_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetMeasurementTemperature3 command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature3StateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature3StateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetNumberOfChannels_allowed()
 *    Description : Execution allowed for ModuleGetNumberOfChannels attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetNumberOfChannels_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetNumberOfChannels command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetNumberOfChannelsStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetNumberOfChannelsStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetRampSpeedCurrent_allowed()
 *    Description : Execution allowed for ModuleGetRampSpeedCurrent attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetRampSpeedCurrent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetRampSpeedCurrent command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetRampSpeedCurrentStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetRampSpeedCurrentStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetRampSpeedVoltage_allowed()
 *    Description : Execution allowed for ModuleGetRampSpeedVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetRampSpeedVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetRampSpeedVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetRampSpeedVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetRampSpeedVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetStatus_allowed()
 *    Description : Execution allowed for ModuleGetStatus attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetStatus_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetStatus command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetStatusStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetStatusStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleGetStatusAsString_allowed()
 *    Description : Execution allowed for ModuleGetStatusAsString attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleGetStatusAsString_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleGetStatusAsString command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleGetStatusAsStringStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleGetStatusAsStringStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleSetDoClear_allowed()
 *    Description : Execution allowed for ModuleSetDoClear attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleSetDoClear_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleSetDoClear command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleSetDoClearStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleSetDoClearStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleSetRampSpeedCurrent_allowed()
 *    Description : Execution allowed for ModuleSetRampSpeedCurrent attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleSetRampSpeedCurrent_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleSetRampSpeedCurrent command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleSetRampSpeedCurrentStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleSetRampSpeedCurrentStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ModuleSetRampSpeedVoltage_allowed()
 *    Description : Execution allowed for ModuleSetRampSpeedVoltage attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ModuleSetRampSpeedVoltage_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ModuleSetRampSpeedVoltage command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ModuleSetRampSpeedVoltageStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ModuleSetRampSpeedVoltageStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SnmpGetDescription_allowed()
 *    Description : Execution allowed for SnmpGetDescription attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SnmpGetDescription_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for SnmpGetDescription command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SnmpGetDescriptionStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SnmpGetDescriptionStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SnmpGetNextOID_allowed()
 *    Description : Execution allowed for SnmpGetNextOID attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SnmpGetNextOID_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for SnmpGetNextOID command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SnmpGetNextOIDStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SnmpGetNextOIDStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SnmpGetValueDouble_allowed()
 *    Description : Execution allowed for SnmpGetValueDouble attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SnmpGetValueDouble_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for SnmpGetValueDouble command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SnmpGetValueDoubleStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SnmpGetValueDoubleStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SnmpGetValueInt_allowed()
 *    Description : Execution allowed for SnmpGetValueInt attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SnmpGetValueInt_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for SnmpGetValueInt command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SnmpGetValueIntStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SnmpGetValueIntStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SnmpGetValueString_allowed()
 *    Description : Execution allowed for SnmpGetValueString attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SnmpGetValueString_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for SnmpGetValueString command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SnmpGetValueStringStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SnmpGetValueStringStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SnmpSetValueDouble_allowed()
 *    Description : Execution allowed for SnmpSetValueDouble attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SnmpSetValueDouble_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for SnmpSetValueDouble command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SnmpSetValueDoubleStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SnmpSetValueDoubleStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SnmpSetValueInt_allowed()
 *    Description : Execution allowed for SnmpSetValueInt attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SnmpSetValueInt_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for SnmpSetValueInt command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SnmpSetValueIntStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SnmpSetValueIntStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SnmpTranslateFromOID_allowed()
 *    Description : Execution allowed for SnmpTranslateFromOID attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SnmpTranslateFromOID_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for SnmpTranslateFromOID command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SnmpTranslateFromOIDStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SnmpTranslateFromOIDStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_SnmpTranslateToOID_allowed()
 *    Description : Execution allowed for SnmpTranslateToOID attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_SnmpTranslateToOID_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for SnmpTranslateToOID command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::SnmpTranslateToOIDStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::SnmpTranslateToOIDStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetMeasurementCurrentVector_allowed()
 *    Description : Execution allowed for ChannelGetMeasurementCurrentVector attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetMeasurementCurrentVector_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetMeasurementCurrentVector command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetMeasurementCurrentVectorStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetMeasurementCurrentVectorStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetMeasurementSenseVoltageVector_allowed()
 *    Description : Execution allowed for ChannelGetMeasurementSenseVoltageVector attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetMeasurementSenseVoltageVector_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetMeasurementSenseVoltageVector command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetMeasurementSenseVoltageVectorStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetMeasurementSenseVoltageVectorStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetMeasurementTerminalVoltageVector_allowed()
 *    Description : Execution allowed for ChannelGetMeasurementTerminalVoltageVector attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetMeasurementTerminalVoltageVector_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetMeasurementTerminalVoltageVector command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetMeasurementTerminalVoltageVectorStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetMeasurementTerminalVoltageVectorStateAllowed
    return true;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::is_ChannelGetMeasurementTimeVector_allowed()
 *    Description : Execution allowed for ChannelGetMeasurementTimeVector attribute
 */
//--------------------------------------------------------
bool WienerMpodLvHvCtrl::is_ChannelGetMeasurementTimeVector_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
    //    Not any excluded states for ChannelGetMeasurementTimeVector command.
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::ChannelGetMeasurementTimeVectorStateAllowed) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::ChannelGetMeasurementTimeVectorStateAllowed
    return true;
}


/*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::WienerMpodLvHvCtrlStateAllowed.AdditionalMethods) ENABLED START -----*/

//    Additional Methods

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::WienerMpodLvHvCtrlStateAllowed.AdditionalMethods

}    //    End of namespace
