/*----- PROTECTED REGION ID(WienerMpodLvHvCtrl.h) ENABLED START -----*/
//=============================================================================
//
// file :        WienerMpodLvHvCtrl.h
//
// description : Include file for the WienerMpodLvHvCtrl class
//
// project :     MPOD Ctrl for iseg HV
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef WienerMpodLvHvCtrl_H
#define WienerMpodLvHvCtrl_H

#include <tango.h>

#include "WienerMpodLvHvSnmp.h"


/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl.h

/**
 *  WienerMpodLvHvCtrl class description:
 *    Device Server controlling the Wiener MPOD and it`s power modules such as 
 *    - Wiener LV power supplies
 *    - iseg HV power supplies
 *    
 *    It contains low level access functions for directly accessing the
 *    SNMP protocol.
 *    These functions are named `snmp...`.
 *    
 *    It also contains high level access functions for controlling:
 *    
 *    - the crate functionality. The functions are named `crate...`.
 *    The `crateGet...` functions don`t take arguments. 
 *    The `crateSet...` functions need the new value as argument.
 *    
 *    - the module functionality. The functions are named `module...`.
 *    The `moduleGet...` functions need the `slot_index` as argument. 
 *    The `moduleSet...` functions need the `slot_index` and the new value as argument.
 *    
 *    - the channel functionality. The functions are named `channel...`.
 *    The `channelGet...` functions need the `slot_index` and the `channel_index` as arguments. 
 *    The `channelSet...` functions need the `slot_index`, the `channel_index` and new value as arguments.
 *    
 *    - the group functionality. The functions are named `group...`.
 *    The `groupGet...` functions requires the `group_index` as argument. 
 *    The `groupSet...` functions need the `group_index` ant the new value as argument.
 *    
 *    Further information can be found on the manufacturer`s web sites 
 *    and in the user manuals for MPOD and the inserted modules.
 */

namespace WienerMpodLvHvCtrl_ns
{
/*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::Additional Class Declarations) ENABLED START -----*/

//    Additional Class Declarations

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::Additional Class Declarations

class WienerMpodLvHvCtrl : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::Data Members) ENABLED START -----*/

//    Add your own data members
    WienerMpodLvHvSnmp m_implementation;
    mpod_snmp_connection_status_type m_previousConnectionStatus;

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::Data Members

//    Device property data members
public:
    //    IpAddr:    IP Address for the MPOD controller.
    string    ipAddr;
    //    SnmpCommunityName:    Used SNMP community. This property can limit the access to SNMP variables.
    //  By default `guru` defines the read-write community.
    //  The community `public` prohibits write operations.
    //  These default settings can be changed.
    string    snmpCommunityName;
    //    SnmpTimeout:    This value is passed to the net-snmp library. For values
    //  <= 0 the library default is used. The value is given in ms.
    //  Appropriate values are 500 ... 2000.
    Tango::DevLong    snmpTimeout;
    //    ThreadPollingIntervalMsFast:    The communication to the MPOD can be run in a thread.
    //  This property defines a time intarval for periodic 
    //  polling of all data in milliseconds. The defined interval
    //  should be 200 ms or greater.
    //  If the value of this property is 0, the thread is not started, 
    //  all commands are directly sent to the MPOD, the device 
    //  server waits for the response from the MPOD.
    //  
    //  The property ThreadPollingIntervalMsFast concerns the 
    //  measured voltages and currents.
    Tango::DevULong    threadPollingIntervalMsFast;
    //    ThreadPollingIntervalMsIntermediate:    Like ThreadPollingIntervalMsFast.
    //  
    //  The property ThreadPollingIntervalMsIntermediate concerns the 
    //  polling for status flags and most other SNMP variables.
    Tango::DevULong    threadPollingIntervalMsIntermediate;
    //    ThreadPollingIntervalMsSlow:    Like ThreadPollingIntervalMsFast.
    //  
    //  The property ThreadPollingIntervalMsSlow concerns the 
    //  polling of SNMP variables that are set by the user.
    //  
    //  These variables are read if ThreadPollingIntervalMsSlow 
    //  has expired or a value has been set. This represents an
    //  important speedup for the communication with the MPOD.
    Tango::DevULong    threadPollingIntervalMsSlow;

//    Attribute data members
public:
    Tango::DevBoolean    *attr_IsMibFileLoaded_read;
    Tango::DevString    *attr_SysDescr_read;
    Tango::DevULong    *attr_SysMainSwitch_read;
    Tango::DevULong    *attr_SysStatus_read;
    Tango::DevString    *attr_SysStatusAsString_read;
    Tango::DevString    *attr_SerialNumber_read;
    Tango::DevULong    *attr_FanSpeed_read;
    Tango::DevULong    *attr_NumberOfModules_read;
    Tango::DevULong    *attr_NumberOfChannels_read;
    Tango::DevULong    *attr_NumberOfGroups_read;

//    Constructors and destructors
public:
    /**
     * Constructs a newly device object.
     *
     *    @param cl    Class.
     *    @param s     Device Name
     */
    WienerMpodLvHvCtrl(Tango::DeviceClass *cl,string &s);
    /**
     * Constructs a newly device object.
     *
     *    @param cl    Class.
     *    @param s     Device Name
     */
    WienerMpodLvHvCtrl(Tango::DeviceClass *cl,const char *s);
    /**
     * Constructs a newly device object.
     *
     *    @param cl    Class.
     *    @param s     Device name
     *    @param d    Device description.
     */
    WienerMpodLvHvCtrl(Tango::DeviceClass *cl,const char *s,const char *d);
    /**
     * The device object destructor.
     */
    ~WienerMpodLvHvCtrl() {delete_device();};


//    Miscellaneous methods
public:
    /*
     *    will be called at device destruction or at init command.
     */
    void delete_device();
    /*
     *    Initialize the device
     */
    virtual void init_device();
    /*
     *    Read the device properties from database
     */
    void get_device_property();
    /*
     *    Always executed method before execution command method.
     */
    virtual void always_executed_hook();


//    Attribute methods
public:
    //--------------------------------------------------------
    /*
     *    Method      : WienerMpodLvHvCtrl::read_attr_hardware()
     *    Description : Hardware acquisition for attributes.
     */
    //--------------------------------------------------------
    virtual void read_attr_hardware(vector<long> &attr_list);
    //--------------------------------------------------------
    /*
     *    Method      : WienerMpodLvHvCtrl::write_attr_hardware()
     *    Description : Hardware writing for attributes.
     */
    //--------------------------------------------------------
    virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *    Attribute IsMibFileLoaded related methods
 *    Description: This value is set when th device server is initialized. It is true if the file WIENER-CRATE-MIB.txt
 *               was found. The functionality of the device server will be restricted without this file.
 *
 *    Data type:    Tango::DevBoolean
 *    Attr type:    Scalar
 */
    virtual void read_IsMibFileLoaded(Tango::Attribute &attr);
    virtual bool is_IsMibFileLoaded_allowed(Tango::AttReqType type);
/**
 *    Attribute SysDescr related methods
 *    Description: The system description. This string also contains the firmware version.
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
    virtual void read_SysDescr(Tango::Attribute &attr);
    virtual bool is_SysDescr_allowed(Tango::AttReqType type);
/**
 *    Attribute SysMainSwitch related methods
 *    Description: The crate`s main switch. Possible values are 0 (off) or 1 (on).
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
    virtual void read_SysMainSwitch(Tango::Attribute &attr);
    virtual void write_SysMainSwitch(Tango::WAttribute &attr);
    virtual bool is_SysMainSwitch_allowed(Tango::AttReqType type);
/**
 *    Attribute SysStatus related methods
 *    Description: The crate`s status. Possible values are: 
 *                       mainOn (0) ,
 *                       mainInhibit (1) ,
 *                       localControlOnly (2) ,
 *                       inputFailure (3) ,
 *                       outputFailure (4) ,
 *                       fantrayFailure (5) ,
 *                       sensorFailure (6),
 *                       vmeSysfail (7),
 *                       plugAndPlayIncompatible (8),
 *                       busReset (9),
 *                       supplyDerating (10),
 *                       supplyFailure (11),
 *                       supplyDerating2 (12),
 *                       supplyFailure2 (13)
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
    virtual void read_SysStatus(Tango::Attribute &attr);
    virtual bool is_SysStatus_allowed(Tango::AttReqType type);
/**
 *    Attribute SysStatusAsString related methods
 *    Description: The crate`s status as string. Only the most important flag of SysStatus is reported.
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
    virtual void read_SysStatusAsString(Tango::Attribute &attr);
    virtual bool is_SysStatusAsString_allowed(Tango::AttReqType type);
/**
 *    Attribute SerialNumber related methods
 *    Description: The crate's serial number.
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
    virtual void read_SerialNumber(Tango::Attribute &attr);
    virtual bool is_SerialNumber_allowed(Tango::AttReqType type);
/**
 *    Attribute FanSpeed related methods
 *    Description: The crate`s fan speed. For most crates the allowed values are 0 or 1200 - 5000.
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
    virtual void read_FanSpeed(Tango::Attribute &attr);
    virtual void write_FanSpeed(Tango::WAttribute &attr);
    virtual bool is_FanSpeed_allowed(Tango::AttReqType type);
/**
 *    Attribute NumberOfModules related methods
 *    Description: The number of modules inserted and recognized. This is only valid when the crate has been switched on.
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
    virtual void read_NumberOfModules(Tango::Attribute &attr);
    virtual bool is_NumberOfModules_allowed(Tango::AttReqType type);
/**
 *    Attribute NumberOfChannels related methods
 *    Description: The number of detected HV and LV channels. Requires that the crate has been switched on.
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
    virtual void read_NumberOfChannels(Tango::Attribute &attr);
    virtual bool is_NumberOfChannels_allowed(Tango::AttReqType type);
/**
 *    Attribute NumberOfGroups related methods
 *    Description: The number of groups defined for HV and LV channels. Requires that thecrate has been switched on.
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
    virtual void read_NumberOfGroups(Tango::Attribute &attr);
    virtual bool is_NumberOfGroups_allowed(Tango::AttReqType type);


    //--------------------------------------------------------
    /**
     *    Method      : WienerMpodLvHvCtrl::add_dynamic_attributes()
     *    Description : Add dynamic attributes if any.
     */
    //--------------------------------------------------------
    void add_dynamic_attributes();




//    Command related methods
public:
    /**
     *    Command ChannelGetConfigMaxCurrent related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_config_max_current(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetConfigMaxCurrent_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetConfigMaxSenseVoltage related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_config_max_sense_voltage(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetConfigMaxSenseVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetConfigMaxTerminalVoltage related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_config_max_terminal_voltage(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetConfigMaxTerminalVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetCurrent related method
     *    Description: Returns the output current for the specified channel. 
     *               It this current is reached, the channel operates in current regulation mode.
     *               The corresponding flag is set in the channel status.
     *               If current trips are enbled for HV modules, the returned current
     *               defines the trip current.
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns Output current or trip current (HV).
     */
    virtual Tango::DevDouble channel_get_current(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetCurrent_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetCurrentFallRate related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_current_fall_rate(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetCurrentFallRate_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetCurrentRiseRate related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_current_rise_rate(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetCurrentRiseRate_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetIndex related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevLong channel_get_index(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetIndex_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetMeasurementCurrent related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_measurement_current(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetMeasurementCurrent_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetMeasurementSenseVoltage related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_measurement_sense_voltage(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetMeasurementSenseVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetMeasurementTemperature related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_measurement_temperature(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetMeasurementTemperature_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetMeasurementTerminalVoltage related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_measurement_terminal_voltage(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetMeasurementTerminalVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetStatus related method
     *    Description: Return the channel status as integer for a given module slot and channel index.
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns ChannelStatus
     */
    virtual Tango::DevLong channel_get_status(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetStatus_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetStatusAsString related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevString channel_get_status_as_string(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetStatusAsString_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetSupervisionBehavior related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevLong channel_get_supervision_behavior(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetSupervisionBehavior_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetSupervisionMaxCurrent related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_supervision_max_current(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetSupervisionMaxCurrent_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetSupervisionMaxPower related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_supervision_max_power(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetSupervisionMaxPower_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetSupervisionMaxTerminalVoltage related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_supervision_max_terminal_voltage(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetSupervisionMaxTerminalVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetSupervisionMinSenseVoltage related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_supervision_min_sense_voltage(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetSupervisionMinSenseVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetSwitch related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevLong channel_get_switch(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetSwitch_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetTripTime related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevLong channel_get_trip_time(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetTripTime_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetUserConfig related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevLong channel_get_user_config(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetUserConfig_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetVoltage related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_voltage(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetVoltageFallRate related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_voltage_fall_rate(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetVoltageFallRate_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetVoltageRiseRate related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevDouble channel_get_voltage_rise_rate(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetVoltageRiseRate_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetCurrent related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_current(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ChannelSetCurrent_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetCurrentFallRate related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_current_fall_rate(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ChannelSetCurrentFallRate_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetCurrentRiseRate related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_current_rise_rate(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ChannelSetCurrentRiseRate_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetSupervisionBehavior related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_supervision_behavior(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelSetSupervisionBehavior_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetSupervisionMaxCurrent related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_supervision_max_current(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ChannelSetSupervisionMaxCurrent_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetSupervisionMaxTerminalVoltage related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_supervision_max_terminal_voltage(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ChannelSetSupervisionMaxTerminalVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetSupervisionMinSenseVoltage related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_supervision_min_sense_voltage(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ChannelSetSupervisionMinSenseVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetSwitch related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_switch(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelSetSwitch_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetTripTime related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_trip_time(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelSetTripTime_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetUserConfig related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_user_config(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelSetUserConfig_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetVoltage related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_voltage(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ChannelSetVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetVoltageFallRate related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_voltage_fall_rate(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ChannelSetVoltageFallRate_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelSetVoltageRiseRate related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex, Value
     *    @returns 
     */
    virtual Tango::DevBoolean channel_set_voltage_rise_rate(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ChannelSetVoltageRiseRate_allowed(const CORBA::Any &any);
    /**
     *    Command CrateGetFanSpeed related method
     *    Description: 
     *
     *    @returns 
     */
    virtual Tango::DevLong crate_get_fan_speed();
    virtual bool is_CrateGetFanSpeed_allowed(const CORBA::Any &any);
    /**
     *    Command CrateGetNumberOfChannels related method
     *    Description: 
     *
     *    @returns 
     */
    virtual Tango::DevLong crate_get_number_of_channels();
    virtual bool is_CrateGetNumberOfChannels_allowed(const CORBA::Any &any);
    /**
     *    Command CrateGetNumberOfGroups related method
     *    Description: 
     *
     *    @returns 
     */
    virtual Tango::DevLong crate_get_number_of_groups();
    virtual bool is_CrateGetNumberOfGroups_allowed(const CORBA::Any &any);
    /**
     *    Command CrateGetNumberOfModules related method
     *    Description: 
     *
     *    @returns 
     */
    virtual Tango::DevLong crate_get_number_of_modules();
    virtual bool is_CrateGetNumberOfModules_allowed(const CORBA::Any &any);
    /**
     *    Command CrateGetOccupiedSlots related method
     *    Description: Returns the slot indices of the slots occupied by a HV or a LV module.
     *
     *    @returns 
     */
    virtual Tango::DevVarULongArray *crate_get_occupied_slots();
    virtual bool is_CrateGetOccupiedSlots_allowed(const CORBA::Any &any);
    /**
     *    Command CrateGetSerialNumber related method
     *    Description: 
     *
     *    @returns 
     */
    virtual Tango::DevString crate_get_serial_number();
    virtual bool is_CrateGetSerialNumber_allowed(const CORBA::Any &any);
    /**
     *    Command CrateGetSysDescr related method
     *    Description: 
     *
     *    @returns 
     */
    virtual Tango::DevString crate_get_sys_descr();
    virtual bool is_CrateGetSysDescr_allowed(const CORBA::Any &any);
    /**
     *    Command CrateGetSysMainSwitch related method
     *    Description: 
     *
     *    @returns 
     */
    virtual Tango::DevLong crate_get_sys_main_switch();
    virtual bool is_CrateGetSysMainSwitch_allowed(const CORBA::Any &any);
    /**
     *    Command CrateGetSysStatus related method
     *    Description: 
     *
     *    @returns 
     */
    virtual Tango::DevLong crate_get_sys_status();
    virtual bool is_CrateGetSysStatus_allowed(const CORBA::Any &any);
    /**
     *    Command CrateGetSysStatusAsString related method
     *    Description: 
     *
     *    @returns 
     */
    virtual Tango::DevString crate_get_sys_status_as_string();
    virtual bool is_CrateGetSysStatusAsString_allowed(const CORBA::Any &any);
    /**
     *    Command CrateSetFanSpeed related method
     *    Description: 
     *
     *    @param argin Value
     *    @returns 
     */
    virtual Tango::DevBoolean crate_set_fan_speed(Tango::DevLong argin);
    virtual bool is_CrateSetFanSpeed_allowed(const CORBA::Any &any);
    /**
     *    Command CrateSetSysHardwareReset related method
     *    Description: 
     *
     *    @param argin Value
     *    @returns 
     */
    virtual Tango::DevBoolean crate_set_sys_hardware_reset(Tango::DevULong argin);
    virtual bool is_CrateSetSysHardwareReset_allowed(const CORBA::Any &any);
    /**
     *    Command CrateSetSysMainSwitch related method
     *    Description: 
     *
     *    @param argin Value
     *    @returns 
     */
    virtual Tango::DevBoolean crate_set_sys_main_switch(Tango::DevULong argin);
    virtual bool is_CrateSetSysMainSwitch_allowed(const CORBA::Any &any);
    /**
     *    Command GroupGetIndex related method
     *    Description: 
     *
     *    @param argin Group index
     *    @returns 
     */
    virtual Tango::DevLong group_get_index(Tango::DevLong argin);
    virtual bool is_GroupGetIndex_allowed(const CORBA::Any &any);
    /**
     *    Command GroupSetSwitch related method
     *    Description: 
     *
     *    @param argin Group index, Value
     *    @returns 
     */
    virtual Tango::DevBoolean group_set_switch(const Tango::DevVarULongArray *argin);
    virtual bool is_GroupSetSwitch_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetAuxiliaryMeasurementVoltage0 related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevDouble module_get_auxiliary_measurement_voltage0(Tango::DevLong argin);
    virtual bool is_ModuleGetAuxiliaryMeasurementVoltage0_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetAuxiliaryMeasurementVoltage1 related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevDouble module_get_auxiliary_measurement_voltage1(Tango::DevLong argin);
    virtual bool is_ModuleGetAuxiliaryMeasurementVoltage1_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetDescription related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevString module_get_description(Tango::DevLong argin);
    virtual bool is_ModuleGetDescription_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetEventChannelStatus related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevLong module_get_event_channel_status(Tango::DevLong argin);
    virtual bool is_ModuleGetEventChannelStatus_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetEventStatus related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevLong module_get_event_status(Tango::DevLong argin);
    virtual bool is_ModuleGetEventStatus_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetEventStatusAsString related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevString module_get_event_status_as_string(Tango::DevLong argin);
    virtual bool is_ModuleGetEventStatusAsString_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetHardwareLimitCurrent related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevDouble module_get_hardware_limit_current(Tango::DevLong argin);
    virtual bool is_ModuleGetHardwareLimitCurrent_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetHardwareLimitVoltage related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevDouble module_get_hardware_limit_voltage(Tango::DevLong argin);
    virtual bool is_ModuleGetHardwareLimitVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetIndex related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevLong module_get_index(Tango::DevLong argin);
    virtual bool is_ModuleGetIndex_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetIsHvModule related method
     *    Description: This command returns true if the module in `slot index` is a HV module.
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevBoolean module_get_is_hv_module(Tango::DevLong argin);
    virtual bool is_ModuleGetIsHvModule_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetMeasurementTemperature0 related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevDouble module_get_measurement_temperature0(Tango::DevLong argin);
    virtual bool is_ModuleGetMeasurementTemperature0_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetMeasurementTemperature1 related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevDouble module_get_measurement_temperature1(Tango::DevLong argin);
    virtual bool is_ModuleGetMeasurementTemperature1_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetMeasurementTemperature2 related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevDouble module_get_measurement_temperature2(Tango::DevLong argin);
    virtual bool is_ModuleGetMeasurementTemperature2_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetMeasurementTemperature3 related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevDouble module_get_measurement_temperature3(Tango::DevLong argin);
    virtual bool is_ModuleGetMeasurementTemperature3_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetNumberOfChannels related method
     *    Description: This command returns the number of channels for the module
     *               in slot `slot index`.
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevLong module_get_number_of_channels(Tango::DevLong argin);
    virtual bool is_ModuleGetNumberOfChannels_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetRampSpeedCurrent related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevDouble module_get_ramp_speed_current(Tango::DevLong argin);
    virtual bool is_ModuleGetRampSpeedCurrent_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetRampSpeedVoltage related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevDouble module_get_ramp_speed_voltage(Tango::DevLong argin);
    virtual bool is_ModuleGetRampSpeedVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetStatus related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevLong module_get_status(Tango::DevLong argin);
    virtual bool is_ModuleGetStatus_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleGetStatusAsString related method
     *    Description: 
     *
     *    @param argin Slot index
     *    @returns 
     */
    virtual Tango::DevString module_get_status_as_string(Tango::DevLong argin);
    virtual bool is_ModuleGetStatusAsString_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleSetDoClear related method
     *    Description: 
     *
     *    @param argin Slot index, Value
     *    @returns 
     */
    virtual Tango::DevBoolean module_set_do_clear(const Tango::DevVarULongArray *argin);
    virtual bool is_ModuleSetDoClear_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleSetRampSpeedCurrent related method
     *    Description: 
     *
     *    @param argin Slot index, Value
     *    @returns 
     */
    virtual Tango::DevBoolean module_set_ramp_speed_current(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ModuleSetRampSpeedCurrent_allowed(const CORBA::Any &any);
    /**
     *    Command ModuleSetRampSpeedVoltage related method
     *    Description: 
     *
     *    @param argin Slot index, Value
     *    @returns 
     */
    virtual Tango::DevBoolean module_set_ramp_speed_voltage(const Tango::DevVarDoubleArray *argin);
    virtual bool is_ModuleSetRampSpeedVoltage_allowed(const CORBA::Any &any);
    /**
     *    Command SnmpGetDescription related method
     *    Description: This function simplifies debugging when working with the low level snmp functions. 
     *               It returns a description for a given OID or the corresponding human readable string.
     *
     *    @param argin OID as string
     *    @returns Description from MIB file.
     */
    virtual Tango::DevString snmp_get_description(Tango::DevString argin);
    virtual bool is_SnmpGetDescription_allowed(const CORBA::Any &any);
    /**
     *    Command SnmpGetNextOID related method
     *    Description: For a given OID variable the next OID is returned.
     *               Rhis allows to iterate over all OIDs exposed by the MPOD controler.
     *               This is mostly a debug function.
     *               It can be used to implement a functionality similar to ``snmpwalk``.
     *
     *    @param argin CurrentOID
     *    @returns NextOID
     */
    virtual Tango::DevString snmp_get_next_oid(Tango::DevString argin);
    virtual bool is_SnmpGetNextOID_allowed(const CORBA::Any &any);
    /**
     *    Command SnmpGetValueDouble related method
     *    Description: Reads the SNMP variable defined by an OID or an equivalent 
     *               human readable string. Returns a double value.
     *
     *    @param argin OID name
     *    @returns Double value
     */
    virtual Tango::DevDouble snmp_get_value_double(Tango::DevString argin);
    virtual bool is_SnmpGetValueDouble_allowed(const CORBA::Any &any);
    /**
     *    Command SnmpGetValueInt related method
     *    Description: Reads the SNMP variable defined by an OID or an equivalent 
     *               human readable string. Returns an unsigned integer value.
     *
     *    @param argin OID name
     *    @returns 
     */
    virtual Tango::DevLong snmp_get_value_int(Tango::DevString argin);
    virtual bool is_SnmpGetValueInt_allowed(const CORBA::Any &any);
    /**
     *    Command SnmpGetValueString related method
     *    Description: Reads the SNMP variable defined by an OID or an equivalent 
     *               human readable string. Returns a string value.
     *
     *    @param argin OID name
     *    @returns String variable value
     */
    virtual Tango::DevString snmp_get_value_string(Tango::DevString argin);
    virtual bool is_SnmpGetValueString_allowed(const CORBA::Any &any);
    /**
     *    Command SnmpSetValueDouble related method
     *    Description: Set a SNMP variable defined by an OID to the double 
     *               value passed as an argument.
     *
     *    @param argin Variable name (string) and value to set (double).
     *    @returns True on success, false otherwise.
     */
    virtual Tango::DevBoolean snmp_set_value_double(const Tango::DevVarDoubleStringArray *argin);
    virtual bool is_SnmpSetValueDouble_allowed(const CORBA::Any &any);
    /**
     *    Command SnmpSetValueInt related method
     *    Description: Set a SNMP variable defined by an OID to the integer 
     *               value passed as an argument.
     *
     *    @param argin Variable name and value to set
     *    @returns True on success, false otherwise.
     */
    virtual Tango::DevBoolean snmp_set_value_int(const Tango::DevVarLongStringArray *argin);
    virtual bool is_SnmpSetValueInt_allowed(const CORBA::Any &any);
    /**
     *    Command SnmpTranslateFromOID related method
     *    Description: For a given OID variable the human readable form of the 
     *               variable is returned such as defined in the file WIENER-CRATE-MIB.txt
     *
     *    @param argin OID as string
     *    @returns Human readable string
     */
    virtual Tango::DevString snmp_translate_from_oid(Tango::DevString argin);
    virtual bool is_SnmpTranslateFromOID_allowed(const CORBA::Any &any);
    /**
     *    Command SnmpTranslateToOID related method
     *    Description: Inverses TranslateFromOID.
     *
     *    @param argin Human readable string
     *    @returns OID as string
     */
    virtual Tango::DevString snmp_translate_to_oid(Tango::DevString argin);
    virtual bool is_SnmpTranslateToOID_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetMeasurementCurrentVector related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevVarDoubleArray *channel_get_measurement_current_vector(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetMeasurementCurrentVector_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetMeasurementSenseVoltageVector related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevVarDoubleArray *channel_get_measurement_sense_voltage_vector(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetMeasurementSenseVoltageVector_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetMeasurementTerminalVoltageVector related method
     *    Description: 
     *
     *    @param argin ModuleSlotIndex, ChannelIndex
     *    @returns 
     */
    virtual Tango::DevVarDoubleArray *channel_get_measurement_terminal_voltage_vector(const Tango::DevVarULongArray *argin);
    virtual bool is_ChannelGetMeasurementTerminalVoltageVector_allowed(const CORBA::Any &any);
    /**
     *    Command ChannelGetMeasurementTimeVector related method
     *    Description: 
     *
     *    @returns 
     */
    virtual Tango::DevVarDoubleArray *channel_get_measurement_time_vector();
    virtual bool is_ChannelGetMeasurementTimeVector_allowed(const CORBA::Any &any);


    //--------------------------------------------------------
    /**
     *    Method      : WienerMpodLvHvCtrl::add_dynamic_commands()
     *    Description : Add dynamic commands if any.
     */
    //--------------------------------------------------------
    void add_dynamic_commands();

/*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::Additional Method prototypes) ENABLED START -----*/

    void setConnectionStatus();
    void setConnectionStatus(mpod_snmp_connection_status_type s);

    Tango::DevString createStringReturnValue(const std::string &res) const;

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::Additional Method prototypes
};

/*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::Additional Classes Definitions) ENABLED START -----*/

//    Additional Classes Definitions

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::Additional Classes Definitions

}    //    End of namespace

#endif   //    WienerMpodLvHvCtrl_H
