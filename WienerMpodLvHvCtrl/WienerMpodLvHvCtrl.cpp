/*----- PROTECTED REGION ID(WienerMpodLvHvCtrl.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        WienerMpodLvHvCtrl.cpp
//
// description : C++ source for the WienerMpodLvHvCtrl class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               WienerMpodLvHvCtrl are implemented in this file.
//
// project :     MPOD Ctrl for iseg HV
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <WienerMpodLvHvCtrl.h>
#include <WienerMpodLvHvCtrlClass.h>

#include <iostream>
// #define DEBUG_READING_OF_ATTRIBUTES

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl.cpp

/**
 *  WienerMpodLvHvCtrl class description:
 *    Device Server controlling the Wiener MPOD and it`s power modules such as 
 *    - Wiener LV power supplies
 *    - iseg HV power supplies
 *    
 *    It contains low level access functions for directly accessing the
 *    SNMP protocol.
 *    These functions are named `snmp...`.
 *    
 *    It also contains high level access functions for controlling:
 *    
 *    - the crate functionality. The functions are named `crate...`.
 *    The `crateGet...` functions don`t take arguments. 
 *    The `crateSet...` functions need the new value as argument.
 *    
 *    - the module functionality. The functions are named `module...`.
 *    The `moduleGet...` functions need the `slot_index` as argument. 
 *    The `moduleSet...` functions need the `slot_index` and the new value as argument.
 *    
 *    - the channel functionality. The functions are named `channel...`.
 *    The `channelGet...` functions need the `slot_index` and the `channel_index` as arguments. 
 *    The `channelSet...` functions need the `slot_index`, the `channel_index` and new value as arguments.
 *    
 *    - the group functionality. The functions are named `group...`.
 *    The `groupGet...` functions requires the `group_index` as argument. 
 *    The `groupSet...` functions need the `group_index` ant the new value as argument.
 *    
 *    Further information can be found on the manufacturer`s web sites 
 *    and in the user manuals for MPOD and the inserted modules.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name                                |  Method name
//================================================================
//  Status                                      |  Inherited (no method)
//  ChannelGetConfigMaxCurrent                  |  channel_get_config_max_current
//  ChannelGetConfigMaxSenseVoltage             |  channel_get_config_max_sense_voltage
//  ChannelGetConfigMaxTerminalVoltage          |  channel_get_config_max_terminal_voltage
//  ChannelGetCurrent                           |  channel_get_current
//  ChannelGetCurrentFallRate                   |  channel_get_current_fall_rate
//  ChannelGetCurrentRiseRate                   |  channel_get_current_rise_rate
//  ChannelGetIndex                             |  channel_get_index
//  ChannelGetMeasurementCurrent                |  channel_get_measurement_current
//  ChannelGetMeasurementSenseVoltage           |  channel_get_measurement_sense_voltage
//  ChannelGetMeasurementTemperature            |  channel_get_measurement_temperature
//  ChannelGetMeasurementTerminalVoltage        |  channel_get_measurement_terminal_voltage
//  ChannelGetStatus                            |  channel_get_status
//  ChannelGetStatusAsString                    |  channel_get_status_as_string
//  ChannelGetSupervisionBehavior               |  channel_get_supervision_behavior
//  ChannelGetSupervisionMaxCurrent             |  channel_get_supervision_max_current
//  ChannelGetSupervisionMaxPower               |  channel_get_supervision_max_power
//  ChannelGetSupervisionMaxTerminalVoltage     |  channel_get_supervision_max_terminal_voltage
//  ChannelGetSupervisionMinSenseVoltage        |  channel_get_supervision_min_sense_voltage
//  ChannelGetSwitch                            |  channel_get_switch
//  ChannelGetTripTime                          |  channel_get_trip_time
//  ChannelGetUserConfig                        |  channel_get_user_config
//  ChannelGetVoltage                           |  channel_get_voltage
//  ChannelGetVoltageFallRate                   |  channel_get_voltage_fall_rate
//  ChannelGetVoltageRiseRate                   |  channel_get_voltage_rise_rate
//  ChannelSetCurrent                           |  channel_set_current
//  ChannelSetCurrentFallRate                   |  channel_set_current_fall_rate
//  ChannelSetCurrentRiseRate                   |  channel_set_current_rise_rate
//  ChannelSetSupervisionBehavior               |  channel_set_supervision_behavior
//  ChannelSetSupervisionMaxCurrent             |  channel_set_supervision_max_current
//  ChannelSetSupervisionMaxTerminalVoltage     |  channel_set_supervision_max_terminal_voltage
//  ChannelSetSupervisionMinSenseVoltage        |  channel_set_supervision_min_sense_voltage
//  ChannelSetSwitch                            |  channel_set_switch
//  ChannelSetTripTime                          |  channel_set_trip_time
//  ChannelSetUserConfig                        |  channel_set_user_config
//  ChannelSetVoltage                           |  channel_set_voltage
//  ChannelSetVoltageFallRate                   |  channel_set_voltage_fall_rate
//  ChannelSetVoltageRiseRate                   |  channel_set_voltage_rise_rate
//  CrateGetFanSpeed                            |  crate_get_fan_speed
//  CrateGetNumberOfChannels                    |  crate_get_number_of_channels
//  CrateGetNumberOfGroups                      |  crate_get_number_of_groups
//  State                                       |  Inherited (no method)
//  CrateGetNumberOfModules                     |  crate_get_number_of_modules
//  CrateGetOccupiedSlots                       |  crate_get_occupied_slots
//  CrateGetSerialNumber                        |  crate_get_serial_number
//  CrateGetSysDescr                            |  crate_get_sys_descr
//  CrateGetSysMainSwitch                       |  crate_get_sys_main_switch
//  CrateGetSysStatus                           |  crate_get_sys_status
//  CrateGetSysStatusAsString                   |  crate_get_sys_status_as_string
//  CrateSetFanSpeed                            |  crate_set_fan_speed
//  CrateSetSysHardwareReset                    |  crate_set_sys_hardware_reset
//  CrateSetSysMainSwitch                       |  crate_set_sys_main_switch
//  GroupGetIndex                               |  group_get_index
//  GroupSetSwitch                              |  group_set_switch
//  ModuleGetAuxiliaryMeasurementVoltage0       |  module_get_auxiliary_measurement_voltage0
//  ModuleGetAuxiliaryMeasurementVoltage1       |  module_get_auxiliary_measurement_voltage1
//  ModuleGetDescription                        |  module_get_description
//  ModuleGetEventChannelStatus                 |  module_get_event_channel_status
//  ModuleGetEventStatus                        |  module_get_event_status
//  ModuleGetEventStatusAsString                |  module_get_event_status_as_string
//  ModuleGetHardwareLimitCurrent               |  module_get_hardware_limit_current
//  ModuleGetHardwareLimitVoltage               |  module_get_hardware_limit_voltage
//  ModuleGetIndex                              |  module_get_index
//  ModuleGetIsHvModule                         |  module_get_is_hv_module
//  ModuleGetMeasurementTemperature0            |  module_get_measurement_temperature0
//  ModuleGetMeasurementTemperature1            |  module_get_measurement_temperature1
//  ModuleGetMeasurementTemperature2            |  module_get_measurement_temperature2
//  ModuleGetMeasurementTemperature3            |  module_get_measurement_temperature3
//  ModuleGetNumberOfChannels                   |  module_get_number_of_channels
//  ModuleGetRampSpeedCurrent                   |  module_get_ramp_speed_current
//  ModuleGetRampSpeedVoltage                   |  module_get_ramp_speed_voltage
//  ModuleGetStatus                             |  module_get_status
//  ModuleGetStatusAsString                     |  module_get_status_as_string
//  ModuleSetDoClear                            |  module_set_do_clear
//  ModuleSetRampSpeedCurrent                   |  module_set_ramp_speed_current
//  ModuleSetRampSpeedVoltage                   |  module_set_ramp_speed_voltage
//  SnmpGetDescription                          |  snmp_get_description
//  SnmpGetNextOID                              |  snmp_get_next_oid
//  SnmpGetValueDouble                          |  snmp_get_value_double
//  SnmpGetValueInt                             |  snmp_get_value_int
//  SnmpGetValueString                          |  snmp_get_value_string
//  SnmpSetValueDouble                          |  snmp_set_value_double
//  SnmpSetValueInt                             |  snmp_set_value_int
//  SnmpTranslateFromOID                        |  snmp_translate_from_oid
//  SnmpTranslateToOID                          |  snmp_translate_to_oid
//  ChannelGetMeasurementCurrentVector          |  channel_get_measurement_current_vector
//  ChannelGetMeasurementSenseVoltageVector     |  channel_get_measurement_sense_voltage_vector
//  ChannelGetMeasurementTerminalVoltageVector  |  channel_get_measurement_terminal_voltage_vector
//  ChannelGetMeasurementTimeVector             |  channel_get_measurement_time_vector
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  IsMibFileLoaded    |  Tango::DevBoolean    Scalar
//  SysDescr           |  Tango::DevString    Scalar
//  SysMainSwitch      |  Tango::DevULong    Scalar
//  SysStatus          |  Tango::DevULong    Scalar
//  SysStatusAsString  |  Tango::DevString    Scalar
//  SerialNumber       |  Tango::DevString    Scalar
//  FanSpeed           |  Tango::DevULong    Scalar
//  NumberOfModules    |  Tango::DevULong    Scalar
//  NumberOfChannels   |  Tango::DevULong    Scalar
//  NumberOfGroups     |  Tango::DevULong    Scalar
//================================================================

namespace WienerMpodLvHvCtrl_ns
{
/*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::namespace_starting) ENABLED START -----*/

//    static initializations

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::namespace_starting

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::WienerMpodLvHvCtrl()
 *    Description : Constructors for a Tango device
 *                implementing the classWienerMpodLvHvCtrl
 */
//--------------------------------------------------------
WienerMpodLvHvCtrl::WienerMpodLvHvCtrl(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::constructor_1) ENABLED START -----*/
    init_device();
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::constructor_1
}
//--------------------------------------------------------
WienerMpodLvHvCtrl::WienerMpodLvHvCtrl(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::constructor_2) ENABLED START -----*/
    init_device();
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::constructor_2
}
//--------------------------------------------------------
WienerMpodLvHvCtrl::WienerMpodLvHvCtrl(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::constructor_3) ENABLED START -----*/
    init_device();
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::constructor_3
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::delete_device()
 *    Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::delete_device()
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::delete_device() " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::delete_device) ENABLED START -----*/
    

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::delete_device
    delete[] attr_IsMibFileLoaded_read;
    delete[] attr_SysDescr_read;
    delete[] attr_SysMainSwitch_read;
    delete[] attr_SysStatus_read;
    delete[] attr_SysStatusAsString_read;
    delete[] attr_SerialNumber_read;
    delete[] attr_FanSpeed_read;
    delete[] attr_NumberOfModules_read;
    delete[] attr_NumberOfChannels_read;
    delete[] attr_NumberOfGroups_read;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::init_device()
 *    Description : will be called at device initialization.
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::init_device()
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::init_device() create device " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::init_device_before) ENABLED START -----*/
    
    //    Initialization before get_device_property() call
    snmpCommunityName = "";
    threadPollingIntervalMsFast = 500;
    threadPollingIntervalMsIntermediate = 1000;
    threadPollingIntervalMsSlow = 2000;
    m_previousConnectionStatus = mpod_snmp_connection_status_undefined;
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::init_device_before
    

    //    Get the device properties from database
    get_device_property();
    
    attr_IsMibFileLoaded_read = new Tango::DevBoolean[1];
    attr_SysDescr_read = new Tango::DevString[1];
    attr_SysMainSwitch_read = new Tango::DevULong[1];
    attr_SysStatus_read = new Tango::DevULong[1];
    attr_SysStatusAsString_read = new Tango::DevString[1];
    attr_SerialNumber_read = new Tango::DevString[1];
    attr_FanSpeed_read = new Tango::DevULong[1];
    attr_NumberOfModules_read = new Tango::DevULong[1];
    attr_NumberOfChannels_read = new Tango::DevULong[1];
    attr_NumberOfGroups_read = new Tango::DevULong[1];
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::init_device) ENABLED START -----*/
    
    //    Initialize device
    m_implementation.snmpSetTimeoutInterval(snmpTimeout);
    m_implementation.crateConnect(ipAddr, snmpCommunityName, threadPollingIntervalMsFast, threadPollingIntervalMsIntermediate, threadPollingIntervalMsSlow);
    *attr_IsMibFileLoaded_read = m_implementation.checkIsMibFileLoaded();

    if (m_implementation.lockAndCheckCrateConnectionIsOk() ) {
        set_status("Connected to MPOD crate over SNMP.");
    }
    else {
        set_status("Unable to open SNMP connection to MPOD crate.");
    }

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::init_device
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::get_device_property()
 *    Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::get_device_property()
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::get_device_property_before) ENABLED START -----*/
    
    //    Initialize property data members
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::get_device_property_before


    //    Read device properties from database.
    Tango::DbData    dev_prop;
    dev_prop.push_back(Tango::DbDatum("IpAddr"));
    dev_prop.push_back(Tango::DbDatum("SnmpCommunityName"));
    dev_prop.push_back(Tango::DbDatum("SnmpTimeout"));
    dev_prop.push_back(Tango::DbDatum("ThreadPollingIntervalMsFast"));
    dev_prop.push_back(Tango::DbDatum("ThreadPollingIntervalMsIntermediate"));
    dev_prop.push_back(Tango::DbDatum("ThreadPollingIntervalMsSlow"));

    //    is there at least one property to be read ?
    if (dev_prop.size()>0)
    {
        //    Call database and extract values
        if (Tango::Util::instance()->_UseDb==true)
            get_db_device()->get_property(dev_prop);
    
        //    get instance on WienerMpodLvHvCtrlClass to get class property
        Tango::DbDatum    def_prop, cl_prop;
        WienerMpodLvHvCtrlClass    *ds_class =
            (static_cast<WienerMpodLvHvCtrlClass *>(get_device_class()));
        int    i = -1;

        //    Try to initialize IpAddr from class property
        cl_prop = ds_class->get_class_property(dev_prop[++i].name);
        if (cl_prop.is_empty()==false)    cl_prop  >>  ipAddr;
        else {
            //    Try to initialize IpAddr from default device value
            def_prop = ds_class->get_default_device_property(dev_prop[i].name);
            if (def_prop.is_empty()==false)    def_prop  >>  ipAddr;
        }
        //    And try to extract IpAddr value from database
        if (dev_prop[i].is_empty()==false)    dev_prop[i]  >>  ipAddr;

        //    Try to initialize SnmpCommunityName from class property
        cl_prop = ds_class->get_class_property(dev_prop[++i].name);
        if (cl_prop.is_empty()==false)    cl_prop  >>  snmpCommunityName;
        else {
            //    Try to initialize SnmpCommunityName from default device value
            def_prop = ds_class->get_default_device_property(dev_prop[i].name);
            if (def_prop.is_empty()==false)    def_prop  >>  snmpCommunityName;
        }
        //    And try to extract SnmpCommunityName value from database
        if (dev_prop[i].is_empty()==false)    dev_prop[i]  >>  snmpCommunityName;

        //    Try to initialize SnmpTimeout from class property
        cl_prop = ds_class->get_class_property(dev_prop[++i].name);
        if (cl_prop.is_empty()==false)    cl_prop  >>  snmpTimeout;
        else {
            //    Try to initialize SnmpTimeout from default device value
            def_prop = ds_class->get_default_device_property(dev_prop[i].name);
            if (def_prop.is_empty()==false)    def_prop  >>  snmpTimeout;
        }
        //    And try to extract SnmpTimeout value from database
        if (dev_prop[i].is_empty()==false)    dev_prop[i]  >>  snmpTimeout;

        //    Try to initialize ThreadPollingIntervalMsFast from class property
        cl_prop = ds_class->get_class_property(dev_prop[++i].name);
        if (cl_prop.is_empty()==false)    cl_prop  >>  threadPollingIntervalMsFast;
        else {
            //    Try to initialize ThreadPollingIntervalMsFast from default device value
            def_prop = ds_class->get_default_device_property(dev_prop[i].name);
            if (def_prop.is_empty()==false)    def_prop  >>  threadPollingIntervalMsFast;
        }
        //    And try to extract ThreadPollingIntervalMsFast value from database
        if (dev_prop[i].is_empty()==false)    dev_prop[i]  >>  threadPollingIntervalMsFast;

        //    Try to initialize ThreadPollingIntervalMsIntermediate from class property
        cl_prop = ds_class->get_class_property(dev_prop[++i].name);
        if (cl_prop.is_empty()==false)    cl_prop  >>  threadPollingIntervalMsIntermediate;
        else {
            //    Try to initialize ThreadPollingIntervalMsIntermediate from default device value
            def_prop = ds_class->get_default_device_property(dev_prop[i].name);
            if (def_prop.is_empty()==false)    def_prop  >>  threadPollingIntervalMsIntermediate;
        }
        //    And try to extract ThreadPollingIntervalMsIntermediate value from database
        if (dev_prop[i].is_empty()==false)    dev_prop[i]  >>  threadPollingIntervalMsIntermediate;

        //    Try to initialize ThreadPollingIntervalMsSlow from class property
        cl_prop = ds_class->get_class_property(dev_prop[++i].name);
        if (cl_prop.is_empty()==false)    cl_prop  >>  threadPollingIntervalMsSlow;
        else {
            //    Try to initialize ThreadPollingIntervalMsSlow from default device value
            def_prop = ds_class->get_default_device_property(dev_prop[i].name);
            if (def_prop.is_empty()==false)    def_prop  >>  threadPollingIntervalMsSlow;
        }
        //    And try to extract ThreadPollingIntervalMsSlow value from database
        if (dev_prop[i].is_empty()==false)    dev_prop[i]  >>  threadPollingIntervalMsSlow;

    }

    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::get_device_property_after) ENABLED START -----*/
    
    //    Check device property data members init
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::get_device_property_after
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::always_executed_hook()
 *    Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::always_executed_hook()
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::always_executed_hook()  " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::always_executed_hook) ENABLED START -----*/
    
    //    code always executed before all requests
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::always_executed_hook
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::read_attr_hardware()
 *    Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_attr_hardware) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_attr_hardware
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::write_attr_hardware()
 *    Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::write_attr_hardware) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::write_attr_hardware
}

//--------------------------------------------------------
/**
 *    Read attribute IsMibFileLoaded related method
 *    Description: This value is set when th device server is initialized. It is true if the file WIENER-CRATE-MIB.txt
 *               was found. The functionality of the device server will be restricted without this file.
 *
 *    Data type:    Tango::DevBoolean
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_IsMibFileLoaded(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_IsMibFileLoaded(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_IsMibFileLoaded) ENABLED START -----*/
    //    Set the attribute value
    attr.set_value(attr_IsMibFileLoaded_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_IsMibFileLoaded
}
//--------------------------------------------------------
/**
 *    Read attribute SysDescr related method
 *    Description: The system description. This string also contains the firmware version.
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_SysDescr(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_SysDescr(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_SysDescr) ENABLED START -----*/
    //    Set the attribute value
    *attr_SysDescr_read = crate_get_sys_descr();
    attr.set_value(attr_SysDescr_read);
#ifdef DEBUG_READING_OF_ATTRIBUTES
    std::cout << "read_SysDescr() returns " << *attr_SysDescr_read << std::endl;
#endif

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_SysDescr
}
//--------------------------------------------------------
/**
 *    Read attribute SysMainSwitch related method
 *    Description: The crate`s main switch. Possible values are 0 (off) or 1 (on).
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_SysMainSwitch(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_SysMainSwitch(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_SysMainSwitch) ENABLED START -----*/
    //    Set the attribute value
    *attr_SysMainSwitch_read = crate_get_sys_main_switch();
    attr.set_value(attr_SysMainSwitch_read);
#ifdef DEBUG_READING_OF_ATTRIBUTES
    std::cout << "read_SysMainSwitch() returns " << *attr_SysMainSwitch_read << std::endl;
#endif

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_SysMainSwitch
}
//--------------------------------------------------------
/**
 *    Write attribute SysMainSwitch related method
 *    Description: The crate`s main switch. Possible values are 0 (off) or 1 (on).
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::write_SysMainSwitch(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::write_SysMainSwitch(Tango::WAttribute &attr) entering... " << endl;
    //    Retrieve write value
    Tango::DevULong    w_val;
    attr.get_write_value(w_val);
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::write_SysMainSwitch) ENABLED START -----*/
    
    crate_set_sys_main_switch(w_val);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::write_SysMainSwitch
}
//--------------------------------------------------------
/**
 *    Read attribute SysStatus related method
 *    Description: The crate`s status. Possible values are: 
 *                       mainOn (0) ,
 *                       mainInhibit (1) ,
 *                       localControlOnly (2) ,
 *                       inputFailure (3) ,
 *                       outputFailure (4) ,
 *                       fantrayFailure (5) ,
 *                       sensorFailure (6),
 *                       vmeSysfail (7),
 *                       plugAndPlayIncompatible (8),
 *                       busReset (9),
 *                       supplyDerating (10),
 *                       supplyFailure (11),
 *                       supplyDerating2 (12),
 *                       supplyFailure2 (13)
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_SysStatus(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_SysStatus(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_SysStatus) ENABLED START -----*/
    //    Set the attribute value
    *attr_SysStatus_read = crate_get_sys_status();
    attr.set_value(attr_SysStatus_read);
#ifdef DEBUG_READING_OF_ATTRIBUTES
    std::cout << "read_SysStatus() returns " << *attr_SysStatus_read << std::endl;
#endif

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_SysStatus
}
//--------------------------------------------------------
/**
 *    Read attribute SysStatusAsString related method
 *    Description: The crate`s status as string. Only the most important flag of SysStatus is reported.
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_SysStatusAsString(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_SysStatusAsString(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_SysStatusAsString) ENABLED START -----*/
    //    Set the attribute value
    *attr_SysStatusAsString_read = crate_get_sys_status_as_string();
    attr.set_value(attr_SysStatusAsString_read);
#ifdef DEBUG_READING_OF_ATTRIBUTES
    std::cout << "read_SysStatusAsString() returns \"" << *attr_SysStatusAsString_read << "\"" << std::endl;
#endif

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_SysStatusAsString
}
//--------------------------------------------------------
/**
 *    Read attribute SerialNumber related method
 *    Description: The crate's serial number.
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_SerialNumber(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_SerialNumber(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_SerialNumber) ENABLED START -----*/
    //    Set the attribute value
    *attr_SerialNumber_read = crate_get_serial_number();
    attr.set_value(attr_SerialNumber_read);
#ifdef DEBUG_READING_OF_ATTRIBUTES
    std::cout << "read_SerialNumber() returns \"" << *attr_SerialNumber_read << "\"" << std::endl;
#endif

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_SerialNumber
}
//--------------------------------------------------------
/**
 *    Read attribute FanSpeed related method
 *    Description: The crate`s fan speed. For most crates the allowed values are 0 or 1200 - 5000.
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_FanSpeed(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_FanSpeed(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_FanSpeed) ENABLED START -----*/
    //    Set the attribute value
    *attr_FanSpeed_read = crate_get_fan_speed();
    attr.set_value(attr_FanSpeed_read);
#ifdef DEBUG_READING_OF_ATTRIBUTES
    std::cout << "read_FanSpeed() returns " << *attr_FanSpeed_read << std::endl;
#endif

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_FanSpeed
}
//--------------------------------------------------------
/**
 *    Write attribute FanSpeed related method
 *    Description: The crate`s fan speed. For most crates the allowed values are 0 or 1200 - 5000.
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::write_FanSpeed(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::write_FanSpeed(Tango::WAttribute &attr) entering... " << endl;
    //    Retrieve write value
    Tango::DevULong    w_val;
    attr.get_write_value(w_val);
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::write_FanSpeed) ENABLED START -----*/
    
    crate_set_fan_speed(w_val);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::write_FanSpeed
}
//--------------------------------------------------------
/**
 *    Read attribute NumberOfModules related method
 *    Description: The number of modules inserted and recognized. This is only valid when the crate has been switched on.
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_NumberOfModules(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_NumberOfModules(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_NumberOfModules) ENABLED START -----*/
    //    Set the attribute value
    *attr_NumberOfModules_read = crate_get_number_of_modules();
    attr.set_value(attr_NumberOfModules_read);
#ifdef DEBUG_READING_OF_ATTRIBUTES
    std::cout << "read_NumberOfModules() returns " << *attr_NumberOfModules_read << std::endl;
#endif

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_NumberOfModules
}
//--------------------------------------------------------
/**
 *    Read attribute NumberOfChannels related method
 *    Description: The number of detected HV and LV channels. Requires that the crate has been switched on.
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_NumberOfChannels(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_NumberOfChannels(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_NumberOfChannels) ENABLED START -----*/
    //    Set the attribute value
    *attr_NumberOfChannels_read = crate_get_number_of_channels();
    attr.set_value(attr_NumberOfChannels_read);
#ifdef DEBUG_READING_OF_ATTRIBUTES
    std::cout << "read_NumberOfChannels() returns " << *attr_NumberOfChannels_read << std::endl;
#endif

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_NumberOfChannels
}
//--------------------------------------------------------
/**
 *    Read attribute NumberOfGroups related method
 *    Description: The number of groups defined for HV and LV channels. Requires that thecrate has been switched on.
 *
 *    Data type:    Tango::DevULong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::read_NumberOfGroups(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodLvHvCtrl::read_NumberOfGroups(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::read_NumberOfGroups) ENABLED START -----*/
    //    Set the attribute value
    *attr_NumberOfGroups_read = crate_get_number_of_groups();
    attr.set_value(attr_NumberOfGroups_read);
#ifdef DEBUG_READING_OF_ATTRIBUTES
    std::cout << "read_NumberOfGroups() returns " << *attr_NumberOfGroups_read << std::endl;
#endif

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::read_NumberOfGroups
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::add_dynamic_attributes()
 *    Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::add_dynamic_attributes()
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::add_dynamic_attributes) ENABLED START -----*/
    
    //    Add your own code to create and add dynamic attributes if any
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *    Command ChannelGetConfigMaxCurrent related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_config_max_current(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetConfigMaxCurrent()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_config_max_current) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetConfigMaxCurrent((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_config_max_current
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetConfigMaxSenseVoltage related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_config_max_sense_voltage(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetConfigMaxSenseVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_config_max_sense_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetConfigMaxSenseVoltage((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_config_max_sense_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetConfigMaxTerminalVoltage related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_config_max_terminal_voltage(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetConfigMaxTerminalVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_config_max_terminal_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetConfigMaxTerminalVoltage((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_config_max_terminal_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetCurrent related method
 *    Description: Returns the output current for the specified channel. 
 *               It this current is reached, the channel operates in current regulation mode.
 *               The corresponding flag is set in the channel status.
 *               If current trips are enbled for HV modules, the returned current
 *               defines the trip current.
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns Output current or trip current (HV).
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_current(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetCurrent()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_current) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetCurrent((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_current
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetCurrentFallRate related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_current_fall_rate(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetCurrentFallRate()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_current_fall_rate) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetCurrentFallRate((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_current_fall_rate
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetCurrentRiseRate related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_current_rise_rate(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetCurrentRiseRate()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_current_rise_rate) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetCurrentRiseRate((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_current_rise_rate
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetIndex related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::channel_get_index(const Tango::DevVarULongArray *argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetIndex()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_index) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetIndex((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getIntError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_index
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetMeasurementCurrent related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_measurement_current(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetMeasurementCurrent()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_measurement_current) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetMeasurementCurrent((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_measurement_current
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetMeasurementSenseVoltage related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_measurement_sense_voltage(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetMeasurementSenseVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_measurement_sense_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetMeasurementSenseVoltage((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_measurement_sense_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetMeasurementTemperature related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_measurement_temperature(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetMeasurementTemperature()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_measurement_temperature) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetMeasurementTemperature((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_measurement_temperature
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetMeasurementTerminalVoltage related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_measurement_terminal_voltage(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetMeasurementTerminalVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_measurement_terminal_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetMeasurementTerminalVoltage((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_measurement_terminal_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetStatus related method
 *    Description: Return the channel status as integer for a given module slot and channel index.
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns ChannelStatus
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::channel_get_status(const Tango::DevVarULongArray *argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetStatus()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_status) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetStatus((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getIntError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_status
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetStatusAsString related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::channel_get_status_as_string(const Tango::DevVarULongArray *argin)
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetStatusAsString()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_status_as_string) ENABLED START -----*/
    
    //    Add your own code
    std::string str_status;
    if (argin->length() == 2) {
        str_status = m_implementation.channelGetStatusAsString((*argin)[0], (*argin)[1]);
    }
    argout = createStringReturnValue(str_status);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_status_as_string
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetSupervisionBehavior related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::channel_get_supervision_behavior(const Tango::DevVarULongArray *argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetSupervisionBehavior()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_supervision_behavior) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetSupervisionBehavior((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getIntError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_supervision_behavior
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetSupervisionMaxCurrent related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_supervision_max_current(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetSupervisionMaxCurrent()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_supervision_max_current) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetSupervisionMaxCurrent((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_supervision_max_current
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetSupervisionMaxPower related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_supervision_max_power(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetSupervisionMaxPower()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_supervision_max_power) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetSupervisionMaxPower((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_supervision_max_power
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetSupervisionMaxTerminalVoltage related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_supervision_max_terminal_voltage(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetSupervisionMaxTerminalVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_supervision_max_terminal_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetSupervisionMaxTerminalVoltage((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_supervision_max_terminal_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetSupervisionMinSenseVoltage related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_supervision_min_sense_voltage(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetSupervisionMinSenseVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_supervision_min_sense_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetSupervisionMinSenseVoltage((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_supervision_min_sense_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetSwitch related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::channel_get_switch(const Tango::DevVarULongArray *argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetSwitch()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_switch) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetSwitch((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getIntError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_switch
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetTripTime related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::channel_get_trip_time(const Tango::DevVarULongArray *argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetTripTime()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_trip_time) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetTripTime((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getIntError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_trip_time
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetUserConfig related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::channel_get_user_config(const Tango::DevVarULongArray *argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetUserConfig()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_user_config) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetUserConfig((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getIntError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_user_config
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetVoltage related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_voltage(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetVoltage((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetVoltageFallRate related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_voltage_fall_rate(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetVoltageFallRate()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_voltage_fall_rate) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetVoltageFallRate((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_voltage_fall_rate
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetVoltageRiseRate related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::channel_get_voltage_rise_rate(const Tango::DevVarULongArray *argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetVoltageRiseRate()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_voltage_rise_rate) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.channelGetVoltageRiseRate((*argin)[0], (*argin)[1]);
    }
    else {
        argout = m_implementation.getDoubleError();
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_voltage_rise_rate
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetCurrent related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_current(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetCurrent()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_current) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetCurrent((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_current
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetCurrentFallRate related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_current_fall_rate(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetCurrentFallRate()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_current_fall_rate) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetCurrentFallRate((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_current_fall_rate
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetCurrentRiseRate related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_current_rise_rate(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetCurrentRiseRate()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_current_rise_rate) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetCurrentRiseRate((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_current_rise_rate
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetSupervisionBehavior related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_supervision_behavior(const Tango::DevVarULongArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetSupervisionBehavior()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_supervision_behavior) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetSupervisionBehavior((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_supervision_behavior
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetSupervisionMaxCurrent related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_supervision_max_current(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetSupervisionMaxCurrent()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_supervision_max_current) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetSupervisionMaxCurrent((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_supervision_max_current
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetSupervisionMaxTerminalVoltage related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_supervision_max_terminal_voltage(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetSupervisionMaxTerminalVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_supervision_max_terminal_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetSupervisionMaxTerminalVoltage((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_supervision_max_terminal_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetSupervisionMinSenseVoltage related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_supervision_min_sense_voltage(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetSupervisionMinSenseVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_supervision_min_sense_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetSupervisionMinSenseVoltage((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_supervision_min_sense_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetSwitch related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_switch(const Tango::DevVarULongArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetSwitch()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_switch) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetSwitch((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_switch
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetTripTime related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_trip_time(const Tango::DevVarULongArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetTripTime()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_trip_time) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetTripTime((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_trip_time
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetUserConfig related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_user_config(const Tango::DevVarULongArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetUserConfig()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_user_config) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetUserConfig((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_user_config
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetVoltage related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_voltage(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetVoltage((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetVoltageFallRate related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_voltage_fall_rate(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetVoltageFallRate()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_voltage_fall_rate) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetVoltageFallRate((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_voltage_fall_rate
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelSetVoltageRiseRate related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::channel_set_voltage_rise_rate(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelSetVoltageRiseRate()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_set_voltage_rise_rate) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 3) {
        argout = m_implementation.channelSetVoltageRiseRate((*argin)[0], (*argin)[1], (*argin)[2]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_set_voltage_rise_rate
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateGetFanSpeed related method
 *    Description: 
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::crate_get_fan_speed()
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateGetFanSpeed()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_get_fan_speed) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.crateGetFanSpeed();
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_get_fan_speed
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateGetNumberOfChannels related method
 *    Description: 
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::crate_get_number_of_channels()
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateGetNumberOfChannels()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_get_number_of_channels) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.crateGetNumberOfChannels();
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_get_number_of_channels
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateGetNumberOfGroups related method
 *    Description: 
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::crate_get_number_of_groups()
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateGetNumberOfGroups()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_get_number_of_groups) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.crateGetNumberOfGroups();
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_get_number_of_groups
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateGetNumberOfModules related method
 *    Description: 
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::crate_get_number_of_modules()
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateGetNumberOfModules()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_get_number_of_modules) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.crateGetNumberOfModules();
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_get_number_of_modules
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateGetOccupiedSlots related method
 *    Description: Returns the slot indices of the slots occupied by a HV or a LV module.
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevVarULongArray *WienerMpodLvHvCtrl::crate_get_occupied_slots()
{
    Tango::DevVarULongArray *argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateGetOccupiedSlots()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_get_occupied_slots) ENABLED START -----*/
    
    //    Add your own code
    std::vector<size_t> occupied_slots = m_implementation.crateGetOccupiedSlots();
    size_t nb_slots;

    argout = new Tango::DevVarULongArray();
    nb_slots = occupied_slots.size();
    argout->length(nb_slots);
    for (unsigned i = 0; i < nb_slots; i++) {
        (*argout)[i] = occupied_slots[i];
    }

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_get_occupied_slots
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateGetSerialNumber related method
 *    Description: 
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::crate_get_serial_number()
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateGetSerialNumber()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_get_serial_number) ENABLED START -----*/
    
    //    Add your own code
    std::string res;
    res = m_implementation.crateGetSerialNumber();
    argout = createStringReturnValue(res);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_get_serial_number
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateGetSysDescr related method
 *    Description: 
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::crate_get_sys_descr()
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateGetSysDescr()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_get_sys_descr) ENABLED START -----*/
    
    //    Add your own code
    std::string res;
    res = m_implementation.crateGetSysDescr();
    argout = createStringReturnValue(res);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_get_sys_descr
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateGetSysMainSwitch related method
 *    Description: 
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::crate_get_sys_main_switch()
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateGetSysMainSwitch()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_get_sys_main_switch) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.crateGetSysMainSwitch();
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_get_sys_main_switch
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateGetSysStatus related method
 *    Description: 
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::crate_get_sys_status()
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateGetSysStatus()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_get_sys_status) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.crateGetSysStatus();
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_get_sys_status
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateGetSysStatusAsString related method
 *    Description: 
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::crate_get_sys_status_as_string()
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateGetSysStatusAsString()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_get_sys_status_as_string) ENABLED START -----*/
    
    //    Add your own code
    std::string str_status;
    str_status = m_implementation.crateGetSysStatusAsString();
    argout = createStringReturnValue(str_status);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_get_sys_status_as_string
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateSetFanSpeed related method
 *    Description: 
 *
 *    @param argin Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::crate_set_fan_speed(Tango::DevLong argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateSetFanSpeed()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_set_fan_speed) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.crateSetFanSpeed(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_set_fan_speed
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateSetSysHardwareReset related method
 *    Description: 
 *
 *    @param argin Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::crate_set_sys_hardware_reset(Tango::DevULong argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateSetSysHardwareReset()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_set_sys_hardware_reset) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.crateSetSysHardwareReset(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_set_sys_hardware_reset
    return argout;
}
//--------------------------------------------------------
/**
 *    Command CrateSetSysMainSwitch related method
 *    Description: 
 *
 *    @param argin Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::crate_set_sys_main_switch(Tango::DevULong argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::CrateSetSysMainSwitch()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::crate_set_sys_main_switch) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.crateSetSysMainSwitch(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::crate_set_sys_main_switch
    return argout;
}
//--------------------------------------------------------
/**
 *    Command GroupGetIndex related method
 *    Description: 
 *
 *    @param argin Group index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::group_get_index(Tango::DevLong argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::GroupGetIndex()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::group_get_index) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.groupGetIndex(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::group_get_index
    return argout;
}
//--------------------------------------------------------
/**
 *    Command GroupSetSwitch related method
 *    Description: 
 *
 *    @param argin Group index, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::group_set_switch(const Tango::DevVarULongArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::GroupSetSwitch()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::group_set_switch) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.groupSetSwitch((*argin)[0], (*argin)[1]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::group_set_switch
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetAuxiliaryMeasurementVoltage0 related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::module_get_auxiliary_measurement_voltage0(Tango::DevLong argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetAuxiliaryMeasurementVoltage0()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_auxiliary_measurement_voltage0) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetAuxiliaryMeasurementVoltage0(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_auxiliary_measurement_voltage0
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetAuxiliaryMeasurementVoltage1 related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::module_get_auxiliary_measurement_voltage1(Tango::DevLong argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetAuxiliaryMeasurementVoltage1()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_auxiliary_measurement_voltage1) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetAuxiliaryMeasurementVoltage1(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_auxiliary_measurement_voltage1
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetDescription related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::module_get_description(Tango::DevLong argin)
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetDescription()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_description) ENABLED START -----*/
    
    //    Add your own code
    std::string res = m_implementation.moduleGetDescription(argin);
    argout = createStringReturnValue(res);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_description
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetEventChannelStatus related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::module_get_event_channel_status(Tango::DevLong argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetEventChannelStatus()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_event_channel_status) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetEventChannelStatus(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_event_channel_status
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetEventStatus related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::module_get_event_status(Tango::DevLong argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetEventStatus()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_event_status) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetEventStatus(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_event_status
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetEventStatusAsString related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::module_get_event_status_as_string(Tango::DevLong argin)
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetEventStatusAsString()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_event_status_as_string) ENABLED START -----*/
    
    //    Add your own code
    std::string str_status;
    str_status = m_implementation.moduleGetEventStatusAsString(argin);
    argout = createStringReturnValue(str_status);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_event_status_as_string
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetHardwareLimitCurrent related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::module_get_hardware_limit_current(Tango::DevLong argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetHardwareLimitCurrent()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_hardware_limit_current) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetHardwareLimitCurrent(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_hardware_limit_current
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetHardwareLimitVoltage related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::module_get_hardware_limit_voltage(Tango::DevLong argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetHardwareLimitVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_hardware_limit_voltage) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetHardwareLimitVoltage(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_hardware_limit_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetIndex related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::module_get_index(Tango::DevLong argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetIndex()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_index) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetIndex(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_index
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetIsHvModule related method
 *    Description: This command returns true if the module in `slot index` is a HV module.
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::module_get_is_hv_module(Tango::DevLong argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetIsHvModule()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_is_hv_module) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.checkSlotContainsHvModule(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_is_hv_module
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetMeasurementTemperature0 related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::module_get_measurement_temperature0(Tango::DevLong argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature0()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_measurement_temperature0) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetMeasurementTemperature0(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_measurement_temperature0
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetMeasurementTemperature1 related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::module_get_measurement_temperature1(Tango::DevLong argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature1()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_measurement_temperature1) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetMeasurementTemperature1(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_measurement_temperature1
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetMeasurementTemperature2 related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::module_get_measurement_temperature2(Tango::DevLong argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature2()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_measurement_temperature2) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetMeasurementTemperature2(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_measurement_temperature2
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetMeasurementTemperature3 related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::module_get_measurement_temperature3(Tango::DevLong argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetMeasurementTemperature3()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_measurement_temperature3) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetMeasurementTemperature3(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_measurement_temperature3
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetNumberOfChannels related method
 *    Description: This command returns the number of channels for the module
 *               in slot `slot index`.
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::module_get_number_of_channels(Tango::DevLong argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetNumberOfChannels()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_number_of_channels) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetNumberOfChannels(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_number_of_channels
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetRampSpeedCurrent related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::module_get_ramp_speed_current(Tango::DevLong argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetRampSpeedCurrent()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_ramp_speed_current) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetRampSpeedCurrent(argin);
    setConnectionStatus();


    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_ramp_speed_current
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetRampSpeedVoltage related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::module_get_ramp_speed_voltage(Tango::DevLong argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetRampSpeedVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_ramp_speed_voltage) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetRampSpeedVoltage(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_ramp_speed_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetStatus related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::module_get_status(Tango::DevLong argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetStatus()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_status) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.moduleGetStatus(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_status
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleGetStatusAsString related method
 *    Description: 
 *
 *    @param argin Slot index
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::module_get_status_as_string(Tango::DevLong argin)
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleGetStatusAsString()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_get_status_as_string) ENABLED START -----*/
    
    //    Add your own code
    std::string str_status = m_implementation.moduleGetStatusAsString(argin);
    argout = createStringReturnValue(str_status);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_get_status_as_string
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleSetDoClear related method
 *    Description: 
 *
 *    @param argin Slot index, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::module_set_do_clear(const Tango::DevVarULongArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleSetDoClear()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_set_do_clear) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.moduleSetDoClear((*argin)[0], (*argin)[1]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_set_do_clear
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleSetRampSpeedCurrent related method
 *    Description: 
 *
 *    @param argin Slot index, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::module_set_ramp_speed_current(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleSetRampSpeedCurrent()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_set_ramp_speed_current) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.moduleSetRampSpeedCurrent((*argin)[0], (*argin)[1]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_set_ramp_speed_current
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ModuleSetRampSpeedVoltage related method
 *    Description: 
 *
 *    @param argin Slot index, Value
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::module_set_ramp_speed_voltage(const Tango::DevVarDoubleArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ModuleSetRampSpeedVoltage()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::module_set_ramp_speed_voltage) ENABLED START -----*/
    
    //    Add your own code
    if (argin->length() == 2) {
        argout = m_implementation.moduleSetRampSpeedVoltage((*argin)[0], (*argin)[1]);
    }
    else {
        argout = false;
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::module_set_ramp_speed_voltage
    return argout;
}
//--------------------------------------------------------
/**
 *    Command SnmpGetDescription related method
 *    Description: This function simplifies debugging when working with the low level snmp functions. 
 *               It returns a description for a given OID or the corresponding human readable string.
 *
 *    @param argin OID as string
 *    @returns Description from MIB file.
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::snmp_get_description(Tango::DevString argin)
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::SnmpGetDescription()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::snmp_get_description) ENABLED START -----*/
    
    //    Add your own code
    std::string res = m_implementation.snmpGetDescription(argin);
    argout = createStringReturnValue(res);

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::snmp_get_description
    return argout;
}
//--------------------------------------------------------
/**
 *    Command SnmpGetNextOID related method
 *    Description: For a given OID variable the next OID is returned.
 *               Rhis allows to iterate over all OIDs exposed by the MPOD controler.
 *               This is mostly a debug function.
 *               It can be used to implement a functionality similar to ``snmpwalk``.
 *
 *    @param argin CurrentOID
 *    @returns NextOID
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::snmp_get_next_oid(Tango::DevString argin)
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::SnmpGetNextOID()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::snmp_get_next_oid) ENABLED START -----*/
    
    //    Add your own code
    std::string res = m_implementation.snmpGetNextOid(argin);
    argout = createStringReturnValue(res);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::snmp_get_next_oid
    return argout;
}
//--------------------------------------------------------
/**
 *    Command SnmpGetValueDouble related method
 *    Description: Reads the SNMP variable defined by an OID or an equivalent 
 *               human readable string. Returns a double value.
 *
 *    @param argin OID name
 *    @returns Double value
 */
//--------------------------------------------------------
Tango::DevDouble WienerMpodLvHvCtrl::snmp_get_value_double(Tango::DevString argin)
{
    Tango::DevDouble argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::SnmpGetValueDouble()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::snmp_get_value_double) ENABLED START -----*/
        
    //    Add your own code
    argout = m_implementation.snmpGetValueDouble(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::snmp_get_value_double
    return argout;
}
//--------------------------------------------------------
/**
 *    Command SnmpGetValueInt related method
 *    Description: Reads the SNMP variable defined by an OID or an equivalent 
 *               human readable string. Returns an unsigned integer value.
 *
 *    @param argin OID name
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevLong WienerMpodLvHvCtrl::snmp_get_value_int(Tango::DevString argin)
{
    Tango::DevLong argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::SnmpGetValueInt()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::snmp_get_value_int) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.snmpGetValueInt(argin);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::snmp_get_value_int
    return argout;
}
//--------------------------------------------------------
/**
 *    Command SnmpGetValueString related method
 *    Description: Reads the SNMP variable defined by an OID or an equivalent 
 *               human readable string. Returns a string value.
 *
 *    @param argin OID name
 *    @returns String variable value
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::snmp_get_value_string(Tango::DevString argin)
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::SnmpGetValueString()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::snmp_get_value_string) ENABLED START -----*/
    
    //    Add your own code
    std::string res;
    res = m_implementation.snmpGetValueString(argin);
    argout = createStringReturnValue(res);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::snmp_get_value_string
    return argout;
}
//--------------------------------------------------------
/**
 *    Command SnmpSetValueDouble related method
 *    Description: Set a SNMP variable defined by an OID to the double 
 *               value passed as an argument.
 *
 *    @param argin Variable name (string) and value to set (double).
 *    @returns True on success, false otherwise.
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::snmp_set_value_double(const Tango::DevVarDoubleStringArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::SnmpSetValueDouble()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::snmp_set_value_double) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.snmpSetValueDouble(argin->svalue[0], argin->dvalue[0]);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::snmp_set_value_double
    return argout;
}
//--------------------------------------------------------
/**
 *    Command SnmpSetValueInt related method
 *    Description: Set a SNMP variable defined by an OID to the integer 
 *               value passed as an argument.
 *
 *    @param argin Variable name and value to set
 *    @returns True on success, false otherwise.
 */
//--------------------------------------------------------
Tango::DevBoolean WienerMpodLvHvCtrl::snmp_set_value_int(const Tango::DevVarLongStringArray *argin)
{
    Tango::DevBoolean argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::SnmpSetValueInt()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::snmp_set_value_int) ENABLED START -----*/
    
    //    Add your own code
    argout = m_implementation.snmpSetValueInt(argin->svalue[0], argin->lvalue[0]);
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::snmp_set_value_int
    return argout;
}
//--------------------------------------------------------
/**
 *    Command SnmpTranslateFromOID related method
 *    Description: For a given OID variable the human readable form of the 
 *               variable is returned such as defined in the file WIENER-CRATE-MIB.txt
 *
 *    @param argin OID as string
 *    @returns Human readable string
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::snmp_translate_from_oid(Tango::DevString argin)
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::SnmpTranslateFromOID()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::snmp_translate_from_oid) ENABLED START -----*/
    
    //    Add your own code
    std::string res = m_implementation.snmpTranslateFromOid(argin);
    argout = createStringReturnValue(res);

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::snmp_translate_from_oid
    return argout;
}
//--------------------------------------------------------
/**
 *    Command SnmpTranslateToOID related method
 *    Description: Inverses TranslateFromOID.
 *
 *    @param argin Human readable string
 *    @returns OID as string
 */
//--------------------------------------------------------
Tango::DevString WienerMpodLvHvCtrl::snmp_translate_to_oid(Tango::DevString argin)
{
    Tango::DevString argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::SnmpTranslateToOID()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::snmp_translate_to_oid) ENABLED START -----*/
    
    //    Add your own code
    std::string res = m_implementation.snmpTranslateToOid(argin);
    argout = createStringReturnValue(res);


    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::snmp_translate_to_oid
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetMeasurementCurrentVector related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevVarDoubleArray *WienerMpodLvHvCtrl::channel_get_measurement_current_vector(const Tango::DevVarULongArray *argin)
{
    Tango::DevVarDoubleArray *argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetMeasurementCurrentVector()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_measurement_current_vector) ENABLED START -----*/

    //    Add your own code
    unsigned vector_size = 0;
    const double *result = 0;
    if (argin->length() == 2) {
        result = m_implementation.channelGetMeasurementCurrentVector((*argin)[0], (*argin)[1], &vector_size);
        if (! result) {
            vector_size = 0;
        }
    }
    argout = new Tango::DevVarDoubleArray();
    argout->length(vector_size);
    for (unsigned i = 0; i < vector_size; i++) {
        (*argout)[i] = result[i];
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_measurement_current_vector
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetMeasurementSenseVoltageVector related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevVarDoubleArray *WienerMpodLvHvCtrl::channel_get_measurement_sense_voltage_vector(const Tango::DevVarULongArray *argin)
{
    Tango::DevVarDoubleArray *argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetMeasurementSenseVoltageVector()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_measurement_sense_voltage_vector) ENABLED START -----*/
    
    //    Add your own code
    unsigned vector_size = 0;
    const double *result = 0;
    if (argin->length() == 2) {
        result = m_implementation.channelGetMeasurementSenseVoltageVector((*argin)[0], (*argin)[1], &vector_size);
        if (! result) {
            vector_size = 0;
        }
    }
    argout = new Tango::DevVarDoubleArray();
    argout->length(vector_size);
    for (unsigned i = 0; i < vector_size; i++) {
        (*argout)[i] = result[i];
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_measurement_sense_voltage_vector
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetMeasurementTerminalVoltageVector related method
 *    Description: 
 *
 *    @param argin ModuleSlotIndex, ChannelIndex
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevVarDoubleArray *WienerMpodLvHvCtrl::channel_get_measurement_terminal_voltage_vector(const Tango::DevVarULongArray *argin)
{
    Tango::DevVarDoubleArray *argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetMeasurementTerminalVoltageVector()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_measurement_terminal_voltage_vector) ENABLED START -----*/
    
    //    Add your own code
    //    Add your own code
    unsigned vector_size = 0;
    const double *result = 0;
    if (argin->length() == 2) {
        result = m_implementation.channelGetMeasurementTerminalVoltageVector((*argin)[0], (*argin)[1], &vector_size);
        if (! result) {
            vector_size = 0;
        }
    }
    argout = new Tango::DevVarDoubleArray();
    argout->length(vector_size);
    for (unsigned i = 0; i < vector_size; i++) {
        (*argout)[i] = result[i];
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_measurement_terminal_voltage_vector
    return argout;
}
//--------------------------------------------------------
/**
 *    Command ChannelGetMeasurementTimeVector related method
 *    Description: 
 *
 *    @returns 
 */
//--------------------------------------------------------
Tango::DevVarDoubleArray *WienerMpodLvHvCtrl::channel_get_measurement_time_vector()
{
    Tango::DevVarDoubleArray *argout;
    DEBUG_STREAM << "WienerMpodLvHvCtrl::ChannelGetMeasurementTimeVector()  - " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::channel_get_measurement_time_vector) ENABLED START -----*/
    
    //    Add your own code
    //    Add your own code
    unsigned vector_size = 0;
    const double *result = 0;
    result = m_implementation.channelGetMeasurementTimeVector(&vector_size);
    if (! result) {
        vector_size = 0;
    }
    argout = new Tango::DevVarDoubleArray();
    argout->length(vector_size);
    for (unsigned i = 0; i < vector_size; i++) {
        (*argout)[i] = result[i];
    }
    setConnectionStatus();

    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::channel_get_measurement_time_vector
    return argout;
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodLvHvCtrl::add_dynamic_commands()
 *    Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void WienerMpodLvHvCtrl::add_dynamic_commands()
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::add_dynamic_commands) ENABLED START -----*/
    
    //    Add your own code to create and add dynamic commands if any
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::add_dynamic_commands
}

/*----- PROTECTED REGION ID(WienerMpodLvHvCtrl::namespace_ending) ENABLED START -----*/

void WienerMpodLvHvCtrl::setConnectionStatus() {
    mpod_snmp_connection_status_type s = m_implementation.lockAndGetCrateConnectionStatus();
    setConnectionStatus(s);
}

void WienerMpodLvHvCtrl::setConnectionStatus(mpod_snmp_connection_status_type s) {
    if ( s != m_previousConnectionStatus ) {
        m_previousConnectionStatus = s;
        switch ( m_previousConnectionStatus ) {
        case mpod_snmp_connection_status_undefined:
        case mpod_snmp_connection_status_error:
        case mpod_snmp_connection_status_timeout:
        case mpod_snmp_connection_status_disconnected:
            set_status(m_implementation.lockAndGetErrorString().c_str());
            set_state(Tango::FAULT);
            break;
        case mpod_snmp_connection_status_connected:
        case mpod_snmp_connection_status_off:
            set_status("");
            set_state(Tango::OFF);
            break;
        case mpod_snmp_connection_status_on:
            set_status("");
            set_state(Tango::ON);
            break;
        }
    }
}

Tango::DevString WienerMpodLvHvCtrl::createStringReturnValue(const std::string &res) const {
    Tango::DevString argout;
    argout = new char[res.size() + 1];
    memcpy(argout, res.c_str(), res.size());
    argout[res.size()] = 0;
    return argout;
}

/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrl::namespace_ending
} //    namespace
