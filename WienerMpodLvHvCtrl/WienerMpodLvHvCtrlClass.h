/*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        WienerMpodLvHvCtrlClass.h
//
// description : Include for the WienerMpodLvHvCtrl root class.
//               This class is the singleton class for
//                the WienerMpodLvHvCtrl device class.
//               It contains all properties and methods which the 
//               WienerMpodLvHvCtrl requires only once e.g. the commands.
//
// project :     MPOD Ctrl for iseg HV
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef WienerMpodLvHvCtrlClass_H
#define WienerMpodLvHvCtrlClass_H

#include <tango.h>
#include <WienerMpodLvHvCtrl.h>


/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass.h


namespace WienerMpodLvHvCtrl_ns
{
/*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::classes for dynamic creation

//=========================================
//    Define classes for attributes
//=========================================
//    Attribute IsMibFileLoaded class definition
class IsMibFileLoadedAttrib: public Tango::Attr
{
public:
    IsMibFileLoadedAttrib():Attr("IsMibFileLoaded",
            Tango::DEV_BOOLEAN, Tango::READ) {};
    ~IsMibFileLoadedAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->read_IsMibFileLoaded(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_IsMibFileLoaded_allowed(ty);}
};

//    Attribute SysDescr class definition
class SysDescrAttrib: public Tango::Attr
{
public:
    SysDescrAttrib():Attr("SysDescr",
            Tango::DEV_STRING, Tango::READ) {};
    ~SysDescrAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->read_SysDescr(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SysDescr_allowed(ty);}
};

//    Attribute SysMainSwitch class definition
class SysMainSwitchAttrib: public Tango::Attr
{
public:
    SysMainSwitchAttrib():Attr("SysMainSwitch",
            Tango::DEV_ULONG, Tango::READ_WRITE) {};
    ~SysMainSwitchAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->read_SysMainSwitch(att);}
    virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->write_SysMainSwitch(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SysMainSwitch_allowed(ty);}
};

//    Attribute SysStatus class definition
class SysStatusAttrib: public Tango::Attr
{
public:
    SysStatusAttrib():Attr("SysStatus",
            Tango::DEV_ULONG, Tango::READ) {};
    ~SysStatusAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->read_SysStatus(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SysStatus_allowed(ty);}
};

//    Attribute SysStatusAsString class definition
class SysStatusAsStringAttrib: public Tango::Attr
{
public:
    SysStatusAsStringAttrib():Attr("SysStatusAsString",
            Tango::DEV_STRING, Tango::READ) {};
    ~SysStatusAsStringAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->read_SysStatusAsString(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SysStatusAsString_allowed(ty);}
};

//    Attribute SerialNumber class definition
class SerialNumberAttrib: public Tango::Attr
{
public:
    SerialNumberAttrib():Attr("SerialNumber",
            Tango::DEV_STRING, Tango::READ) {};
    ~SerialNumberAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->read_SerialNumber(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SerialNumber_allowed(ty);}
};

//    Attribute FanSpeed class definition
class FanSpeedAttrib: public Tango::Attr
{
public:
    FanSpeedAttrib():Attr("FanSpeed",
            Tango::DEV_ULONG, Tango::READ_WRITE) {};
    ~FanSpeedAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->read_FanSpeed(att);}
    virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->write_FanSpeed(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_FanSpeed_allowed(ty);}
};

//    Attribute NumberOfModules class definition
class NumberOfModulesAttrib: public Tango::Attr
{
public:
    NumberOfModulesAttrib():Attr("NumberOfModules",
            Tango::DEV_ULONG, Tango::READ) {};
    ~NumberOfModulesAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->read_NumberOfModules(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_NumberOfModules_allowed(ty);}
};

//    Attribute NumberOfChannels class definition
class NumberOfChannelsAttrib: public Tango::Attr
{
public:
    NumberOfChannelsAttrib():Attr("NumberOfChannels",
            Tango::DEV_ULONG, Tango::READ) {};
    ~NumberOfChannelsAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->read_NumberOfChannels(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_NumberOfChannels_allowed(ty);}
};

//    Attribute NumberOfGroups class definition
class NumberOfGroupsAttrib: public Tango::Attr
{
public:
    NumberOfGroupsAttrib():Attr("NumberOfGroups",
            Tango::DEV_ULONG, Tango::READ) {};
    ~NumberOfGroupsAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodLvHvCtrl *>(dev))->read_NumberOfGroups(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_NumberOfGroups_allowed(ty);}
};


//=========================================
//    Define classes for commands
//=========================================
//    Command ChannelGetConfigMaxCurrent class definition
class ChannelGetConfigMaxCurrentClass : public Tango::Command
{
public:
    ChannelGetConfigMaxCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetConfigMaxCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetConfigMaxCurrentClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetConfigMaxCurrent_allowed(any);}
};

//    Command ChannelGetConfigMaxSenseVoltage class definition
class ChannelGetConfigMaxSenseVoltageClass : public Tango::Command
{
public:
    ChannelGetConfigMaxSenseVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetConfigMaxSenseVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetConfigMaxSenseVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetConfigMaxSenseVoltage_allowed(any);}
};

//    Command ChannelGetConfigMaxTerminalVoltage class definition
class ChannelGetConfigMaxTerminalVoltageClass : public Tango::Command
{
public:
    ChannelGetConfigMaxTerminalVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetConfigMaxTerminalVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetConfigMaxTerminalVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetConfigMaxTerminalVoltage_allowed(any);}
};

//    Command ChannelGetCurrent class definition
class ChannelGetCurrentClass : public Tango::Command
{
public:
    ChannelGetCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetCurrentClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetCurrent_allowed(any);}
};

//    Command ChannelGetCurrentFallRate class definition
class ChannelGetCurrentFallRateClass : public Tango::Command
{
public:
    ChannelGetCurrentFallRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetCurrentFallRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetCurrentFallRateClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetCurrentFallRate_allowed(any);}
};

//    Command ChannelGetCurrentRiseRate class definition
class ChannelGetCurrentRiseRateClass : public Tango::Command
{
public:
    ChannelGetCurrentRiseRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetCurrentRiseRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetCurrentRiseRateClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetCurrentRiseRate_allowed(any);}
};

//    Command ChannelGetIndex class definition
class ChannelGetIndexClass : public Tango::Command
{
public:
    ChannelGetIndexClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetIndexClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetIndexClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetIndex_allowed(any);}
};

//    Command ChannelGetMeasurementCurrent class definition
class ChannelGetMeasurementCurrentClass : public Tango::Command
{
public:
    ChannelGetMeasurementCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetMeasurementCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetMeasurementCurrentClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetMeasurementCurrent_allowed(any);}
};

//    Command ChannelGetMeasurementSenseVoltage class definition
class ChannelGetMeasurementSenseVoltageClass : public Tango::Command
{
public:
    ChannelGetMeasurementSenseVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetMeasurementSenseVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetMeasurementSenseVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetMeasurementSenseVoltage_allowed(any);}
};

//    Command ChannelGetMeasurementTemperature class definition
class ChannelGetMeasurementTemperatureClass : public Tango::Command
{
public:
    ChannelGetMeasurementTemperatureClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetMeasurementTemperatureClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetMeasurementTemperatureClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetMeasurementTemperature_allowed(any);}
};

//    Command ChannelGetMeasurementTerminalVoltage class definition
class ChannelGetMeasurementTerminalVoltageClass : public Tango::Command
{
public:
    ChannelGetMeasurementTerminalVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetMeasurementTerminalVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetMeasurementTerminalVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetMeasurementTerminalVoltage_allowed(any);}
};

//    Command ChannelGetStatus class definition
class ChannelGetStatusClass : public Tango::Command
{
public:
    ChannelGetStatusClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetStatusClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetStatusClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetStatus_allowed(any);}
};

//    Command ChannelGetStatusAsString class definition
class ChannelGetStatusAsStringClass : public Tango::Command
{
public:
    ChannelGetStatusAsStringClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetStatusAsStringClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetStatusAsStringClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetStatusAsString_allowed(any);}
};

//    Command ChannelGetSupervisionBehavior class definition
class ChannelGetSupervisionBehaviorClass : public Tango::Command
{
public:
    ChannelGetSupervisionBehaviorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetSupervisionBehaviorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetSupervisionBehaviorClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetSupervisionBehavior_allowed(any);}
};

//    Command ChannelGetSupervisionMaxCurrent class definition
class ChannelGetSupervisionMaxCurrentClass : public Tango::Command
{
public:
    ChannelGetSupervisionMaxCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetSupervisionMaxCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetSupervisionMaxCurrentClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetSupervisionMaxCurrent_allowed(any);}
};

//    Command ChannelGetSupervisionMaxPower class definition
class ChannelGetSupervisionMaxPowerClass : public Tango::Command
{
public:
    ChannelGetSupervisionMaxPowerClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetSupervisionMaxPowerClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetSupervisionMaxPowerClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetSupervisionMaxPower_allowed(any);}
};

//    Command ChannelGetSupervisionMaxTerminalVoltage class definition
class ChannelGetSupervisionMaxTerminalVoltageClass : public Tango::Command
{
public:
    ChannelGetSupervisionMaxTerminalVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetSupervisionMaxTerminalVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetSupervisionMaxTerminalVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetSupervisionMaxTerminalVoltage_allowed(any);}
};

//    Command ChannelGetSupervisionMinSenseVoltage class definition
class ChannelGetSupervisionMinSenseVoltageClass : public Tango::Command
{
public:
    ChannelGetSupervisionMinSenseVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetSupervisionMinSenseVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetSupervisionMinSenseVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetSupervisionMinSenseVoltage_allowed(any);}
};

//    Command ChannelGetSwitch class definition
class ChannelGetSwitchClass : public Tango::Command
{
public:
    ChannelGetSwitchClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetSwitchClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetSwitchClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetSwitch_allowed(any);}
};

//    Command ChannelGetTripTime class definition
class ChannelGetTripTimeClass : public Tango::Command
{
public:
    ChannelGetTripTimeClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetTripTimeClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetTripTimeClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetTripTime_allowed(any);}
};

//    Command ChannelGetUserConfig class definition
class ChannelGetUserConfigClass : public Tango::Command
{
public:
    ChannelGetUserConfigClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetUserConfigClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetUserConfigClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetUserConfig_allowed(any);}
};

//    Command ChannelGetVoltage class definition
class ChannelGetVoltageClass : public Tango::Command
{
public:
    ChannelGetVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetVoltage_allowed(any);}
};

//    Command ChannelGetVoltageFallRate class definition
class ChannelGetVoltageFallRateClass : public Tango::Command
{
public:
    ChannelGetVoltageFallRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetVoltageFallRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetVoltageFallRateClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetVoltageFallRate_allowed(any);}
};

//    Command ChannelGetVoltageRiseRate class definition
class ChannelGetVoltageRiseRateClass : public Tango::Command
{
public:
    ChannelGetVoltageRiseRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetVoltageRiseRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetVoltageRiseRateClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetVoltageRiseRate_allowed(any);}
};

//    Command ChannelSetCurrent class definition
class ChannelSetCurrentClass : public Tango::Command
{
public:
    ChannelSetCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetCurrentClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetCurrent_allowed(any);}
};

//    Command ChannelSetCurrentFallRate class definition
class ChannelSetCurrentFallRateClass : public Tango::Command
{
public:
    ChannelSetCurrentFallRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetCurrentFallRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetCurrentFallRateClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetCurrentFallRate_allowed(any);}
};

//    Command ChannelSetCurrentRiseRate class definition
class ChannelSetCurrentRiseRateClass : public Tango::Command
{
public:
    ChannelSetCurrentRiseRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetCurrentRiseRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetCurrentRiseRateClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetCurrentRiseRate_allowed(any);}
};

//    Command ChannelSetSupervisionBehavior class definition
class ChannelSetSupervisionBehaviorClass : public Tango::Command
{
public:
    ChannelSetSupervisionBehaviorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetSupervisionBehaviorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetSupervisionBehaviorClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetSupervisionBehavior_allowed(any);}
};

//    Command ChannelSetSupervisionMaxCurrent class definition
class ChannelSetSupervisionMaxCurrentClass : public Tango::Command
{
public:
    ChannelSetSupervisionMaxCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetSupervisionMaxCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetSupervisionMaxCurrentClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetSupervisionMaxCurrent_allowed(any);}
};

//    Command ChannelSetSupervisionMaxTerminalVoltage class definition
class ChannelSetSupervisionMaxTerminalVoltageClass : public Tango::Command
{
public:
    ChannelSetSupervisionMaxTerminalVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetSupervisionMaxTerminalVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetSupervisionMaxTerminalVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetSupervisionMaxTerminalVoltage_allowed(any);}
};

//    Command ChannelSetSupervisionMinSenseVoltage class definition
class ChannelSetSupervisionMinSenseVoltageClass : public Tango::Command
{
public:
    ChannelSetSupervisionMinSenseVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetSupervisionMinSenseVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetSupervisionMinSenseVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetSupervisionMinSenseVoltage_allowed(any);}
};

//    Command ChannelSetSwitch class definition
class ChannelSetSwitchClass : public Tango::Command
{
public:
    ChannelSetSwitchClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetSwitchClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetSwitchClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetSwitch_allowed(any);}
};

//    Command ChannelSetTripTime class definition
class ChannelSetTripTimeClass : public Tango::Command
{
public:
    ChannelSetTripTimeClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetTripTimeClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetTripTimeClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetTripTime_allowed(any);}
};

//    Command ChannelSetUserConfig class definition
class ChannelSetUserConfigClass : public Tango::Command
{
public:
    ChannelSetUserConfigClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetUserConfigClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetUserConfigClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetUserConfig_allowed(any);}
};

//    Command ChannelSetVoltage class definition
class ChannelSetVoltageClass : public Tango::Command
{
public:
    ChannelSetVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetVoltage_allowed(any);}
};

//    Command ChannelSetVoltageFallRate class definition
class ChannelSetVoltageFallRateClass : public Tango::Command
{
public:
    ChannelSetVoltageFallRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetVoltageFallRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetVoltageFallRateClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetVoltageFallRate_allowed(any);}
};

//    Command ChannelSetVoltageRiseRate class definition
class ChannelSetVoltageRiseRateClass : public Tango::Command
{
public:
    ChannelSetVoltageRiseRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelSetVoltageRiseRateClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelSetVoltageRiseRateClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelSetVoltageRiseRate_allowed(any);}
};

//    Command CrateGetFanSpeed class definition
class CrateGetFanSpeedClass : public Tango::Command
{
public:
    CrateGetFanSpeedClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateGetFanSpeedClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateGetFanSpeedClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateGetFanSpeed_allowed(any);}
};

//    Command CrateGetNumberOfChannels class definition
class CrateGetNumberOfChannelsClass : public Tango::Command
{
public:
    CrateGetNumberOfChannelsClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateGetNumberOfChannelsClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateGetNumberOfChannelsClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateGetNumberOfChannels_allowed(any);}
};

//    Command CrateGetNumberOfGroups class definition
class CrateGetNumberOfGroupsClass : public Tango::Command
{
public:
    CrateGetNumberOfGroupsClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateGetNumberOfGroupsClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateGetNumberOfGroupsClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateGetNumberOfGroups_allowed(any);}
};

//    Command CrateGetNumberOfModules class definition
class CrateGetNumberOfModulesClass : public Tango::Command
{
public:
    CrateGetNumberOfModulesClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateGetNumberOfModulesClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateGetNumberOfModulesClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateGetNumberOfModules_allowed(any);}
};

//    Command CrateGetOccupiedSlots class definition
class CrateGetOccupiedSlotsClass : public Tango::Command
{
public:
    CrateGetOccupiedSlotsClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateGetOccupiedSlotsClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateGetOccupiedSlotsClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateGetOccupiedSlots_allowed(any);}
};

//    Command CrateGetSerialNumber class definition
class CrateGetSerialNumberClass : public Tango::Command
{
public:
    CrateGetSerialNumberClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateGetSerialNumberClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateGetSerialNumberClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateGetSerialNumber_allowed(any);}
};

//    Command CrateGetSysDescr class definition
class CrateGetSysDescrClass : public Tango::Command
{
public:
    CrateGetSysDescrClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateGetSysDescrClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateGetSysDescrClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateGetSysDescr_allowed(any);}
};

//    Command CrateGetSysMainSwitch class definition
class CrateGetSysMainSwitchClass : public Tango::Command
{
public:
    CrateGetSysMainSwitchClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateGetSysMainSwitchClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateGetSysMainSwitchClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateGetSysMainSwitch_allowed(any);}
};

//    Command CrateGetSysStatus class definition
class CrateGetSysStatusClass : public Tango::Command
{
public:
    CrateGetSysStatusClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateGetSysStatusClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateGetSysStatusClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateGetSysStatus_allowed(any);}
};

//    Command CrateGetSysStatusAsString class definition
class CrateGetSysStatusAsStringClass : public Tango::Command
{
public:
    CrateGetSysStatusAsStringClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateGetSysStatusAsStringClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateGetSysStatusAsStringClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateGetSysStatusAsString_allowed(any);}
};

//    Command CrateSetFanSpeed class definition
class CrateSetFanSpeedClass : public Tango::Command
{
public:
    CrateSetFanSpeedClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateSetFanSpeedClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateSetFanSpeedClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateSetFanSpeed_allowed(any);}
};

//    Command CrateSetSysHardwareReset class definition
class CrateSetSysHardwareResetClass : public Tango::Command
{
public:
    CrateSetSysHardwareResetClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateSetSysHardwareResetClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateSetSysHardwareResetClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateSetSysHardwareReset_allowed(any);}
};

//    Command CrateSetSysMainSwitch class definition
class CrateSetSysMainSwitchClass : public Tango::Command
{
public:
    CrateSetSysMainSwitchClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    CrateSetSysMainSwitchClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~CrateSetSysMainSwitchClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_CrateSetSysMainSwitch_allowed(any);}
};

//    Command GroupGetIndex class definition
class GroupGetIndexClass : public Tango::Command
{
public:
    GroupGetIndexClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    GroupGetIndexClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~GroupGetIndexClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_GroupGetIndex_allowed(any);}
};

//    Command GroupSetSwitch class definition
class GroupSetSwitchClass : public Tango::Command
{
public:
    GroupSetSwitchClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    GroupSetSwitchClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~GroupSetSwitchClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_GroupSetSwitch_allowed(any);}
};

//    Command ModuleGetAuxiliaryMeasurementVoltage0 class definition
class ModuleGetAuxiliaryMeasurementVoltage0Class : public Tango::Command
{
public:
    ModuleGetAuxiliaryMeasurementVoltage0Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetAuxiliaryMeasurementVoltage0Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetAuxiliaryMeasurementVoltage0Class() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetAuxiliaryMeasurementVoltage0_allowed(any);}
};

//    Command ModuleGetAuxiliaryMeasurementVoltage1 class definition
class ModuleGetAuxiliaryMeasurementVoltage1Class : public Tango::Command
{
public:
    ModuleGetAuxiliaryMeasurementVoltage1Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetAuxiliaryMeasurementVoltage1Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetAuxiliaryMeasurementVoltage1Class() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetAuxiliaryMeasurementVoltage1_allowed(any);}
};

//    Command ModuleGetDescription class definition
class ModuleGetDescriptionClass : public Tango::Command
{
public:
    ModuleGetDescriptionClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetDescriptionClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetDescriptionClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetDescription_allowed(any);}
};

//    Command ModuleGetEventChannelStatus class definition
class ModuleGetEventChannelStatusClass : public Tango::Command
{
public:
    ModuleGetEventChannelStatusClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetEventChannelStatusClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetEventChannelStatusClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetEventChannelStatus_allowed(any);}
};

//    Command ModuleGetEventStatus class definition
class ModuleGetEventStatusClass : public Tango::Command
{
public:
    ModuleGetEventStatusClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetEventStatusClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetEventStatusClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetEventStatus_allowed(any);}
};

//    Command ModuleGetEventStatusAsString class definition
class ModuleGetEventStatusAsStringClass : public Tango::Command
{
public:
    ModuleGetEventStatusAsStringClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetEventStatusAsStringClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetEventStatusAsStringClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetEventStatusAsString_allowed(any);}
};

//    Command ModuleGetHardwareLimitCurrent class definition
class ModuleGetHardwareLimitCurrentClass : public Tango::Command
{
public:
    ModuleGetHardwareLimitCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetHardwareLimitCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetHardwareLimitCurrentClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetHardwareLimitCurrent_allowed(any);}
};

//    Command ModuleGetHardwareLimitVoltage class definition
class ModuleGetHardwareLimitVoltageClass : public Tango::Command
{
public:
    ModuleGetHardwareLimitVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetHardwareLimitVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetHardwareLimitVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetHardwareLimitVoltage_allowed(any);}
};

//    Command ModuleGetIndex class definition
class ModuleGetIndexClass : public Tango::Command
{
public:
    ModuleGetIndexClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetIndexClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetIndexClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetIndex_allowed(any);}
};

//    Command ModuleGetIsHvModule class definition
class ModuleGetIsHvModuleClass : public Tango::Command
{
public:
    ModuleGetIsHvModuleClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetIsHvModuleClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetIsHvModuleClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetIsHvModule_allowed(any);}
};

//    Command ModuleGetMeasurementTemperature0 class definition
class ModuleGetMeasurementTemperature0Class : public Tango::Command
{
public:
    ModuleGetMeasurementTemperature0Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetMeasurementTemperature0Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetMeasurementTemperature0Class() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetMeasurementTemperature0_allowed(any);}
};

//    Command ModuleGetMeasurementTemperature1 class definition
class ModuleGetMeasurementTemperature1Class : public Tango::Command
{
public:
    ModuleGetMeasurementTemperature1Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetMeasurementTemperature1Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetMeasurementTemperature1Class() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetMeasurementTemperature1_allowed(any);}
};

//    Command ModuleGetMeasurementTemperature2 class definition
class ModuleGetMeasurementTemperature2Class : public Tango::Command
{
public:
    ModuleGetMeasurementTemperature2Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetMeasurementTemperature2Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetMeasurementTemperature2Class() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetMeasurementTemperature2_allowed(any);}
};

//    Command ModuleGetMeasurementTemperature3 class definition
class ModuleGetMeasurementTemperature3Class : public Tango::Command
{
public:
    ModuleGetMeasurementTemperature3Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetMeasurementTemperature3Class(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetMeasurementTemperature3Class() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetMeasurementTemperature3_allowed(any);}
};

//    Command ModuleGetNumberOfChannels class definition
class ModuleGetNumberOfChannelsClass : public Tango::Command
{
public:
    ModuleGetNumberOfChannelsClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetNumberOfChannelsClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetNumberOfChannelsClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetNumberOfChannels_allowed(any);}
};

//    Command ModuleGetRampSpeedCurrent class definition
class ModuleGetRampSpeedCurrentClass : public Tango::Command
{
public:
    ModuleGetRampSpeedCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetRampSpeedCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetRampSpeedCurrentClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetRampSpeedCurrent_allowed(any);}
};

//    Command ModuleGetRampSpeedVoltage class definition
class ModuleGetRampSpeedVoltageClass : public Tango::Command
{
public:
    ModuleGetRampSpeedVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetRampSpeedVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetRampSpeedVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetRampSpeedVoltage_allowed(any);}
};

//    Command ModuleGetStatus class definition
class ModuleGetStatusClass : public Tango::Command
{
public:
    ModuleGetStatusClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetStatusClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetStatusClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetStatus_allowed(any);}
};

//    Command ModuleGetStatusAsString class definition
class ModuleGetStatusAsStringClass : public Tango::Command
{
public:
    ModuleGetStatusAsStringClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleGetStatusAsStringClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleGetStatusAsStringClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleGetStatusAsString_allowed(any);}
};

//    Command ModuleSetDoClear class definition
class ModuleSetDoClearClass : public Tango::Command
{
public:
    ModuleSetDoClearClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleSetDoClearClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleSetDoClearClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleSetDoClear_allowed(any);}
};

//    Command ModuleSetRampSpeedCurrent class definition
class ModuleSetRampSpeedCurrentClass : public Tango::Command
{
public:
    ModuleSetRampSpeedCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleSetRampSpeedCurrentClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleSetRampSpeedCurrentClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleSetRampSpeedCurrent_allowed(any);}
};

//    Command ModuleSetRampSpeedVoltage class definition
class ModuleSetRampSpeedVoltageClass : public Tango::Command
{
public:
    ModuleSetRampSpeedVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ModuleSetRampSpeedVoltageClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ModuleSetRampSpeedVoltageClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ModuleSetRampSpeedVoltage_allowed(any);}
};

//    Command SnmpGetDescription class definition
class SnmpGetDescriptionClass : public Tango::Command
{
public:
    SnmpGetDescriptionClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    SnmpGetDescriptionClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~SnmpGetDescriptionClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SnmpGetDescription_allowed(any);}
};

//    Command SnmpGetNextOID class definition
class SnmpGetNextOIDClass : public Tango::Command
{
public:
    SnmpGetNextOIDClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    SnmpGetNextOIDClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~SnmpGetNextOIDClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SnmpGetNextOID_allowed(any);}
};

//    Command SnmpGetValueDouble class definition
class SnmpGetValueDoubleClass : public Tango::Command
{
public:
    SnmpGetValueDoubleClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    SnmpGetValueDoubleClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~SnmpGetValueDoubleClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SnmpGetValueDouble_allowed(any);}
};

//    Command SnmpGetValueInt class definition
class SnmpGetValueIntClass : public Tango::Command
{
public:
    SnmpGetValueIntClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    SnmpGetValueIntClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~SnmpGetValueIntClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SnmpGetValueInt_allowed(any);}
};

//    Command SnmpGetValueString class definition
class SnmpGetValueStringClass : public Tango::Command
{
public:
    SnmpGetValueStringClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    SnmpGetValueStringClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~SnmpGetValueStringClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SnmpGetValueString_allowed(any);}
};

//    Command SnmpSetValueDouble class definition
class SnmpSetValueDoubleClass : public Tango::Command
{
public:
    SnmpSetValueDoubleClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    SnmpSetValueDoubleClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~SnmpSetValueDoubleClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SnmpSetValueDouble_allowed(any);}
};

//    Command SnmpSetValueInt class definition
class SnmpSetValueIntClass : public Tango::Command
{
public:
    SnmpSetValueIntClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    SnmpSetValueIntClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~SnmpSetValueIntClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SnmpSetValueInt_allowed(any);}
};

//    Command SnmpTranslateFromOID class definition
class SnmpTranslateFromOIDClass : public Tango::Command
{
public:
    SnmpTranslateFromOIDClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    SnmpTranslateFromOIDClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~SnmpTranslateFromOIDClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SnmpTranslateFromOID_allowed(any);}
};

//    Command SnmpTranslateToOID class definition
class SnmpTranslateToOIDClass : public Tango::Command
{
public:
    SnmpTranslateToOIDClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    SnmpTranslateToOIDClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~SnmpTranslateToOIDClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_SnmpTranslateToOID_allowed(any);}
};

//    Command ChannelGetMeasurementCurrentVector class definition
class ChannelGetMeasurementCurrentVectorClass : public Tango::Command
{
public:
    ChannelGetMeasurementCurrentVectorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetMeasurementCurrentVectorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetMeasurementCurrentVectorClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetMeasurementCurrentVector_allowed(any);}
};

//    Command ChannelGetMeasurementSenseVoltageVector class definition
class ChannelGetMeasurementSenseVoltageVectorClass : public Tango::Command
{
public:
    ChannelGetMeasurementSenseVoltageVectorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetMeasurementSenseVoltageVectorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetMeasurementSenseVoltageVectorClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetMeasurementSenseVoltageVector_allowed(any);}
};

//    Command ChannelGetMeasurementTerminalVoltageVector class definition
class ChannelGetMeasurementTerminalVoltageVectorClass : public Tango::Command
{
public:
    ChannelGetMeasurementTerminalVoltageVectorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetMeasurementTerminalVoltageVectorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetMeasurementTerminalVoltageVectorClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetMeasurementTerminalVoltageVector_allowed(any);}
};

//    Command ChannelGetMeasurementTimeVector class definition
class ChannelGetMeasurementTimeVectorClass : public Tango::Command
{
public:
    ChannelGetMeasurementTimeVectorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out,
                   const char        *in_desc,
                   const char        *out_desc,
                   Tango::DispLevel  level)
    :Command(name,in,out,in_desc,out_desc, level)    {};

    ChannelGetMeasurementTimeVectorClass(const char   *name,
                   Tango::CmdArgType in,
                   Tango::CmdArgType out)
    :Command(name,in,out)    {};
    ~ChannelGetMeasurementTimeVectorClass() {};
    
    virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
    virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
    {return (static_cast<WienerMpodLvHvCtrl *>(dev))->is_ChannelGetMeasurementTimeVector_allowed(any);}
};


/**
 *    The WienerMpodLvHvCtrlClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  WienerMpodLvHvCtrlClass : public Tango::DeviceClass
#else
class WienerMpodLvHvCtrlClass : public Tango::DeviceClass
#endif
{
    /*----- PROTECTED REGION ID(WienerMpodLvHvCtrlClass::Additionnal DServer data members) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodLvHvCtrlClass::Additionnal DServer data members

    public:
        //    write class properties data members
        Tango::DbData    cl_prop;
        Tango::DbData    cl_def_prop;
        Tango::DbData    dev_def_prop;
    
        //    Method prototypes
        static WienerMpodLvHvCtrlClass *init(const char *);
        static WienerMpodLvHvCtrlClass *instance();
        ~WienerMpodLvHvCtrlClass();
        Tango::DbDatum    get_class_property(string &);
        Tango::DbDatum    get_default_device_property(string &);
        Tango::DbDatum    get_default_class_property(string &);
    
    protected:
        WienerMpodLvHvCtrlClass(string &);
        static WienerMpodLvHvCtrlClass *_instance;
        void command_factory();
        void attribute_factory(vector<Tango::Attr *> &);
        void pipe_factory();
        void write_class_property();
        void set_default_property();
        void get_class_property();
        string get_cvstag();
        string get_cvsroot();
    
    private:
        void device_factory(const Tango::DevVarStringArray *);
        void create_static_attribute_list(vector<Tango::Attr *> &);
        void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
        vector<string>    defaultAttList;
        Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}    //    End of namespace

#endif   //    WienerMpodLvHvCtrl_H
