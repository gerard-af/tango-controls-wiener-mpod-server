/*----- PROTECTED REGION ID(WienerMpodHvModuleClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        WienerMpodHvModuleClass.h
//
// description : Include for the WienerMpodHvModule root class.
//               This class is the singleton class for
//                the WienerMpodHvModule device class.
//               It contains all properties and methods which the 
//               WienerMpodHvModule requires only once e.g. the commands.
//
// project :     Uses WienerMpodLvHvCtrl to control a single HV module
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef WienerMpodHvModuleClass_H
#define WienerMpodHvModuleClass_H

#include <tango.h>
#include <WienerMpodHvModule.h>


/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass.h


namespace WienerMpodHvModule_ns
{
/*----- PROTECTED REGION ID(WienerMpodHvModuleClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::classes for dynamic creation

//=========================================
//    Define classes for attributes
//=========================================
//    Attribute ModuleAuxiliaryMeasurementVoltage0 class definition
class ModuleAuxiliaryMeasurementVoltage0Attrib: public Tango::Attr
{
public:
    ModuleAuxiliaryMeasurementVoltage0Attrib():Attr("ModuleAuxiliaryMeasurementVoltage0",
            Tango::DEV_DOUBLE, Tango::READ) {};
    ~ModuleAuxiliaryMeasurementVoltage0Attrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleAuxiliaryMeasurementVoltage0(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleAuxiliaryMeasurementVoltage0_allowed(ty);}
};

//    Attribute ModuleAuxiliaryMeasurementVoltage1 class definition
class ModuleAuxiliaryMeasurementVoltage1Attrib: public Tango::Attr
{
public:
    ModuleAuxiliaryMeasurementVoltage1Attrib():Attr("ModuleAuxiliaryMeasurementVoltage1",
            Tango::DEV_DOUBLE, Tango::READ) {};
    ~ModuleAuxiliaryMeasurementVoltage1Attrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleAuxiliaryMeasurementVoltage1(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleAuxiliaryMeasurementVoltage1_allowed(ty);}
};

//    Attribute ModuleDescription class definition
class ModuleDescriptionAttrib: public Tango::Attr
{
public:
    ModuleDescriptionAttrib():Attr("ModuleDescription",
            Tango::DEV_STRING, Tango::READ) {};
    ~ModuleDescriptionAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleDescription(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleDescription_allowed(ty);}
};

//    Attribute ModuleEventChannelStatus class definition
class ModuleEventChannelStatusAttrib: public Tango::Attr
{
public:
    ModuleEventChannelStatusAttrib():Attr("ModuleEventChannelStatus",
            Tango::DEV_LONG, Tango::READ) {};
    ~ModuleEventChannelStatusAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleEventChannelStatus(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleEventChannelStatus_allowed(ty);}
};

//    Attribute ModuleEventStatus class definition
class ModuleEventStatusAttrib: public Tango::Attr
{
public:
    ModuleEventStatusAttrib():Attr("ModuleEventStatus",
            Tango::DEV_LONG, Tango::READ) {};
    ~ModuleEventStatusAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleEventStatus(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleEventStatus_allowed(ty);}
};

//    Attribute ModuleEventStatusAsString class definition
class ModuleEventStatusAsStringAttrib: public Tango::Attr
{
public:
    ModuleEventStatusAsStringAttrib():Attr("ModuleEventStatusAsString",
            Tango::DEV_STRING, Tango::READ) {};
    ~ModuleEventStatusAsStringAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleEventStatusAsString(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleEventStatusAsString_allowed(ty);}
};

//    Attribute ModuleHardwareLimitCurrent class definition
class ModuleHardwareLimitCurrentAttrib: public Tango::Attr
{
public:
    ModuleHardwareLimitCurrentAttrib():Attr("ModuleHardwareLimitCurrent",
            Tango::DEV_DOUBLE, Tango::READ) {};
    ~ModuleHardwareLimitCurrentAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleHardwareLimitCurrent(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleHardwareLimitCurrent_allowed(ty);}
};

//    Attribute ModuleHardwareLimitVoltage class definition
class ModuleHardwareLimitVoltageAttrib: public Tango::Attr
{
public:
    ModuleHardwareLimitVoltageAttrib():Attr("ModuleHardwareLimitVoltage",
            Tango::DEV_DOUBLE, Tango::READ) {};
    ~ModuleHardwareLimitVoltageAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleHardwareLimitVoltage(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleHardwareLimitVoltage_allowed(ty);}
};

//    Attribute ModuleIndex class definition
class ModuleIndexAttrib: public Tango::Attr
{
public:
    ModuleIndexAttrib():Attr("ModuleIndex",
            Tango::DEV_LONG, Tango::READ) {};
    ~ModuleIndexAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleIndex(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleIndex_allowed(ty);}
};

//    Attribute ModuleMeasurementTemperature0 class definition
class ModuleMeasurementTemperature0Attrib: public Tango::Attr
{
public:
    ModuleMeasurementTemperature0Attrib():Attr("ModuleMeasurementTemperature0",
            Tango::DEV_DOUBLE, Tango::READ) {};
    ~ModuleMeasurementTemperature0Attrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleMeasurementTemperature0(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleMeasurementTemperature0_allowed(ty);}
};

//    Attribute ModuleNumberOfChannels class definition
class ModuleNumberOfChannelsAttrib: public Tango::Attr
{
public:
    ModuleNumberOfChannelsAttrib():Attr("ModuleNumberOfChannels",
            Tango::DEV_LONG, Tango::READ) {};
    ~ModuleNumberOfChannelsAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleNumberOfChannels(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleNumberOfChannels_allowed(ty);}
};

//    Attribute ModuleRampSpeedCurrent class definition
class ModuleRampSpeedCurrentAttrib: public Tango::Attr
{
public:
    ModuleRampSpeedCurrentAttrib():Attr("ModuleRampSpeedCurrent",
            Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
    ~ModuleRampSpeedCurrentAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleRampSpeedCurrent(att);}
    virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->write_ModuleRampSpeedCurrent(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleRampSpeedCurrent_allowed(ty);}
};

//    Attribute ModuleRampSpeedVoltage class definition
class ModuleRampSpeedVoltageAttrib: public Tango::Attr
{
public:
    ModuleRampSpeedVoltageAttrib():Attr("ModuleRampSpeedVoltage",
            Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
    ~ModuleRampSpeedVoltageAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleRampSpeedVoltage(att);}
    virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->write_ModuleRampSpeedVoltage(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleRampSpeedVoltage_allowed(ty);}
};

//    Attribute ModuleStatus class definition
class ModuleStatusAttrib: public Tango::Attr
{
public:
    ModuleStatusAttrib():Attr("ModuleStatus",
            Tango::DEV_LONG, Tango::READ) {};
    ~ModuleStatusAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleStatus(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleStatus_allowed(ty);}
};

//    Attribute ModuleStatusAsString class definition
class ModuleStatusAsStringAttrib: public Tango::Attr
{
public:
    ModuleStatusAsStringAttrib():Attr("ModuleStatusAsString",
            Tango::DEV_STRING, Tango::READ) {};
    ~ModuleStatusAsStringAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleStatusAsString(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleStatusAsString_allowed(ty);}
};

//    Attribute ModuleDoClear class definition
class ModuleDoClearAttrib: public Tango::Attr
{
public:
    ModuleDoClearAttrib():Attr("ModuleDoClear",
            Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
    ~ModuleDoClearAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ModuleDoClear(att);}
    virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->write_ModuleDoClear(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ModuleDoClear_allowed(ty);}
};


//=========================================
//    Define classes for dynamic attributes
//=========================================
//    Attribute ChannelDynDoubleRead class definition
class ChannelDynDoubleReadAttrib: public Tango::Attr
{
public:
    ChannelDynDoubleReadAttrib(const string &att_name):Attr(att_name.c_str(), 
            Tango::DEV_DOUBLE, Tango::READ) {};
    ~ChannelDynDoubleReadAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ChannelDynDoubleRead(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ChannelDynDoubleRead_allowed(ty);}
};

//    Attribute ChannelDynDoubleReadWrite class definition
class ChannelDynDoubleReadWriteAttrib: public Tango::Attr
{
public:
    ChannelDynDoubleReadWriteAttrib(const string &att_name):Attr(att_name.c_str(), 
            Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
    ~ChannelDynDoubleReadWriteAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ChannelDynDoubleReadWrite(att);}
    virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->write_ChannelDynDoubleReadWrite(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ChannelDynDoubleReadWrite_allowed(ty);}
};

//    Attribute ChannelDynLongRead class definition
class ChannelDynLongReadAttrib: public Tango::Attr
{
public:
    ChannelDynLongReadAttrib(const string &att_name):Attr(att_name.c_str(), 
            Tango::DEV_LONG, Tango::READ) {};
    ~ChannelDynLongReadAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ChannelDynLongRead(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ChannelDynLongRead_allowed(ty);}
};

//    Attribute ChannelDynLongReadWrite class definition
class ChannelDynLongReadWriteAttrib: public Tango::Attr
{
public:
    ChannelDynLongReadWriteAttrib(const string &att_name):Attr(att_name.c_str(), 
            Tango::DEV_LONG, Tango::READ_WRITE) {};
    ~ChannelDynLongReadWriteAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ChannelDynLongReadWrite(att);}
    virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->write_ChannelDynLongReadWrite(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ChannelDynLongReadWrite_allowed(ty);}
};

//    Attribute ChannelDynStringRead class definition
class ChannelDynStringReadAttrib: public Tango::Attr
{
public:
    ChannelDynStringReadAttrib(const string &att_name):Attr(att_name.c_str(), 
            Tango::DEV_STRING, Tango::READ) {};
    ~ChannelDynStringReadAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ChannelDynStringRead(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ChannelDynStringRead_allowed(ty);}
};

//    Attribute ChannelDynBoolReadWrite class definition
class ChannelDynBoolReadWriteAttrib: public Tango::Attr
{
public:
    ChannelDynBoolReadWriteAttrib(const string &att_name):Attr(att_name.c_str(), 
            Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
    ~ChannelDynBoolReadWriteAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ChannelDynBoolReadWrite(att);}
    virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->write_ChannelDynBoolReadWrite(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ChannelDynBoolReadWrite_allowed(ty);}
};

//    Attribute ChannelDynEnumReadWrite class definition
class ChannelDynEnumReadWriteAttrib: public Tango::Attr
{
public:
    ChannelDynEnumReadWriteAttrib(const string &att_name):Attr(att_name.c_str(), 
            Tango::DEV_ENUM, Tango::READ_WRITE) {};
    ~ChannelDynEnumReadWriteAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ChannelDynEnumReadWrite(att);}
    virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->write_ChannelDynEnumReadWrite(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ChannelDynEnumReadWrite_allowed(ty);}
    virtual bool same_type(const type_info &in_type) {return typeid(ChannelDynEnumReadWriteEnum) == in_type;}
    virtual string get_enum_type() {return string("ChannelDynEnumReadWriteEnum");}
};

//    Attribute ChannelDynDoubleVectorRead class definition
class ChannelDynDoubleVectorReadAttrib: public Tango::SpectrumAttr
{
public:
    ChannelDynDoubleVectorReadAttrib(const string &att_name):SpectrumAttr(att_name.c_str(), 
            Tango::DEV_DOUBLE, Tango::READ, 1024) {};
    ~ChannelDynDoubleVectorReadAttrib() {};
    virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
        {(static_cast<WienerMpodHvModule *>(dev))->read_ChannelDynDoubleVectorRead(att);}
    virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
        {return (static_cast<WienerMpodHvModule *>(dev))->is_ChannelDynDoubleVectorRead_allowed(ty);}
};


/**
 *    The WienerMpodHvModuleClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  WienerMpodHvModuleClass : public Tango::DeviceClass
#else
class WienerMpodHvModuleClass : public Tango::DeviceClass
#endif
{
    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::Additionnal DServer data members) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::Additionnal DServer data members

    public:
        //    write class properties data members
        Tango::DbData    cl_prop;
        Tango::DbData    cl_def_prop;
        Tango::DbData    dev_def_prop;
    
        //    Method prototypes
        static WienerMpodHvModuleClass *init(const char *);
        static WienerMpodHvModuleClass *instance();
        ~WienerMpodHvModuleClass();
        Tango::DbDatum    get_class_property(string &);
        Tango::DbDatum    get_default_device_property(string &);
        Tango::DbDatum    get_default_class_property(string &);
    
    protected:
        WienerMpodHvModuleClass(string &);
        static WienerMpodHvModuleClass *_instance;
        void command_factory();
        void attribute_factory(vector<Tango::Attr *> &);
        void pipe_factory();
        void write_class_property();
        void set_default_property();
        void get_class_property();
        string get_cvstag();
        string get_cvsroot();
    
    private:
        void device_factory(const Tango::DevVarStringArray *);
        void create_static_attribute_list(vector<Tango::Attr *> &);
        void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
        vector<string>    defaultAttList;
        Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}    //    End of namespace

#endif   //    WienerMpodHvModule_H
