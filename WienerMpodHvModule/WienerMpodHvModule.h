/*----- PROTECTED REGION ID(WienerMpodHvModule.h) ENABLED START -----*/
//=============================================================================
//
// file :        WienerMpodHvModule.h
//
// description : Include file for the WienerMpodHvModule class
//
// project :     Uses WienerMpodLvHvCtrl to control a single HV module
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef WienerMpodHvModule_H
#define WienerMpodHvModule_H

#include <tango.h>

/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule.h

/**
 *  WienerMpodHvModule class description:
 *    This class allows to run a device server controlling a single
 *    Iseg high voltage module inserted into a Wiener MPOD crate.
 *    
 *    Therefore it needs to connect to a running WienerMpodLvHvCtrl 
 *    device server. This device server is defined by the 
 *    WienerMpodLvHvCtrlDevice property.
 *    
 *    The module is identified by the CrateSlotIndex property.
 *    
 *    The number of channels of the module needs to be given in the 
 *    ModuleNumberOfChannels property. This property will define how many 
 *    dynamic attributes will be created.
 *    
 *    The dynamic attributes allow to control each of the HV channels.
 *    
 *    IMPORTANT: this device class is inappropriate for low voltage modules.
 */

namespace WienerMpodHvModule_ns
{
enum _ChannelDynEnumReadWriteEnum {
    _OFF,
    _ON,
    _CLEAR_EMERGENCY,
    _EMERGENCY,
    _CLEAR_EVENTS,
} ;
typedef _ChannelDynEnumReadWriteEnum ChannelDynEnumReadWriteEnum;

/*----- PROTECTED REGION ID(WienerMpodHvModule::Additional Class Declarations) ENABLED START -----*/

//    Additional Class Declarations

/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::Additional Class Declarations

class WienerMpodHvModule : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(WienerMpodHvModule::Data Members) ENABLED START -----*/

//    Add your own data members
    Tango::DeviceProxy *m_mpodLvHvCtrl;
    std::string m_errorString;
    std::string m_moduleDescription;
    std::string m_moduleEventStatusAsString;
    std::string m_moduleStatusAsString;
    std::vector<std::string> m_dynamicStringAttributBuffers;

/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::Data Members

//    Device property data members
public:
    //    WienerMpodLvHvCtrlDevice:    Device used for communication to the Wiener MPOD.
    //  The commands of this device server are used.
    string    wienerMpodLvHvCtrlDevice;
    //    CrateSlotIndex:    Defines the slot in the MPOD crate where the 
    //  HV module is inserted.
    Tango::DevLong    crateSlotIndex;
    //    ModuleNumberOfChannels:    If this property is > 0, dynamic attributes are 
    //  generated for these channels.
    Tango::DevULong    moduleNumberOfChannels;

    bool    mandatoryNotDefined;

//    Attribute data members
public:
    Tango::DevDouble    *attr_ModuleAuxiliaryMeasurementVoltage0_read;
    Tango::DevDouble    *attr_ModuleAuxiliaryMeasurementVoltage1_read;
    Tango::DevString    *attr_ModuleDescription_read;
    Tango::DevLong    *attr_ModuleEventChannelStatus_read;
    Tango::DevLong    *attr_ModuleEventStatus_read;
    Tango::DevString    *attr_ModuleEventStatusAsString_read;
    Tango::DevDouble    *attr_ModuleHardwareLimitCurrent_read;
    Tango::DevDouble    *attr_ModuleHardwareLimitVoltage_read;
    Tango::DevLong    *attr_ModuleIndex_read;
    Tango::DevDouble    *attr_ModuleMeasurementTemperature0_read;
    Tango::DevLong    *attr_ModuleNumberOfChannels_read;
    Tango::DevDouble    *attr_ModuleRampSpeedCurrent_read;
    Tango::DevDouble    *attr_ModuleRampSpeedVoltage_read;
    Tango::DevLong    *attr_ModuleStatus_read;
    Tango::DevString    *attr_ModuleStatusAsString_read;
    Tango::DevBoolean    *attr_ModuleDoClear_read;

//    Constructors and destructors
public:
    /**
     * Constructs a newly device object.
     *
     *    @param cl    Class.
     *    @param s     Device Name
     */
    WienerMpodHvModule(Tango::DeviceClass *cl,string &s);
    /**
     * Constructs a newly device object.
     *
     *    @param cl    Class.
     *    @param s     Device Name
     */
    WienerMpodHvModule(Tango::DeviceClass *cl,const char *s);
    /**
     * Constructs a newly device object.
     *
     *    @param cl    Class.
     *    @param s     Device name
     *    @param d    Device description.
     */
    WienerMpodHvModule(Tango::DeviceClass *cl,const char *s,const char *d);
    /**
     * The device object destructor.
     */
    ~WienerMpodHvModule() {delete_device();};


//    Miscellaneous methods
public:
    /*
     *    will be called at device destruction or at init command.
     */
    void delete_device();
    /*
     *    Initialize the device
     */
    virtual void init_device();
    /*
     *    Read the device properties from database
     */
    void get_device_property();
    /*
     *    Always executed method before execution command method.
     */
    virtual void always_executed_hook();

    /*
     *    Check if mandatory property has been set
     */
     void check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop);

//    Attribute methods
public:
    //--------------------------------------------------------
    /*
     *    Method      : WienerMpodHvModule::read_attr_hardware()
     *    Description : Hardware acquisition for attributes.
     */
    //--------------------------------------------------------
    virtual void read_attr_hardware(vector<long> &attr_list);
    //--------------------------------------------------------
    /*
     *    Method      : WienerMpodHvModule::write_attr_hardware()
     *    Description : Hardware writing for attributes.
     */
    //--------------------------------------------------------
    virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *    Attribute ModuleAuxiliaryMeasurementVoltage0 related methods
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
    virtual void read_ModuleAuxiliaryMeasurementVoltage0(Tango::Attribute &attr);
    virtual bool is_ModuleAuxiliaryMeasurementVoltage0_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleAuxiliaryMeasurementVoltage1 related methods
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
    virtual void read_ModuleAuxiliaryMeasurementVoltage1(Tango::Attribute &attr);
    virtual bool is_ModuleAuxiliaryMeasurementVoltage1_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleDescription related methods
 *    Description: 
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
    virtual void read_ModuleDescription(Tango::Attribute &attr);
    virtual bool is_ModuleDescription_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleEventChannelStatus related methods
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
    virtual void read_ModuleEventChannelStatus(Tango::Attribute &attr);
    virtual bool is_ModuleEventChannelStatus_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleEventStatus related methods
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
    virtual void read_ModuleEventStatus(Tango::Attribute &attr);
    virtual bool is_ModuleEventStatus_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleEventStatusAsString related methods
 *    Description: 
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
    virtual void read_ModuleEventStatusAsString(Tango::Attribute &attr);
    virtual bool is_ModuleEventStatusAsString_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleHardwareLimitCurrent related methods
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
    virtual void read_ModuleHardwareLimitCurrent(Tango::Attribute &attr);
    virtual bool is_ModuleHardwareLimitCurrent_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleHardwareLimitVoltage related methods
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
    virtual void read_ModuleHardwareLimitVoltage(Tango::Attribute &attr);
    virtual bool is_ModuleHardwareLimitVoltage_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleIndex related methods
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
    virtual void read_ModuleIndex(Tango::Attribute &attr);
    virtual bool is_ModuleIndex_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleMeasurementTemperature0 related methods
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
    virtual void read_ModuleMeasurementTemperature0(Tango::Attribute &attr);
    virtual bool is_ModuleMeasurementTemperature0_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleNumberOfChannels related methods
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
    virtual void read_ModuleNumberOfChannels(Tango::Attribute &attr);
    virtual bool is_ModuleNumberOfChannels_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleRampSpeedCurrent related methods
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
    virtual void read_ModuleRampSpeedCurrent(Tango::Attribute &attr);
    virtual void write_ModuleRampSpeedCurrent(Tango::WAttribute &attr);
    virtual bool is_ModuleRampSpeedCurrent_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleRampSpeedVoltage related methods
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
    virtual void read_ModuleRampSpeedVoltage(Tango::Attribute &attr);
    virtual void write_ModuleRampSpeedVoltage(Tango::WAttribute &attr);
    virtual bool is_ModuleRampSpeedVoltage_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleStatus related methods
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
    virtual void read_ModuleStatus(Tango::Attribute &attr);
    virtual bool is_ModuleStatus_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleStatusAsString related methods
 *    Description: 
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
    virtual void read_ModuleStatusAsString(Tango::Attribute &attr);
    virtual bool is_ModuleStatusAsString_allowed(Tango::AttReqType type);
/**
 *    Attribute ModuleDoClear related methods
 *    Description: 
 *
 *    Data type:    Tango::DevBoolean
 *    Attr type:    Scalar
 */
    virtual void read_ModuleDoClear(Tango::Attribute &attr);
    virtual void write_ModuleDoClear(Tango::WAttribute &attr);
    virtual bool is_ModuleDoClear_allowed(Tango::AttReqType type);

//    Dynamic attribute methods
public:

    /**
     *    Attribute ChannelDynDoubleRead related methods
     *    Description: 
     *
     *    Data type:    Tango::DevDouble
     *    Attr type:    Scalar
     */
    virtual void read_ChannelDynDoubleRead(Tango::Attribute &attr);
    virtual bool is_ChannelDynDoubleRead_allowed(Tango::AttReqType type);
    void add_ChannelDynDoubleRead_dynamic_attribute(string attname);
    void remove_ChannelDynDoubleRead_dynamic_attribute(string attname);
    Tango::DevDouble *get_ChannelDynDoubleRead_data_ptr(string &name);
    map<string,Tango::DevDouble>       ChannelDynDoubleRead_data;

    /**
     *    Attribute ChannelDynDoubleReadWrite related methods
     *    Description: 
     *
     *    Data type:    Tango::DevDouble
     *    Attr type:    Scalar
     */
    virtual void read_ChannelDynDoubleReadWrite(Tango::Attribute &attr);
    virtual void write_ChannelDynDoubleReadWrite(Tango::WAttribute &attr);
    virtual bool is_ChannelDynDoubleReadWrite_allowed(Tango::AttReqType type);
    void add_ChannelDynDoubleReadWrite_dynamic_attribute(string attname);
    void remove_ChannelDynDoubleReadWrite_dynamic_attribute(string attname);
    Tango::DevDouble *get_ChannelDynDoubleReadWrite_data_ptr(string &name);
    map<string,Tango::DevDouble>       ChannelDynDoubleReadWrite_data;

    /**
     *    Attribute ChannelDynLongRead related methods
     *    Description: 
     *
     *    Data type:    Tango::DevLong
     *    Attr type:    Scalar
     */
    virtual void read_ChannelDynLongRead(Tango::Attribute &attr);
    virtual bool is_ChannelDynLongRead_allowed(Tango::AttReqType type);
    void add_ChannelDynLongRead_dynamic_attribute(string attname);
    void remove_ChannelDynLongRead_dynamic_attribute(string attname);
    Tango::DevLong *get_ChannelDynLongRead_data_ptr(string &name);
    map<string,Tango::DevLong>       ChannelDynLongRead_data;

    /**
     *    Attribute ChannelDynLongReadWrite related methods
     *    Description: 
     *
     *    Data type:    Tango::DevLong
     *    Attr type:    Scalar
     */
    virtual void read_ChannelDynLongReadWrite(Tango::Attribute &attr);
    virtual void write_ChannelDynLongReadWrite(Tango::WAttribute &attr);
    virtual bool is_ChannelDynLongReadWrite_allowed(Tango::AttReqType type);
    void add_ChannelDynLongReadWrite_dynamic_attribute(string attname);
    void remove_ChannelDynLongReadWrite_dynamic_attribute(string attname);
    Tango::DevLong *get_ChannelDynLongReadWrite_data_ptr(string &name);
    map<string,Tango::DevLong>       ChannelDynLongReadWrite_data;

    /**
     *    Attribute ChannelDynStringRead related methods
     *    Description: 
     *
     *    Data type:    Tango::DevString
     *    Attr type:    Scalar
     */
    virtual void read_ChannelDynStringRead(Tango::Attribute &attr);
    virtual bool is_ChannelDynStringRead_allowed(Tango::AttReqType type);
    void add_ChannelDynStringRead_dynamic_attribute(string attname);
    void remove_ChannelDynStringRead_dynamic_attribute(string attname);
    Tango::DevString *get_ChannelDynStringRead_data_ptr(string &name);
    map<string,Tango::DevString>       ChannelDynStringRead_data;

    /**
     *    Attribute ChannelDynBoolReadWrite related methods
     *    Description: 
     *
     *    Data type:    Tango::DevBoolean
     *    Attr type:    Scalar
     */
    virtual void read_ChannelDynBoolReadWrite(Tango::Attribute &attr);
    virtual void write_ChannelDynBoolReadWrite(Tango::WAttribute &attr);
    virtual bool is_ChannelDynBoolReadWrite_allowed(Tango::AttReqType type);
    void add_ChannelDynBoolReadWrite_dynamic_attribute(string attname);
    void remove_ChannelDynBoolReadWrite_dynamic_attribute(string attname);
    Tango::DevBoolean *get_ChannelDynBoolReadWrite_data_ptr(string &name);
    map<string,Tango::DevBoolean>       ChannelDynBoolReadWrite_data;

    /**
     *    Attribute ChannelDynEnumReadWrite related methods
     *    Description: 
     *
     *    Data type:    Tango::DevEnum
     *    Attr type:    Scalar
     */
    virtual void read_ChannelDynEnumReadWrite(Tango::Attribute &attr);
    virtual void write_ChannelDynEnumReadWrite(Tango::WAttribute &attr);
    virtual bool is_ChannelDynEnumReadWrite_allowed(Tango::AttReqType type);
    void add_ChannelDynEnumReadWrite_dynamic_attribute(string attname);
    void remove_ChannelDynEnumReadWrite_dynamic_attribute(string attname);
    Tango::DevEnum *get_ChannelDynEnumReadWrite_data_ptr(string &name);
    map<string,Tango::DevEnum>       ChannelDynEnumReadWrite_data;

    /**
     *    Attribute ChannelDynDoubleVectorRead related methods
     *    Description: 
     *
     *    Data type:    Tango::DevDouble
     *    Attr type:    Spectrum max = 1024
     */
    virtual void read_ChannelDynDoubleVectorRead(Tango::Attribute &attr);
    virtual bool is_ChannelDynDoubleVectorRead_allowed(Tango::AttReqType type);
    void add_ChannelDynDoubleVectorRead_dynamic_attribute(string attname, Tango::DevDouble *ptr=NULL);
    void remove_ChannelDynDoubleVectorRead_dynamic_attribute(string attname, bool free_it=true);
    Tango::DevDouble *get_ChannelDynDoubleVectorRead_data_ptr(string &name);
    map<string,Tango::DevDouble *>       ChannelDynDoubleVectorRead_data;

    //--------------------------------------------------------
    /**
     *    Method      : WienerMpodHvModule::add_dynamic_attributes()
     *    Description : Add dynamic attributes if any.
     */
    //--------------------------------------------------------
    void add_dynamic_attributes();




//    Command related methods
public:


    //--------------------------------------------------------
    /**
     *    Method      : WienerMpodHvModule::add_dynamic_commands()
     *    Description : Add dynamic commands if any.
     */
    //--------------------------------------------------------
    void add_dynamic_commands();

/*----- PROTECTED REGION ID(WienerMpodHvModule::Additional Method prototypes) ENABLED START -----*/

//    Additional Method prototypes
    void readChannelDynDouble(Tango::Attribute &attr, size_t channel_index, std::string &command);
    void writeChannelDynDouble(Tango::WAttribute &attr, size_t channel_index, std::string &command);
    void readChannelDynLong(Tango::Attribute &attr, size_t channel_index, std::string &command);
    void writeChannelDynLong(Tango::WAttribute &attr, size_t channel_index, std::string &command);
    void readChannelDynString(Tango::Attribute &attr, size_t channel_index, std::string &command);
    void readChannelDynBoolEnum(Tango::Attribute &attr, size_t channel_index, std::string &command, size_t enum_value);
    void writeChannelDynBoolEnum(Tango::WAttribute &attr, size_t channel_index, std::string &command, size_t enum_value);
    void readChannelSwitchDynEnum(Tango::Attribute &attr, size_t channel_index);
    void writeChannelSwitchDynEnum(Tango::WAttribute &attr, size_t channel_index);
    void readChannelTripActionDynEnum(Tango::Attribute &attr, size_t channel_index);
    void writeChannelTripActionDynEnum(Tango::WAttribute &attr, size_t channel_index);
    void readChannelInhibitActionDynEnum(Tango::Attribute &attr, size_t channel_index);
    void writeChannelInhibitActionDynEnum(Tango::WAttribute &attr, size_t channel_index);
    void readDynDoubleVector(Tango::Attribute &attr, std::string &command);
    void readChannelDynDoubleVector(Tango::Attribute &attr, size_t channel_index, std::string &command);

private:

    void addDynamicChannelSwitchAttribute(size_t channel_index, const std::string &attr_name);
    void addDynamicChannelInhibitActionAttribute(size_t channel_index, const std::string &attr_name);
    void addDynamicChannelTripActionAttribute(size_t channel_index, const std::string &attr_name);
    void addDynamicChannelAttributes(size_t channel_index, const std::string &ext);
    void addDynamicChannelAttributeDouble(size_t channel_index, const std::string &attr_name, const std::string &read_command, const std::string &write_command, const string &output_format = "", const string units = "");
    void addDynamicChannelAttributeLong(size_t channel_index, const std::string &attr_name, const std::string &read_command, const std::string &write_command, const string &output_format = "", const string units = "");
    void addDynamicChannelAttributeString(size_t channel_index, const std::string &attr_name, const std::string &read_command, const std::string &write_command, const string &output_format = "", const string units = "");
    void addDynamicChannelAttributeBoolEnum(size_t channel_index, const std::string &attr_name, const std::string &read_command, const std::string &write_command, size_t enum_value);
    void defineAttributeProperties(Tango::Attr *a, const std::string &output_format, const std::string units);
    void addDynamicAttributesDoubleVector(const std::string &attr_name, const std::string &read_command, const std::string &output_format, const std::string units);
    void addDynamicChannelAttributesDoubleVector(size_t channel_index, const std::string &attr_name, const std::string &read_command, const std::string &output_format, const std::string units);


/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::Additional Method prototypes
};

/*----- PROTECTED REGION ID(WienerMpodHvModule::Additional Classes Definitions) ENABLED START -----*/

//    Additional Classes Definitions

/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::Additional Classes Definitions

}    //    End of namespace

#endif   //    WienerMpodHvModule_H
