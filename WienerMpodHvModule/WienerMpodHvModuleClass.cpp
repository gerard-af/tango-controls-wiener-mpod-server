/*----- PROTECTED REGION ID(WienerMpodHvModuleClass.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        WienerMpodHvModuleClass.cpp
//
// description : C++ source for the WienerMpodHvModuleClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the WienerMpodHvModule once per process.
//
// project :     Uses WienerMpodLvHvCtrl to control a single HV module
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <WienerMpodHvModuleClass.h>

/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass.cpp

//-------------------------------------------------------------------
/**
 *    Create WienerMpodHvModuleClass singleton and
 *    return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

    Tango::DeviceClass *_create_WienerMpodHvModule_class(const char *name) {
        return WienerMpodHvModule_ns::WienerMpodHvModuleClass::init(name);
    }
}

namespace WienerMpodHvModule_ns
{
//===================================================================
//    Initialize pointer for singleton pattern
//===================================================================
WienerMpodHvModuleClass *WienerMpodHvModuleClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method :         WienerMpodHvModuleClass::WienerMpodHvModuleClass(string &s)
 * description :     constructor for the WienerMpodHvModuleClass
 *
 * @param s    The class name
 */
//--------------------------------------------------------
WienerMpodHvModuleClass::WienerMpodHvModuleClass(string &s):Tango::DeviceClass(s)
{
    cout2 << "Entering WienerMpodHvModuleClass constructor" << endl;
    set_default_property();
    write_class_property();

    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::constructor) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::constructor

    cout2 << "Leaving WienerMpodHvModuleClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method :         WienerMpodHvModuleClass::~WienerMpodHvModuleClass()
 * description :     destructor for the WienerMpodHvModuleClass
 */
//--------------------------------------------------------
WienerMpodHvModuleClass::~WienerMpodHvModuleClass()
{
    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::destructor) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::destructor

    _instance = NULL;
}


//--------------------------------------------------------
/**
 * method :         WienerMpodHvModuleClass::init
 * description :     Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param    name    The class name
 */
//--------------------------------------------------------
WienerMpodHvModuleClass *WienerMpodHvModuleClass::init(const char *name)
{
    if (_instance == NULL)
    {
        try
        {
            string s(name);
            _instance = new WienerMpodHvModuleClass(s);
        }
        catch (bad_alloc &)
        {
            throw;
        }
    }
    return _instance;
}

//--------------------------------------------------------
/**
 * method :         WienerMpodHvModuleClass::instance
 * description :     Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
WienerMpodHvModuleClass *WienerMpodHvModuleClass::instance()
{
    if (_instance == NULL)
    {
        cerr << "Class is not initialised !!" << endl;
        exit(-1);
    }
    return _instance;
}



//===================================================================
//    Command execution method calls
//===================================================================

//===================================================================
//    Properties management
//===================================================================
//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModuleClass::get_class_property()
 *    Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum WienerMpodHvModuleClass::get_class_property(string &prop_name)
{
    for (unsigned int i=0 ; i<cl_prop.size() ; i++)
        if (cl_prop[i].name == prop_name)
            return cl_prop[i];
    //    if not found, returns  an empty DbDatum
    return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModuleClass::get_default_device_property()
 *    Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum WienerMpodHvModuleClass::get_default_device_property(string &prop_name)
{
    for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
        if (dev_def_prop[i].name == prop_name)
            return dev_def_prop[i];
    //    if not found, return  an empty DbDatum
    return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModuleClass::get_default_class_property()
 *    Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum WienerMpodHvModuleClass::get_default_class_property(string &prop_name)
{
    for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
        if (cl_def_prop[i].name == prop_name)
            return cl_def_prop[i];
    //    if not found, return  an empty DbDatum
    return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModuleClass::set_default_property()
 *    Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void WienerMpodHvModuleClass::set_default_property()
{
    string    prop_name;
    string    prop_desc;
    string    prop_def;
    vector<string>    vect_data;

    //    Set Default Class Properties

    //    Set Default device Properties
    prop_name = "WienerMpodLvHvCtrlDevice";
    prop_desc = "Device used for communication to the Wiener MPOD.\nThe commands of this device server are used.";
    prop_def  = "";
    vect_data.clear();
    if (prop_def.length()>0)
    {
        Tango::DbDatum    data(prop_name);
        data << vect_data ;
        dev_def_prop.push_back(data);
        add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
    }
    else
        add_wiz_dev_prop(prop_name, prop_desc);
    prop_name = "CrateSlotIndex";
    prop_desc = "Defines the slot in the MPOD crate where the \nHV module is inserted.";
    prop_def  = "";
    vect_data.clear();
    if (prop_def.length()>0)
    {
        Tango::DbDatum    data(prop_name);
        data << vect_data ;
        dev_def_prop.push_back(data);
        add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
    }
    else
        add_wiz_dev_prop(prop_name, prop_desc);
    prop_name = "ModuleNumberOfChannels";
    prop_desc = "If this property is > 0, dynamic attributes are \ngenerated for these channels.";
    prop_def  = "0";
    vect_data.clear();
    vect_data.push_back("0");
    if (prop_def.length()>0)
    {
        Tango::DbDatum    data(prop_name);
        data << vect_data ;
        dev_def_prop.push_back(data);
        add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
    }
    else
        add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModuleClass::write_class_property()
 *    Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void WienerMpodHvModuleClass::write_class_property()
{
    //    First time, check if database used
    if (Tango::Util::_UseDb == false)
        return;

    Tango::DbData    data;
    string    classname = get_name();
    string    header;
    string::size_type    start, end;

    //    Put title
    Tango::DbDatum    title("ProjectTitle");
    string    str_title("Uses WienerMpodLvHvCtrl to control a single HV module");
    title << str_title;
    data.push_back(title);

    //    Put Description
    Tango::DbDatum    description("Description");
    vector<string>    str_desc;
    str_desc.push_back("This class allows to run a device server controlling a single");
    str_desc.push_back("Iseg high voltage module inserted into a Wiener MPOD crate.");
    str_desc.push_back("");
    str_desc.push_back("Therefore it needs to connect to a running WienerMpodLvHvCtrl ");
    str_desc.push_back("device server. This device server is defined by the ");
    str_desc.push_back("WienerMpodLvHvCtrlDevice property.");
    str_desc.push_back("");
    str_desc.push_back("The module is identified by the CrateSlotIndex property.");
    str_desc.push_back("");
    str_desc.push_back("The number of channels of the module needs to be given in the ");
    str_desc.push_back("ModuleNumberOfChannels property. This property will define how many ");
    str_desc.push_back("dynamic attributes will be created.");
    str_desc.push_back("");
    str_desc.push_back("The dynamic attributes allow to control each of the HV channels.");
    str_desc.push_back("");
    str_desc.push_back("IMPORTANT: this device class is inappropriate for low voltage modules.");
    description << str_desc;
    data.push_back(description);

    //  Put inheritance
    Tango::DbDatum    inher_datum("InheritedFrom");
    vector<string> inheritance;
    inheritance.push_back("TANGO_BASE_CLASS");
    inher_datum << inheritance;
    data.push_back(inher_datum);

    //    Call database and and values
    get_db_class()->put_property(data);
}

//===================================================================
//    Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModuleClass::device_factory()
 *    Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void WienerMpodHvModuleClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::device_factory_before) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::device_factory_before

    //    Create devices and add it into the device list
    for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
    {
        cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
        device_list.push_back(new WienerMpodHvModule(this, (*devlist_ptr)[i]));
    }

    //    Manage dynamic attributes if any
    erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

    //    Export devices to the outside world
    for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
    {
        //    Add dynamic attributes if any
        WienerMpodHvModule *dev = static_cast<WienerMpodHvModule *>(device_list[device_list.size()-i]);
        dev->add_dynamic_attributes();

        //    Check before if database used.
        if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
            export_device(dev);
        else
            export_device(dev, dev->get_name().c_str());
    }

    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::device_factory_after) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::device_factory_after
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModuleClass::attribute_factory()
 *    Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void WienerMpodHvModuleClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::attribute_factory_before) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::attribute_factory_before
    //    Attribute : ModuleAuxiliaryMeasurementVoltage0
    ModuleAuxiliaryMeasurementVoltage0Attrib    *moduleauxiliarymeasurementvoltage0 = new ModuleAuxiliaryMeasurementVoltage0Attrib();
    Tango::UserDefaultAttrProp    moduleauxiliarymeasurementvoltage0_prop;
    //    description    not set for ModuleAuxiliaryMeasurementVoltage0
    //    label    not set for ModuleAuxiliaryMeasurementVoltage0
    moduleauxiliarymeasurementvoltage0_prop.set_unit("V");
    //    standard_unit    not set for ModuleAuxiliaryMeasurementVoltage0
    //    display_unit    not set for ModuleAuxiliaryMeasurementVoltage0
    //    format    not set for ModuleAuxiliaryMeasurementVoltage0
    //    max_value    not set for ModuleAuxiliaryMeasurementVoltage0
    //    min_value    not set for ModuleAuxiliaryMeasurementVoltage0
    //    max_alarm    not set for ModuleAuxiliaryMeasurementVoltage0
    //    min_alarm    not set for ModuleAuxiliaryMeasurementVoltage0
    //    max_warning    not set for ModuleAuxiliaryMeasurementVoltage0
    //    min_warning    not set for ModuleAuxiliaryMeasurementVoltage0
    //    delta_t    not set for ModuleAuxiliaryMeasurementVoltage0
    //    delta_val    not set for ModuleAuxiliaryMeasurementVoltage0
    
    moduleauxiliarymeasurementvoltage0->set_default_properties(moduleauxiliarymeasurementvoltage0_prop);
    //    Not Polled
    moduleauxiliarymeasurementvoltage0->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(moduleauxiliarymeasurementvoltage0);

    //    Attribute : ModuleAuxiliaryMeasurementVoltage1
    ModuleAuxiliaryMeasurementVoltage1Attrib    *moduleauxiliarymeasurementvoltage1 = new ModuleAuxiliaryMeasurementVoltage1Attrib();
    Tango::UserDefaultAttrProp    moduleauxiliarymeasurementvoltage1_prop;
    //    description    not set for ModuleAuxiliaryMeasurementVoltage1
    //    label    not set for ModuleAuxiliaryMeasurementVoltage1
    moduleauxiliarymeasurementvoltage1_prop.set_unit("V");
    //    standard_unit    not set for ModuleAuxiliaryMeasurementVoltage1
    //    display_unit    not set for ModuleAuxiliaryMeasurementVoltage1
    //    format    not set for ModuleAuxiliaryMeasurementVoltage1
    //    max_value    not set for ModuleAuxiliaryMeasurementVoltage1
    //    min_value    not set for ModuleAuxiliaryMeasurementVoltage1
    //    max_alarm    not set for ModuleAuxiliaryMeasurementVoltage1
    //    min_alarm    not set for ModuleAuxiliaryMeasurementVoltage1
    //    max_warning    not set for ModuleAuxiliaryMeasurementVoltage1
    //    min_warning    not set for ModuleAuxiliaryMeasurementVoltage1
    //    delta_t    not set for ModuleAuxiliaryMeasurementVoltage1
    //    delta_val    not set for ModuleAuxiliaryMeasurementVoltage1
    
    moduleauxiliarymeasurementvoltage1->set_default_properties(moduleauxiliarymeasurementvoltage1_prop);
    //    Not Polled
    moduleauxiliarymeasurementvoltage1->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(moduleauxiliarymeasurementvoltage1);

    //    Attribute : ModuleDescription
    ModuleDescriptionAttrib    *moduledescription = new ModuleDescriptionAttrib();
    Tango::UserDefaultAttrProp    moduledescription_prop;
    //    description    not set for ModuleDescription
    //    label    not set for ModuleDescription
    //    unit    not set for ModuleDescription
    //    standard_unit    not set for ModuleDescription
    //    display_unit    not set for ModuleDescription
    //    format    not set for ModuleDescription
    //    max_value    not set for ModuleDescription
    //    min_value    not set for ModuleDescription
    //    max_alarm    not set for ModuleDescription
    //    min_alarm    not set for ModuleDescription
    //    max_warning    not set for ModuleDescription
    //    min_warning    not set for ModuleDescription
    //    delta_t    not set for ModuleDescription
    //    delta_val    not set for ModuleDescription
    
    moduledescription->set_default_properties(moduledescription_prop);
    //    Not Polled
    moduledescription->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(moduledescription);

    //    Attribute : ModuleEventChannelStatus
    ModuleEventChannelStatusAttrib    *moduleeventchannelstatus = new ModuleEventChannelStatusAttrib();
    Tango::UserDefaultAttrProp    moduleeventchannelstatus_prop;
    //    description    not set for ModuleEventChannelStatus
    //    label    not set for ModuleEventChannelStatus
    //    unit    not set for ModuleEventChannelStatus
    //    standard_unit    not set for ModuleEventChannelStatus
    //    display_unit    not set for ModuleEventChannelStatus
    moduleeventchannelstatus_prop.set_format("%xX");
    //    max_value    not set for ModuleEventChannelStatus
    //    min_value    not set for ModuleEventChannelStatus
    //    max_alarm    not set for ModuleEventChannelStatus
    //    min_alarm    not set for ModuleEventChannelStatus
    //    max_warning    not set for ModuleEventChannelStatus
    //    min_warning    not set for ModuleEventChannelStatus
    //    delta_t    not set for ModuleEventChannelStatus
    //    delta_val    not set for ModuleEventChannelStatus
    
    moduleeventchannelstatus->set_default_properties(moduleeventchannelstatus_prop);
    //    Not Polled
    moduleeventchannelstatus->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(moduleeventchannelstatus);

    //    Attribute : ModuleEventStatus
    ModuleEventStatusAttrib    *moduleeventstatus = new ModuleEventStatusAttrib();
    Tango::UserDefaultAttrProp    moduleeventstatus_prop;
    //    description    not set for ModuleEventStatus
    //    label    not set for ModuleEventStatus
    //    unit    not set for ModuleEventStatus
    //    standard_unit    not set for ModuleEventStatus
    //    display_unit    not set for ModuleEventStatus
    moduleeventstatus_prop.set_format("%xX");
    //    max_value    not set for ModuleEventStatus
    //    min_value    not set for ModuleEventStatus
    //    max_alarm    not set for ModuleEventStatus
    //    min_alarm    not set for ModuleEventStatus
    //    max_warning    not set for ModuleEventStatus
    //    min_warning    not set for ModuleEventStatus
    //    delta_t    not set for ModuleEventStatus
    //    delta_val    not set for ModuleEventStatus
    
    moduleeventstatus->set_default_properties(moduleeventstatus_prop);
    //    Not Polled
    moduleeventstatus->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(moduleeventstatus);

    //    Attribute : ModuleEventStatusAsString
    ModuleEventStatusAsStringAttrib    *moduleeventstatusasstring = new ModuleEventStatusAsStringAttrib();
    Tango::UserDefaultAttrProp    moduleeventstatusasstring_prop;
    //    description    not set for ModuleEventStatusAsString
    //    label    not set for ModuleEventStatusAsString
    //    unit    not set for ModuleEventStatusAsString
    //    standard_unit    not set for ModuleEventStatusAsString
    //    display_unit    not set for ModuleEventStatusAsString
    //    format    not set for ModuleEventStatusAsString
    //    max_value    not set for ModuleEventStatusAsString
    //    min_value    not set for ModuleEventStatusAsString
    //    max_alarm    not set for ModuleEventStatusAsString
    //    min_alarm    not set for ModuleEventStatusAsString
    //    max_warning    not set for ModuleEventStatusAsString
    //    min_warning    not set for ModuleEventStatusAsString
    //    delta_t    not set for ModuleEventStatusAsString
    //    delta_val    not set for ModuleEventStatusAsString
    
    moduleeventstatusasstring->set_default_properties(moduleeventstatusasstring_prop);
    //    Not Polled
    moduleeventstatusasstring->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(moduleeventstatusasstring);

    //    Attribute : ModuleHardwareLimitCurrent
    ModuleHardwareLimitCurrentAttrib    *modulehardwarelimitcurrent = new ModuleHardwareLimitCurrentAttrib();
    Tango::UserDefaultAttrProp    modulehardwarelimitcurrent_prop;
    //    description    not set for ModuleHardwareLimitCurrent
    //    label    not set for ModuleHardwareLimitCurrent
    modulehardwarelimitcurrent_prop.set_unit("%");
    //    standard_unit    not set for ModuleHardwareLimitCurrent
    //    display_unit    not set for ModuleHardwareLimitCurrent
    //    format    not set for ModuleHardwareLimitCurrent
    //    max_value    not set for ModuleHardwareLimitCurrent
    //    min_value    not set for ModuleHardwareLimitCurrent
    //    max_alarm    not set for ModuleHardwareLimitCurrent
    //    min_alarm    not set for ModuleHardwareLimitCurrent
    //    max_warning    not set for ModuleHardwareLimitCurrent
    //    min_warning    not set for ModuleHardwareLimitCurrent
    //    delta_t    not set for ModuleHardwareLimitCurrent
    //    delta_val    not set for ModuleHardwareLimitCurrent
    
    modulehardwarelimitcurrent->set_default_properties(modulehardwarelimitcurrent_prop);
    //    Not Polled
    modulehardwarelimitcurrent->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(modulehardwarelimitcurrent);

    //    Attribute : ModuleHardwareLimitVoltage
    ModuleHardwareLimitVoltageAttrib    *modulehardwarelimitvoltage = new ModuleHardwareLimitVoltageAttrib();
    Tango::UserDefaultAttrProp    modulehardwarelimitvoltage_prop;
    //    description    not set for ModuleHardwareLimitVoltage
    //    label    not set for ModuleHardwareLimitVoltage
    modulehardwarelimitvoltage_prop.set_unit("%");
    //    standard_unit    not set for ModuleHardwareLimitVoltage
    //    display_unit    not set for ModuleHardwareLimitVoltage
    //    format    not set for ModuleHardwareLimitVoltage
    //    max_value    not set for ModuleHardwareLimitVoltage
    //    min_value    not set for ModuleHardwareLimitVoltage
    //    max_alarm    not set for ModuleHardwareLimitVoltage
    //    min_alarm    not set for ModuleHardwareLimitVoltage
    //    max_warning    not set for ModuleHardwareLimitVoltage
    //    min_warning    not set for ModuleHardwareLimitVoltage
    //    delta_t    not set for ModuleHardwareLimitVoltage
    //    delta_val    not set for ModuleHardwareLimitVoltage
    
    modulehardwarelimitvoltage->set_default_properties(modulehardwarelimitvoltage_prop);
    //    Not Polled
    modulehardwarelimitvoltage->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(modulehardwarelimitvoltage);

    //    Attribute : ModuleIndex
    ModuleIndexAttrib    *moduleindex = new ModuleIndexAttrib();
    Tango::UserDefaultAttrProp    moduleindex_prop;
    //    description    not set for ModuleIndex
    //    label    not set for ModuleIndex
    //    unit    not set for ModuleIndex
    //    standard_unit    not set for ModuleIndex
    //    display_unit    not set for ModuleIndex
    //    format    not set for ModuleIndex
    //    max_value    not set for ModuleIndex
    //    min_value    not set for ModuleIndex
    //    max_alarm    not set for ModuleIndex
    //    min_alarm    not set for ModuleIndex
    //    max_warning    not set for ModuleIndex
    //    min_warning    not set for ModuleIndex
    //    delta_t    not set for ModuleIndex
    //    delta_val    not set for ModuleIndex
    
    moduleindex->set_default_properties(moduleindex_prop);
    //    Not Polled
    moduleindex->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(moduleindex);

    //    Attribute : ModuleMeasurementTemperature0
    ModuleMeasurementTemperature0Attrib    *modulemeasurementtemperature0 = new ModuleMeasurementTemperature0Attrib();
    Tango::UserDefaultAttrProp    modulemeasurementtemperature0_prop;
    //    description    not set for ModuleMeasurementTemperature0
    //    label    not set for ModuleMeasurementTemperature0
    //    unit    not set for ModuleMeasurementTemperature0
    //    standard_unit    not set for ModuleMeasurementTemperature0
    //    display_unit    not set for ModuleMeasurementTemperature0
    //    format    not set for ModuleMeasurementTemperature0
    //    max_value    not set for ModuleMeasurementTemperature0
    //    min_value    not set for ModuleMeasurementTemperature0
    //    max_alarm    not set for ModuleMeasurementTemperature0
    //    min_alarm    not set for ModuleMeasurementTemperature0
    //    max_warning    not set for ModuleMeasurementTemperature0
    //    min_warning    not set for ModuleMeasurementTemperature0
    //    delta_t    not set for ModuleMeasurementTemperature0
    //    delta_val    not set for ModuleMeasurementTemperature0
    
    modulemeasurementtemperature0->set_default_properties(modulemeasurementtemperature0_prop);
    //    Not Polled
    modulemeasurementtemperature0->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(modulemeasurementtemperature0);

    //    Attribute : ModuleNumberOfChannels
    ModuleNumberOfChannelsAttrib    *modulenumberofchannels = new ModuleNumberOfChannelsAttrib();
    Tango::UserDefaultAttrProp    modulenumberofchannels_prop;
    //    description    not set for ModuleNumberOfChannels
    //    label    not set for ModuleNumberOfChannels
    //    unit    not set for ModuleNumberOfChannels
    //    standard_unit    not set for ModuleNumberOfChannels
    //    display_unit    not set for ModuleNumberOfChannels
    //    format    not set for ModuleNumberOfChannels
    //    max_value    not set for ModuleNumberOfChannels
    //    min_value    not set for ModuleNumberOfChannels
    //    max_alarm    not set for ModuleNumberOfChannels
    //    min_alarm    not set for ModuleNumberOfChannels
    //    max_warning    not set for ModuleNumberOfChannels
    //    min_warning    not set for ModuleNumberOfChannels
    //    delta_t    not set for ModuleNumberOfChannels
    //    delta_val    not set for ModuleNumberOfChannels
    
    modulenumberofchannels->set_default_properties(modulenumberofchannels_prop);
    //    Not Polled
    modulenumberofchannels->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(modulenumberofchannels);

    //    Attribute : ModuleRampSpeedCurrent
    ModuleRampSpeedCurrentAttrib    *modulerampspeedcurrent = new ModuleRampSpeedCurrentAttrib();
    Tango::UserDefaultAttrProp    modulerampspeedcurrent_prop;
    //    description    not set for ModuleRampSpeedCurrent
    //    label    not set for ModuleRampSpeedCurrent
    modulerampspeedcurrent_prop.set_unit("%");
    //    standard_unit    not set for ModuleRampSpeedCurrent
    //    display_unit    not set for ModuleRampSpeedCurrent
    //    format    not set for ModuleRampSpeedCurrent
    //    max_value    not set for ModuleRampSpeedCurrent
    //    min_value    not set for ModuleRampSpeedCurrent
    //    max_alarm    not set for ModuleRampSpeedCurrent
    //    min_alarm    not set for ModuleRampSpeedCurrent
    //    max_warning    not set for ModuleRampSpeedCurrent
    //    min_warning    not set for ModuleRampSpeedCurrent
    //    delta_t    not set for ModuleRampSpeedCurrent
    //    delta_val    not set for ModuleRampSpeedCurrent
    
    modulerampspeedcurrent->set_default_properties(modulerampspeedcurrent_prop);
    //    Not Polled
    modulerampspeedcurrent->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(modulerampspeedcurrent);

    //    Attribute : ModuleRampSpeedVoltage
    ModuleRampSpeedVoltageAttrib    *modulerampspeedvoltage = new ModuleRampSpeedVoltageAttrib();
    Tango::UserDefaultAttrProp    modulerampspeedvoltage_prop;
    //    description    not set for ModuleRampSpeedVoltage
    //    label    not set for ModuleRampSpeedVoltage
    modulerampspeedvoltage_prop.set_unit("%");
    //    standard_unit    not set for ModuleRampSpeedVoltage
    //    display_unit    not set for ModuleRampSpeedVoltage
    //    format    not set for ModuleRampSpeedVoltage
    //    max_value    not set for ModuleRampSpeedVoltage
    //    min_value    not set for ModuleRampSpeedVoltage
    //    max_alarm    not set for ModuleRampSpeedVoltage
    //    min_alarm    not set for ModuleRampSpeedVoltage
    //    max_warning    not set for ModuleRampSpeedVoltage
    //    min_warning    not set for ModuleRampSpeedVoltage
    //    delta_t    not set for ModuleRampSpeedVoltage
    //    delta_val    not set for ModuleRampSpeedVoltage
    
    modulerampspeedvoltage->set_default_properties(modulerampspeedvoltage_prop);
    //    Not Polled
    modulerampspeedvoltage->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(modulerampspeedvoltage);

    //    Attribute : ModuleStatus
    ModuleStatusAttrib    *modulestatus = new ModuleStatusAttrib();
    Tango::UserDefaultAttrProp    modulestatus_prop;
    //    description    not set for ModuleStatus
    //    label    not set for ModuleStatus
    //    unit    not set for ModuleStatus
    //    standard_unit    not set for ModuleStatus
    //    display_unit    not set for ModuleStatus
    modulestatus_prop.set_format("%xX");
    //    max_value    not set for ModuleStatus
    //    min_value    not set for ModuleStatus
    //    max_alarm    not set for ModuleStatus
    //    min_alarm    not set for ModuleStatus
    //    max_warning    not set for ModuleStatus
    //    min_warning    not set for ModuleStatus
    //    delta_t    not set for ModuleStatus
    //    delta_val    not set for ModuleStatus
    
    modulestatus->set_default_properties(modulestatus_prop);
    //    Not Polled
    modulestatus->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(modulestatus);

    //    Attribute : ModuleStatusAsString
    ModuleStatusAsStringAttrib    *modulestatusasstring = new ModuleStatusAsStringAttrib();
    Tango::UserDefaultAttrProp    modulestatusasstring_prop;
    //    description    not set for ModuleStatusAsString
    //    label    not set for ModuleStatusAsString
    //    unit    not set for ModuleStatusAsString
    //    standard_unit    not set for ModuleStatusAsString
    //    display_unit    not set for ModuleStatusAsString
    //    format    not set for ModuleStatusAsString
    //    max_value    not set for ModuleStatusAsString
    //    min_value    not set for ModuleStatusAsString
    //    max_alarm    not set for ModuleStatusAsString
    //    min_alarm    not set for ModuleStatusAsString
    //    max_warning    not set for ModuleStatusAsString
    //    min_warning    not set for ModuleStatusAsString
    //    delta_t    not set for ModuleStatusAsString
    //    delta_val    not set for ModuleStatusAsString
    
    modulestatusasstring->set_default_properties(modulestatusasstring_prop);
    //    Not Polled
    modulestatusasstring->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(modulestatusasstring);

    //    Attribute : ModuleDoClear
    ModuleDoClearAttrib    *moduledoclear = new ModuleDoClearAttrib();
    Tango::UserDefaultAttrProp    moduledoclear_prop;
    //    description    not set for ModuleDoClear
    //    label    not set for ModuleDoClear
    //    unit    not set for ModuleDoClear
    //    standard_unit    not set for ModuleDoClear
    //    display_unit    not set for ModuleDoClear
    moduledoclear_prop.set_format("%xX");
    //    max_value    not set for ModuleDoClear
    //    min_value    not set for ModuleDoClear
    //    max_alarm    not set for ModuleDoClear
    //    min_alarm    not set for ModuleDoClear
    //    max_warning    not set for ModuleDoClear
    //    min_warning    not set for ModuleDoClear
    //    delta_t    not set for ModuleDoClear
    //    delta_val    not set for ModuleDoClear
    
    moduledoclear->set_default_properties(moduledoclear_prop);
    //    Not Polled
    moduledoclear->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    att_list.push_back(moduledoclear);


    //    Create a list of static attributes
    create_static_attribute_list(get_class_attr()->get_attr_list());
    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::attribute_factory_after) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModuleClass::pipe_factory()
 *    Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void WienerMpodHvModuleClass::pipe_factory()
{
    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::pipe_factory_before) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::pipe_factory_before
    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::pipe_factory_after) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModuleClass::command_factory()
 *    Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void WienerMpodHvModuleClass::command_factory()
{
    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::command_factory_before) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::command_factory_before


    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::command_factory_after) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::command_factory_after
}

//===================================================================
//    Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method :         WienerMpodHvModuleClass::create_static_attribute_list
 * description :     Create the a list of static attributes
 *
 * @param    att_list    the ceated attribute list
 */
//--------------------------------------------------------
void WienerMpodHvModuleClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
    for (unsigned long i=0 ; i<att_list.size() ; i++)
    {
        string att_name(att_list[i]->get_name());
        transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
        defaultAttList.push_back(att_name);
    }

    cout2 << defaultAttList.size() << " attributes in default list" << endl;

    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::create_static_att_list) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method :         WienerMpodHvModuleClass::erase_dynamic_attributes
 * description :     delete the dynamic attributes if any.
 *
 * @param    devlist_ptr    the device list pointer
 * @param    list of all attributes
 */
//--------------------------------------------------------
void WienerMpodHvModuleClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
    Tango::Util *tg = Tango::Util::instance();

    for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
    {
        Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
        WienerMpodHvModule *dev = static_cast<WienerMpodHvModule *> (dev_impl);

        vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
        vector<Tango::Attribute *>::iterator ite_att;
        for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
        {
            string att_name((*ite_att)->get_name_lower());
            if ((att_name == "state") || (att_name == "status"))
                continue;
            vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
            if (ite_str == defaultAttList.end())
            {
                cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
                Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
                dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
                --ite_att;
            }
        }
    }
    /*----- PROTECTED REGION ID(WienerMpodHvModuleClass::erase_dynamic_attributes) ENABLED START -----*/
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModuleClass::get_attr_object_by_name()
 *    Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *WienerMpodHvModuleClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
    vector<Tango::Attr *>::iterator it;
    for (it=att_list.begin() ; it<att_list.end() ; ++it)
        if ((*it)->get_name()==attname)
            return (*it);
    //    Attr does not exist
    return NULL;
}


/*----- PROTECTED REGION ID(WienerMpodHvModuleClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModuleClass::Additional Methods
} //    namespace
