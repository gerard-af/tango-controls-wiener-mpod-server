/*----- PROTECTED REGION ID(WienerMpodHvModule.cpp) ENABLED START -----*/
//=============================================================================
//
// file :        WienerMpodHvModule.cpp
//
// description : C++ source for the WienerMpodHvModule class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               WienerMpodHvModule are implemented in this file.
//
// project :     Uses WienerMpodLvHvCtrl to control a single HV module
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <WienerMpodHvModule.h>
#include <WienerMpodHvModuleClass.h>
#include "WienerMpodHvModuleDynAttrExtensions.h"

/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule.cpp

/**
 *  WienerMpodHvModule class description:
 *    This class allows to run a device server controlling a single
 *    Iseg high voltage module inserted into a Wiener MPOD crate.
 *    
 *    Therefore it needs to connect to a running WienerMpodLvHvCtrl 
 *    device server. This device server is defined by the 
 *    WienerMpodLvHvCtrlDevice property.
 *    
 *    The module is identified by the CrateSlotIndex property.
 *    
 *    The number of channels of the module needs to be given in the 
 *    ModuleNumberOfChannels property. This property will define how many 
 *    dynamic attributes will be created.
 *    
 *    The dynamic attributes allow to control each of the HV channels.
 *    
 *    IMPORTANT: this device class is inappropriate for low voltage modules.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  ModuleAuxiliaryMeasurementVoltage0  |  Tango::DevDouble    Scalar
//  ModuleAuxiliaryMeasurementVoltage1  |  Tango::DevDouble    Scalar
//  ModuleDescription                   |  Tango::DevString    Scalar
//  ModuleEventChannelStatus            |  Tango::DevLong    Scalar
//  ModuleEventStatus                   |  Tango::DevLong    Scalar
//  ModuleEventStatusAsString           |  Tango::DevString    Scalar
//  ModuleHardwareLimitCurrent          |  Tango::DevDouble    Scalar
//  ModuleHardwareLimitVoltage          |  Tango::DevDouble    Scalar
//  ModuleIndex                         |  Tango::DevLong    Scalar
//  ModuleMeasurementTemperature0       |  Tango::DevDouble    Scalar
//  ModuleNumberOfChannels              |  Tango::DevLong    Scalar
//  ModuleRampSpeedCurrent              |  Tango::DevDouble    Scalar
//  ModuleRampSpeedVoltage              |  Tango::DevDouble    Scalar
//  ModuleStatus                        |  Tango::DevLong    Scalar
//  ModuleStatusAsString                |  Tango::DevString    Scalar
//  ModuleDoClear                       |  Tango::DevBoolean    Scalar
//================================================================

namespace WienerMpodHvModule_ns
{
/*----- PROTECTED REGION ID(WienerMpodHvModule::namespace_starting) ENABLED START -----*/

//    static initializations

/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::namespace_starting

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModule::WienerMpodHvModule()
 *    Description : Constructors for a Tango device
 *                implementing the classWienerMpodHvModule
 */
//--------------------------------------------------------
WienerMpodHvModule::WienerMpodHvModule(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
    /*----- PROTECTED REGION ID(WienerMpodHvModule::constructor_1) ENABLED START -----*/
    m_mpodLvHvCtrl = 0;
    init_device();
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::constructor_1
}
//--------------------------------------------------------
WienerMpodHvModule::WienerMpodHvModule(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
    /*----- PROTECTED REGION ID(WienerMpodHvModule::constructor_2) ENABLED START -----*/
    m_mpodLvHvCtrl = 0;
    init_device();
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::constructor_2
}
//--------------------------------------------------------
WienerMpodHvModule::WienerMpodHvModule(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
    /*----- PROTECTED REGION ID(WienerMpodHvModule::constructor_3) ENABLED START -----*/
    m_mpodLvHvCtrl = 0;
    init_device();
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::constructor_3
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModule::delete_device()
 *    Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void WienerMpodHvModule::delete_device()
{
    DEBUG_STREAM << "WienerMpodHvModule::delete_device() " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::delete_device) ENABLED START -----*/
    
    //    Delete device allocated objects
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::delete_device
    delete[] attr_ModuleAuxiliaryMeasurementVoltage0_read;
    delete[] attr_ModuleAuxiliaryMeasurementVoltage1_read;
    delete[] attr_ModuleDescription_read;
    delete[] attr_ModuleEventChannelStatus_read;
    delete[] attr_ModuleEventStatus_read;
    delete[] attr_ModuleEventStatusAsString_read;
    delete[] attr_ModuleHardwareLimitCurrent_read;
    delete[] attr_ModuleHardwareLimitVoltage_read;
    delete[] attr_ModuleIndex_read;
    delete[] attr_ModuleMeasurementTemperature0_read;
    delete[] attr_ModuleNumberOfChannels_read;
    delete[] attr_ModuleRampSpeedCurrent_read;
    delete[] attr_ModuleRampSpeedVoltage_read;
    delete[] attr_ModuleStatus_read;
    delete[] attr_ModuleStatusAsString_read;
    delete[] attr_ModuleDoClear_read;
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModule::init_device()
 *    Description : will be called at device initialization.
 */
//--------------------------------------------------------
void WienerMpodHvModule::init_device()
{
    DEBUG_STREAM << "WienerMpodHvModule::init_device() create device " << device_name << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::init_device_before) ENABLED START -----*/
    
    //    Initialization before get_device_property() call
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::init_device_before
    

    //    Get the device properties from database
    get_device_property();
    
    attr_ModuleAuxiliaryMeasurementVoltage0_read = new Tango::DevDouble[1];
    attr_ModuleAuxiliaryMeasurementVoltage1_read = new Tango::DevDouble[1];
    attr_ModuleDescription_read = new Tango::DevString[1];
    attr_ModuleEventChannelStatus_read = new Tango::DevLong[1];
    attr_ModuleEventStatus_read = new Tango::DevLong[1];
    attr_ModuleEventStatusAsString_read = new Tango::DevString[1];
    attr_ModuleHardwareLimitCurrent_read = new Tango::DevDouble[1];
    attr_ModuleHardwareLimitVoltage_read = new Tango::DevDouble[1];
    attr_ModuleIndex_read = new Tango::DevLong[1];
    attr_ModuleMeasurementTemperature0_read = new Tango::DevDouble[1];
    attr_ModuleNumberOfChannels_read = new Tango::DevLong[1];
    attr_ModuleRampSpeedCurrent_read = new Tango::DevDouble[1];
    attr_ModuleRampSpeedVoltage_read = new Tango::DevDouble[1];
    attr_ModuleStatus_read = new Tango::DevLong[1];
    attr_ModuleStatusAsString_read = new Tango::DevString[1];
    attr_ModuleDoClear_read = new Tango::DevBoolean[1];
    //    No longer if mandatory property not set. 
    if (mandatoryNotDefined)
        return;

    /*----- PROTECTED REGION ID(WienerMpodHvModule::init_device) ENABLED START -----*/
    
    if (m_mpodLvHvCtrl) {
        delete m_mpodLvHvCtrl;
        m_mpodLvHvCtrl = 0;
    }
    //    Initialize device
    try {
        m_mpodLvHvCtrl = new Tango::DeviceProxy(wienerMpodLvHvCtrlDevice);
    }
    catch( Tango::DevFailed &e){
        m_errorString = "failed to create a proxy to " + wienerMpodLvHvCtrlDevice;
        Tango::Except::throw_exception ((const char *)"WienerMpodHvModule",
                      m_errorString.c_str(),
                      (const char *)"WienerMpodHvModule::init_device");
    }

    set_state(Tango::ON);

    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::init_device
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModule::get_device_property()
 *    Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void WienerMpodHvModule::get_device_property()
{
    /*----- PROTECTED REGION ID(WienerMpodHvModule::get_device_property_before) ENABLED START -----*/
    
    //    Initialize property data members
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::get_device_property_before

    mandatoryNotDefined = false;

    //    Read device properties from database.
    Tango::DbData    dev_prop;
    dev_prop.push_back(Tango::DbDatum("WienerMpodLvHvCtrlDevice"));
    dev_prop.push_back(Tango::DbDatum("CrateSlotIndex"));
    dev_prop.push_back(Tango::DbDatum("ModuleNumberOfChannels"));

    //    is there at least one property to be read ?
    if (dev_prop.size()>0)
    {
        //    Call database and extract values
        if (Tango::Util::instance()->_UseDb==true)
            get_db_device()->get_property(dev_prop);
    
        //    get instance on WienerMpodHvModuleClass to get class property
        Tango::DbDatum    def_prop, cl_prop;
        WienerMpodHvModuleClass    *ds_class =
            (static_cast<WienerMpodHvModuleClass *>(get_device_class()));
        int    i = -1;

        //    Try to initialize WienerMpodLvHvCtrlDevice from class property
        cl_prop = ds_class->get_class_property(dev_prop[++i].name);
        if (cl_prop.is_empty()==false)    cl_prop  >>  wienerMpodLvHvCtrlDevice;
        else {
            //    Try to initialize WienerMpodLvHvCtrlDevice from default device value
            def_prop = ds_class->get_default_device_property(dev_prop[i].name);
            if (def_prop.is_empty()==false)    def_prop  >>  wienerMpodLvHvCtrlDevice;
        }
        //    And try to extract WienerMpodLvHvCtrlDevice value from database
        if (dev_prop[i].is_empty()==false)    dev_prop[i]  >>  wienerMpodLvHvCtrlDevice;
        //    Property StartDsPath is mandatory, check if has been defined in database.
        check_mandatory_property(cl_prop, dev_prop[i]);

        //    Try to initialize CrateSlotIndex from class property
        cl_prop = ds_class->get_class_property(dev_prop[++i].name);
        if (cl_prop.is_empty()==false)    cl_prop  >>  crateSlotIndex;
        else {
            //    Try to initialize CrateSlotIndex from default device value
            def_prop = ds_class->get_default_device_property(dev_prop[i].name);
            if (def_prop.is_empty()==false)    def_prop  >>  crateSlotIndex;
        }
        //    And try to extract CrateSlotIndex value from database
        if (dev_prop[i].is_empty()==false)    dev_prop[i]  >>  crateSlotIndex;
        //    Property StartDsPath is mandatory, check if has been defined in database.
        check_mandatory_property(cl_prop, dev_prop[i]);

        //    Try to initialize ModuleNumberOfChannels from class property
        cl_prop = ds_class->get_class_property(dev_prop[++i].name);
        if (cl_prop.is_empty()==false)    cl_prop  >>  moduleNumberOfChannels;
        else {
            //    Try to initialize ModuleNumberOfChannels from default device value
            def_prop = ds_class->get_default_device_property(dev_prop[i].name);
            if (def_prop.is_empty()==false)    def_prop  >>  moduleNumberOfChannels;
        }
        //    And try to extract ModuleNumberOfChannels value from database
        if (dev_prop[i].is_empty()==false)    dev_prop[i]  >>  moduleNumberOfChannels;

    }

    /*----- PROTECTED REGION ID(WienerMpodHvModule::get_device_property_after) ENABLED START -----*/
    
    //    Check device property data members init
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::get_device_property_after
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModule::check_mandatory_property()
 *    Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void WienerMpodHvModule::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
    //    Check if all properties are empty
    if (class_prop.is_empty() && dev_prop.is_empty())
    {
        TangoSys_OMemStream    tms;
        tms << endl <<"Property \'" << dev_prop.name;
        if (Tango::Util::instance()->_UseDb==true)
            tms << "\' is mandatory but not defined in database";
        else
            tms << "\' is mandatory but cannot be defined without database";
        append_status(tms.str());
        mandatoryNotDefined = true;
        /*----- PROTECTED REGION ID(WienerMpodHvModule::check_mandatory_property) ENABLED START -----*/
        cerr << tms.str() << " for " << device_name << endl;
        
        /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::check_mandatory_property
    }
}


//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModule::always_executed_hook()
 *    Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void WienerMpodHvModule::always_executed_hook()
{
    DEBUG_STREAM << "WienerMpodHvModule::always_executed_hook()  " << device_name << endl;
    if (mandatoryNotDefined)
    {
        Tango::Except::throw_exception(
                    (const char *)"PROPERTY_NOT_SET",
                    get_status().c_str(),
                    (const char *)"WienerMpodHvModule::always_executed_hook()");
    }
    /*----- PROTECTED REGION ID(WienerMpodHvModule::always_executed_hook) ENABLED START -----*/
    
    //    code always executed before all requests
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::always_executed_hook
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModule::read_attr_hardware()
 *    Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
    DEBUG_STREAM << "WienerMpodHvModule::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_attr_hardware) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_attr_hardware
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModule::write_attr_hardware()
 *    Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void WienerMpodHvModule::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
    DEBUG_STREAM << "WienerMpodHvModule::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::write_attr_hardware) ENABLED START -----*/
    
    //    Add your own code
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::write_attr_hardware
}

//--------------------------------------------------------
/**
 *    Read attribute ModuleAuxiliaryMeasurementVoltage0 related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleAuxiliaryMeasurementVoltage0(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleAuxiliaryMeasurementVoltage0(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleAuxiliaryMeasurementVoltage0) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetAuxiliaryMeasurementVoltage0", din);
        dout >> *attr_ModuleAuxiliaryMeasurementVoltage0_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleAuxiliaryMeasurementVoltage0_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleAuxiliaryMeasurementVoltage0
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleAuxiliaryMeasurementVoltage1 related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleAuxiliaryMeasurementVoltage1(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleAuxiliaryMeasurementVoltage1(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleAuxiliaryMeasurementVoltage1) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetAuxiliaryMeasurementVoltage1", din);
        dout >> *attr_ModuleAuxiliaryMeasurementVoltage1_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleAuxiliaryMeasurementVoltage1_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleAuxiliaryMeasurementVoltage1
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleDescription related method
 *    Description: 
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleDescription(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleDescription(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleDescription) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetDescription", din);
        dout >> m_moduleDescription;
        *attr_ModuleDescription_read = (char*)(m_moduleDescription.c_str());
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleDescription_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleDescription
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleEventChannelStatus related method
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleEventChannelStatus(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleEventChannelStatus(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleEventChannelStatus) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetEventChannelStatus", din);
        dout >> *attr_ModuleEventChannelStatus_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleEventChannelStatus_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleEventChannelStatus
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleEventStatus related method
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleEventStatus(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleEventStatus(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleEventStatus) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetEventStatus", din);
        dout >> *attr_ModuleEventStatus_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleEventStatus_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleEventStatus
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleEventStatusAsString related method
 *    Description: 
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleEventStatusAsString(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleEventStatusAsString(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleEventStatusAsString) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetEventStatusAsString", din);
        dout >> m_moduleEventStatusAsString;
        *attr_ModuleEventStatusAsString_read = (char*)(m_moduleEventStatusAsString.c_str());
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleEventStatusAsString_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleEventStatusAsString
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleHardwareLimitCurrent related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleHardwareLimitCurrent(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleHardwareLimitCurrent(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleHardwareLimitCurrent) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetHardwareLimitCurrent", din);
        dout >> *attr_ModuleHardwareLimitCurrent_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleHardwareLimitCurrent_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleHardwareLimitCurrent
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleHardwareLimitVoltage related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleHardwareLimitVoltage(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleHardwareLimitVoltage(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleHardwareLimitVoltage) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetHardwareLimitVoltage", din);
        dout >> *attr_ModuleHardwareLimitVoltage_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleHardwareLimitVoltage_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleHardwareLimitVoltage
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleIndex related method
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleIndex(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleIndex(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleIndex) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetIndex", din);
        dout >> *attr_ModuleIndex_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleIndex_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleIndex
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleMeasurementTemperature0 related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleMeasurementTemperature0(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleMeasurementTemperature0(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleMeasurementTemperature0) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetMeasurementTemperature0", din);
        dout >> *attr_ModuleMeasurementTemperature0_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleMeasurementTemperature0_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleMeasurementTemperature0
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleNumberOfChannels related method
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleNumberOfChannels(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleNumberOfChannels(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleNumberOfChannels) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetNumberOfChannels", din);
        dout >> *attr_ModuleNumberOfChannels_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleNumberOfChannels_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleNumberOfChannels
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleRampSpeedCurrent related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleRampSpeedCurrent(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleRampSpeedCurrent(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleRampSpeedCurrent) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetRampSpeedCurrent", din);
        dout >> *attr_ModuleRampSpeedCurrent_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleRampSpeedCurrent_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleRampSpeedCurrent
}
//--------------------------------------------------------
/**
 *    Write attribute ModuleRampSpeedCurrent related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::write_ModuleRampSpeedCurrent(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::write_ModuleRampSpeedCurrent(Tango::WAttribute &attr) entering... " << endl;
    //    Retrieve write value
    Tango::DevDouble    w_val;
    attr.get_write_value(w_val);
    /*----- PROTECTED REGION ID(WienerMpodHvModule::write_ModuleRampSpeedCurrent) ENABLED START -----*/
    
    Tango::DeviceData din;
    Tango::DevVarDoubleArray arg;
    if (m_mpodLvHvCtrl) {
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = w_val;
        din << arg;
        m_mpodLvHvCtrl->command_inout("ModuleSetRampSpeedCurrent", din);
    }

    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::write_ModuleRampSpeedCurrent
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleRampSpeedVoltage related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleRampSpeedVoltage(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleRampSpeedVoltage(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleRampSpeedVoltage) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetRampSpeedVoltage", din);
        dout >> *attr_ModuleRampSpeedVoltage_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleRampSpeedVoltage_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleRampSpeedVoltage
}
//--------------------------------------------------------
/**
 *    Write attribute ModuleRampSpeedVoltage related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::write_ModuleRampSpeedVoltage(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::write_ModuleRampSpeedVoltage(Tango::WAttribute &attr) entering... " << endl;
    //    Retrieve write value
    Tango::DevDouble    w_val;
    attr.get_write_value(w_val);
    /*----- PROTECTED REGION ID(WienerMpodHvModule::write_ModuleRampSpeedVoltage) ENABLED START -----*/
    
    Tango::DeviceData din;
    Tango::DevVarDoubleArray arg;
    if (m_mpodLvHvCtrl) {
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = w_val;
        din << arg;
        m_mpodLvHvCtrl->command_inout("ModuleSetRampSpeedVoltage", din);
    }

    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::write_ModuleRampSpeedVoltage
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleStatus related method
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleStatus(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleStatus(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleStatus) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetStatus", din);
        dout >> *attr_ModuleStatus_read;
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleStatus_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleStatus
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleStatusAsString related method
 *    Description: 
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleStatusAsString(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleStatusAsString(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleStatusAsString) ENABLED START -----*/
    Tango::DeviceData dout;
    Tango::DeviceData din;

    if (m_mpodLvHvCtrl) {
        din << crateSlotIndex;
        dout = m_mpodLvHvCtrl->command_inout("ModuleGetStatusAsString", din);
        dout >> m_moduleStatusAsString;
        *attr_ModuleStatusAsString_read = (char*)(m_moduleStatusAsString.c_str());
    }

    //    Set the attribute value
    attr.set_value(attr_ModuleStatusAsString_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleStatusAsString
}
//--------------------------------------------------------
/**
 *    Read attribute ModuleDoClear related method
 *    Description: 
 *
 *    Data type:    Tango::DevBoolean
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ModuleDoClear(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ModuleDoClear(Tango::Attribute &attr) entering... " << endl;
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ModuleDoClear) ENABLED START -----*/

    /// always false !
    *attr_ModuleDoClear_read = 0;

    //    Set the attribute value
    attr.set_value(attr_ModuleDoClear_read);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ModuleDoClear
}
//--------------------------------------------------------
/**
 *    Write attribute ModuleDoClear related method
 *    Description: 
 *
 *    Data type:    Tango::DevBoolean
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::write_ModuleDoClear(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::write_ModuleDoClear(Tango::WAttribute &attr) entering... " << endl;
    //    Retrieve write value
    Tango::DevBoolean    w_val;
    attr.get_write_value(w_val);
    /*----- PROTECTED REGION ID(WienerMpodHvModule::write_ModuleDoClear) ENABLED START -----*/
    
    Tango::DeviceData din;
    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        if (w_val) {
            arg.length(2);
            arg[0] = crateSlotIndex;
            arg[1] = 1;
            din << arg;
            m_mpodLvHvCtrl->command_inout("ModuleSetDoClear", din);
        }
    }

    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::write_ModuleDoClear
}

//--------------------------------------------------------
/**
 *    Read attribute ChannelDynDoubleRead related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ChannelDynDoubleRead(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ChannelDynDoubleRead(Tango::Attribute &attr) entering... " << endl;
    Tango::DevDouble    *att_value = get_ChannelDynDoubleRead_data_ptr(attr.get_name());
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ChannelDynDoubleRead) ENABLED START -----*/
    //    Set the attribute value
    attr.set_value(att_value);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ChannelDynDoubleRead
}
//--------------------------------------------------------
/**
 *    Read attribute ChannelDynDoubleReadWrite related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ChannelDynDoubleReadWrite(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ChannelDynDoubleReadWrite(Tango::Attribute &attr) entering... " << endl;
    Tango::DevDouble    *att_value = get_ChannelDynDoubleReadWrite_data_ptr(attr.get_name());
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ChannelDynDoubleReadWrite) ENABLED START -----*/
    //    Set the attribute value
    attr.set_value(att_value);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ChannelDynDoubleReadWrite
}
//--------------------------------------------------------
/**
 *    Write attribute ChannelDynDoubleReadWrite related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::write_ChannelDynDoubleReadWrite(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::write_ChannelDynDoubleReadWrite(Tango::WAttribute &attr) entering... " << endl;
    //    Retrieve write value
    Tango::DevDouble    w_val;
    attr.get_write_value(w_val);
    /*----- PROTECTED REGION ID(WienerMpodHvModule::write_ChannelDynDoubleReadWrite) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::write_ChannelDynDoubleReadWrite
}
//--------------------------------------------------------
/**
 *    Read attribute ChannelDynLongRead related method
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ChannelDynLongRead(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ChannelDynLongRead(Tango::Attribute &attr) entering... " << endl;
    Tango::DevLong    *att_value = get_ChannelDynLongRead_data_ptr(attr.get_name());
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ChannelDynLongRead) ENABLED START -----*/
    //    Set the attribute value
    attr.set_value(att_value);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ChannelDynLongRead
}
//--------------------------------------------------------
/**
 *    Read attribute ChannelDynLongReadWrite related method
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ChannelDynLongReadWrite(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ChannelDynLongReadWrite(Tango::Attribute &attr) entering... " << endl;
    Tango::DevLong    *att_value = get_ChannelDynLongReadWrite_data_ptr(attr.get_name());
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ChannelDynLongReadWrite) ENABLED START -----*/
    //    Set the attribute value
    attr.set_value(att_value);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ChannelDynLongReadWrite
}
//--------------------------------------------------------
/**
 *    Write attribute ChannelDynLongReadWrite related method
 *    Description: 
 *
 *    Data type:    Tango::DevLong
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::write_ChannelDynLongReadWrite(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::write_ChannelDynLongReadWrite(Tango::WAttribute &attr) entering... " << endl;
    //    Retrieve write value
    Tango::DevLong    w_val;
    attr.get_write_value(w_val);
    /*----- PROTECTED REGION ID(WienerMpodHvModule::write_ChannelDynLongReadWrite) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::write_ChannelDynLongReadWrite
}
//--------------------------------------------------------
/**
 *    Read attribute ChannelDynStringRead related method
 *    Description: 
 *
 *    Data type:    Tango::DevString
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ChannelDynStringRead(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ChannelDynStringRead(Tango::Attribute &attr) entering... " << endl;
    Tango::DevString    *att_value = get_ChannelDynStringRead_data_ptr(attr.get_name());
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ChannelDynStringRead) ENABLED START -----*/
    //    Set the attribute value
    attr.set_value(att_value);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ChannelDynStringRead
}
//--------------------------------------------------------
/**
 *    Read attribute ChannelDynBoolReadWrite related method
 *    Description: 
 *
 *    Data type:    Tango::DevBoolean
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ChannelDynBoolReadWrite(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ChannelDynBoolReadWrite(Tango::Attribute &attr) entering... " << endl;
    Tango::DevBoolean    *att_value = get_ChannelDynBoolReadWrite_data_ptr(attr.get_name());
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ChannelDynBoolReadWrite) ENABLED START -----*/
    //    Set the attribute value
    attr.set_value(att_value);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ChannelDynBoolReadWrite
}
//--------------------------------------------------------
/**
 *    Write attribute ChannelDynBoolReadWrite related method
 *    Description: 
 *
 *    Data type:    Tango::DevBoolean
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::write_ChannelDynBoolReadWrite(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::write_ChannelDynBoolReadWrite(Tango::WAttribute &attr) entering... " << endl;
    //    Retrieve write value
    Tango::DevBoolean    w_val;
    attr.get_write_value(w_val);
    /*----- PROTECTED REGION ID(WienerMpodHvModule::write_ChannelDynBoolReadWrite) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::write_ChannelDynBoolReadWrite
}
//--------------------------------------------------------
/**
 *    Read attribute ChannelDynEnumReadWrite related method
 *    Description: 
 *
 *    Data type:    Tango::DevEnum (ChannelDynEnumReadWriteEnum)
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ChannelDynEnumReadWrite(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ChannelDynEnumReadWrite(Tango::Attribute &attr) entering... " << endl;
    Tango::DevEnum    *att_value = get_ChannelDynEnumReadWrite_data_ptr(attr.get_name());
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ChannelDynEnumReadWrite) ENABLED START -----*/
    //    Set the attribute value
    attr.set_value(att_value);
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ChannelDynEnumReadWrite
}
//--------------------------------------------------------
/**
 *    Write attribute ChannelDynEnumReadWrite related method
 *    Description: 
 *
 *    Data type:    Tango::DevEnum (ChannelDynEnumReadWriteEnum)
 *    Attr type:    Scalar
 */
//--------------------------------------------------------
void WienerMpodHvModule::write_ChannelDynEnumReadWrite(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::write_ChannelDynEnumReadWrite(Tango::WAttribute &attr) entering... " << endl;
    //    Retrieve write value
    ChannelDynEnumReadWriteEnum    w_val;
    attr.get_write_value(w_val);
    /*----- PROTECTED REGION ID(WienerMpodHvModule::write_ChannelDynEnumReadWrite) ENABLED START -----*/
    
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::write_ChannelDynEnumReadWrite
}
//--------------------------------------------------------
/**
 *    Read attribute ChannelDynDoubleVectorRead related method
 *    Description: 
 *
 *    Data type:    Tango::DevDouble
 *    Attr type:    Spectrum max = 1024
 */
//--------------------------------------------------------
void WienerMpodHvModule::read_ChannelDynDoubleVectorRead(Tango::Attribute &attr)
{
    DEBUG_STREAM << "WienerMpodHvModule::read_ChannelDynDoubleVectorRead(Tango::Attribute &attr) entering... " << endl;
    Tango::DevDouble    *att_value = get_ChannelDynDoubleVectorRead_data_ptr(attr.get_name());
    /*----- PROTECTED REGION ID(WienerMpodHvModule::read_ChannelDynDoubleVectorRead) ENABLED START -----*/
    //    Set the attribute value
    attr.set_value(att_value, 1024);

    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::read_ChannelDynDoubleVectorRead
}
//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModule::add_dynamic_attributes()
 *    Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void WienerMpodHvModule::add_dynamic_attributes()
{
    //    Example to add dynamic attribute:
    //    Copy inside the following protected area to create instance(s) at startup.
    //    add_ChannelDynDoubleRead_dynamic_attribute("MyChannelDynDoubleReadAttribute");
    //    add_ChannelDynDoubleReadWrite_dynamic_attribute("MyChannelDynDoubleReadWriteAttribute");
    //    add_ChannelDynLongRead_dynamic_attribute("MyChannelDynLongReadAttribute");
    //    add_ChannelDynLongReadWrite_dynamic_attribute("MyChannelDynLongReadWriteAttribute");
    //    add_ChannelDynStringRead_dynamic_attribute("MyChannelDynStringReadAttribute");
    //    add_ChannelDynBoolReadWrite_dynamic_attribute("MyChannelDynBoolReadWriteAttribute");
    //    add_ChannelDynEnumReadWrite_dynamic_attribute("MyChannelDynEnumReadWriteAttribute");
    //    add_ChannelDynDoubleVectorRead_dynamic_attribute("MyChannelDynDoubleVectorReadAttribute");
    
    /*----- PROTECTED REGION ID(WienerMpodHvModule::add_dynamic_attributes) ENABLED START -----*/
    
    //    Add your own code to create and add dynamic attributes if any

    // the number of channels might have changed => remove all existing attributes
    //      see void WienerMpodHvModuleClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)

    std::stringstream tmp;
    for ( size_t channel_index = 0; channel_index < moduleNumberOfChannels; channel_index++ ) {
        tmp.str("");
        tmp << "_";
        if ( channel_index < 10 ) {
            tmp << "0";
        }
        tmp << channel_index << "_";
        addDynamicChannelAttributes(channel_index, tmp.str());
    }
    m_dynamicStringAttributBuffers.resize(moduleNumberOfChannels);

    addDynamicAttributesDoubleVector("ChannelMeasurementTimeVector", "ChannelGetMeasurementTimeVector", "", "");

    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *    Method      : WienerMpodHvModule::add_dynamic_commands()
 *    Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void WienerMpodHvModule::add_dynamic_commands()
{
    /*----- PROTECTED REGION ID(WienerMpodHvModule::add_dynamic_commands) ENABLED START -----*/
    
    //    Add your own code to create and add dynamic commands if any
    
    /*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::add_dynamic_commands
}

/*----- PROTECTED REGION ID(WienerMpodHvModule::namespace_ending) ENABLED START -----*/

//    Additional Methods
void WienerMpodHvModule::addDynamicChannelAttributeDouble(size_t channel_index, const std::string &attr_name, const std::string &read_command, const std::string &write_command, const std::string &output_format, const std::string units) {
    //    see :
    //    add_ChannelDynDoubleRead_dynamic_attribute("MyChannelDynDoubleReadAttribute");
    Tango::Attr    *a;
    if (write_command.empty()) {
        a = new ChannelDynDoubleReadAttribImpl(attr_name, channel_index, read_command);
    }
    else {
        a = new ChannelDynDoubleReadWriteAttribImpl(attr_name, channel_index, read_command, write_command);
    }
    defineAttributeProperties(a, output_format, units);
    //    Not Polled
    a->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    ChannelDynDoubleReadWrite_data.insert(make_pair(attr_name, 0.0));
    add_attribute(a);
}
void WienerMpodHvModule::addDynamicChannelAttributeLong(size_t channel_index, const std::string &attr_name, const std::string &read_command, const std::string &write_command, const std::string &output_format, const std::string units) {
    //    see :
    //    add_ChannelDynDoubleRead_dynamic_attribute("MyChannelDynDoubleReadAttribute");
    Tango::Attr    *a;
    if (write_command.empty()) {
        a = new ChannelDynLongReadAttribImpl(attr_name, channel_index, read_command);
    }
    else {
        a = new ChannelDynLongReadWriteAttribImpl(attr_name, channel_index, read_command, write_command);
    }
    defineAttributeProperties(a, output_format, units);
    //    Not Polled
    a->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    ChannelDynLongReadWrite_data.insert(make_pair(attr_name, 0.0));
    add_attribute(a);
}
void WienerMpodHvModule::addDynamicChannelAttributeBoolEnum(size_t channel_index, const std::string &attr_name, const std::string &read_command, const std::string &write_command, size_t enum_value) {
    Tango::Attr    *a;
    a = new ChannelDynBoolReadWriteAttribEnum(attr_name, channel_index, read_command, write_command, enum_value);
    defineAttributeProperties(a, "", "");
    //    Not Polled
    a->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    ChannelDynBoolReadWrite_data.insert(make_pair(attr_name, 0.0));
    add_attribute(a);
}

void WienerMpodHvModule::addDynamicChannelSwitchAttribute(size_t channel_index, const std::string &attr_name) {
    Tango::Attr    *a;
    a = new ChannelSwitchDynEnumAttrib(attr_name, channel_index);

    Tango::UserDefaultAttrProp    attr_prop;
    //    description    not set for ChannelDynDoubleRead
    //    label    not set for ChannelDynDoubleRead
    //    unit    not set for ChannelDynDoubleRead
    //    standard_unit    not set for ChannelDynDoubleRead
    //    display_unit    not set for ChannelDynDoubleRead
    //    format    not set for ChannelDynDoubleRead
    //    max_value    not set for ChannelDynDoubleRead
    //    min_value    not set for ChannelDynDoubleRead
    //    max_alarm    not set for ChannelDynDoubleRead
    //    min_alarm    not set for ChannelDynDoubleRead
    //    max_warning    not set for ChannelDynDoubleRead
    //    min_warning    not set for ChannelDynDoubleRead
    //    delta_t    not set for ChannelDynDoubleRead
    //    delta_val    not set for ChannelDynDoubleRead
    vector<string> labels;
    labels.push_back("OFF");
    labels.push_back("ON");
    labels.push_back("CLEAR EMERGENCY");
    labels.push_back("EMERGENCY");
    labels.push_back("CLEAR EVENTS");
    attr_prop.set_enum_labels(labels);

    a->set_default_properties(attr_prop);

    //    Not Polled
    a->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    ChannelDynEnumReadWrite_data.insert(make_pair(attr_name, 0));
    add_attribute(a);
}

void WienerMpodHvModule::addDynamicChannelTripActionAttribute(size_t channel_index, const std::string &attr_name) {
    Tango::Attr    *a;
    a = new ChannelTripActionDynEnumAttrib(attr_name, channel_index);

    Tango::UserDefaultAttrProp    attr_prop;
    //    description    not set for ChannelDynDoubleRead
    //    label    not set for ChannelDynDoubleRead
    //    unit    not set for ChannelDynDoubleRead
    //    standard_unit    not set for ChannelDynDoubleRead
    //    display_unit    not set for ChannelDynDoubleRead
    //    format    not set for ChannelDynDoubleRead
    //    max_value    not set for ChannelDynDoubleRead
    //    min_value    not set for ChannelDynDoubleRead
    //    max_alarm    not set for ChannelDynDoubleRead
    //    min_alarm    not set for ChannelDynDoubleRead
    //    max_warning    not set for ChannelDynDoubleRead
    //    min_warning    not set for ChannelDynDoubleRead
    //    delta_t    not set for ChannelDynDoubleRead
    //    delta_val    not set for ChannelDynDoubleRead
    vector<string> labels;
    labels.push_back("Ignore Failure");
    labels.push_back("Ramp Down Channel");
    labels.push_back("Switch Off Channel");
    labels.push_back("Switch Off Module");
    attr_prop.set_enum_labels(labels);

    a->set_default_properties(attr_prop);

    //    Not Polled
    a->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    ChannelDynEnumReadWrite_data.insert(make_pair(attr_name, 0));
    add_attribute(a);
}

void WienerMpodHvModule::addDynamicChannelInhibitActionAttribute(size_t channel_index, const std::string &attr_name) {
    Tango::Attr    *a;
    a = new ChannelInhibitActionDynEnumAttrib(attr_name, channel_index);

    Tango::UserDefaultAttrProp    attr_prop;
    //    description    not set for ChannelDynDoubleRead
    //    label    not set for ChannelDynDoubleRead
    //    unit    not set for ChannelDynDoubleRead
    //    standard_unit    not set for ChannelDynDoubleRead
    //    display_unit    not set for ChannelDynDoubleRead
    //    format    not set for ChannelDynDoubleRead
    //    max_value    not set for ChannelDynDoubleRead
    //    min_value    not set for ChannelDynDoubleRead
    //    max_alarm    not set for ChannelDynDoubleRead
    //    min_alarm    not set for ChannelDynDoubleRead
    //    max_warning    not set for ChannelDynDoubleRead
    //    min_warning    not set for ChannelDynDoubleRead
    //    delta_t    not set for ChannelDynDoubleRead
    //    delta_val    not set for ChannelDynDoubleRead
    vector<string> labels;
    labels.push_back("Ignore Failure");
    labels.push_back("Ramp Down Channel");
    labels.push_back("Switch Off Channel");
    labels.push_back("Switch Off Module");
    attr_prop.set_enum_labels(labels);

    a->set_default_properties(attr_prop);

    //    Not Polled
    a->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    ChannelDynEnumReadWrite_data.insert(make_pair(attr_name, 0));
    add_attribute(a);
}

void WienerMpodHvModule::defineAttributeProperties(Tango::Attr *a, const std::string &output_format, const std::string units) {
    Tango::UserDefaultAttrProp    attr_prop;
    //    description    not set for ChannelDynDoubleRead
    //    label    not set for ChannelDynDoubleRead
    //    unit    not set for ChannelDynDoubleRead
    if ( ! units.empty() ) {
        attr_prop.set_unit(units.c_str());
    }
    //    standard_unit    not set for ChannelDynDoubleRead
    //    display_unit    not set for ChannelDynDoubleRead
    //    format    not set for ChannelDynDoubleRead
    if ( ! output_format.empty() ) {
        attr_prop.set_format(output_format.c_str());
    }
    //    max_value    not set for ChannelDynDoubleRead
    //    min_value    not set for ChannelDynDoubleRead
    //    max_alarm    not set for ChannelDynDoubleRead
    //    min_alarm    not set for ChannelDynDoubleRead
    //    max_warning    not set for ChannelDynDoubleRead
    //    min_warning    not set for ChannelDynDoubleRead
    //    delta_t    not set for ChannelDynDoubleRead
    //    delta_val    not set for ChannelDynDoubleRead
    a->set_default_properties(attr_prop);
}

void WienerMpodHvModule::addDynamicAttributesDoubleVector(const std::string &attr_name, const std::string &read_command, const std::string &output_format, const std::string units) {
    Tango::Attr    *a;
    a = new DynReadDoubleVectorAttrib(attr_name, read_command);
    defineAttributeProperties(a, output_format, units);
    //    Not Polled
    a->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    Tango::DevDouble *ptr = new Tango::DevDouble[1024];
    ChannelDynDoubleVectorRead_data.insert(make_pair(attr_name, ptr));
    add_attribute(a);
}
void WienerMpodHvModule::addDynamicChannelAttributesDoubleVector(size_t channel_index, const std::string &attr_name, const std::string &read_command, const std::string &output_format, const std::string units) {
    Tango::Attr    *a;
    a = new ChannelDynReadDoubleVectorAttrib(attr_name, channel_index, read_command);
    defineAttributeProperties(a, output_format, units);
    //    Not Polled
    a->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    Tango::DevDouble *ptr = new Tango::DevDouble[1024];
    ChannelDynDoubleVectorRead_data.insert(make_pair(attr_name, ptr));
    add_attribute(a);
}

void WienerMpodHvModule::addDynamicChannelAttributeString(size_t channel_index, const std::string &attr_name, const std::string &read_command, const std::string &write_command, const std::string &output_format, const std::string units) {
    //    see :
    //    add_ChannelDynDoubleRead_dynamic_attribute("MyChannelDynDoubleReadAttribute");
    Tango::Attr    *a;
    a = new ChannelDynStringReadAttribImpl(attr_name, channel_index, read_command);
    defineAttributeProperties(a, output_format, units);
    //    Not Polled
    a->set_disp_level(Tango::OPERATOR);
    //    Not Memorized
    char array[1];
    array[0] = '\0';
    ChannelDynStringRead_data.insert(make_pair(attr_name, array));
    add_attribute(a);
}

void WienerMpodHvModule::addDynamicChannelAttributes(size_t channel_index, const std::string &ext) {
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "ConfigMaxCurrent", "ChannelGetConfigMaxCurrent", "");
// HV variant (attribute name changes)
    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "NominalCurrent", "ChannelGetConfigMaxCurrent", "", "%6.2e", "A");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "ConfigMaxSenseVoltage", "ChannelGetConfigMaxSenseVoltage", "");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "ConfigMaxTerminalVoltage", "ChannelGetConfigMaxTerminalVoltage", "");
// HV variant  (attribute name changes)
   addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "NominalVoltage", "ChannelGetConfigMaxTerminalVoltage", "");
// LV + HV
    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "Current", "ChannelGetCurrent", "ChannelSetCurrent", "%6.2e", "A");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "CurrentFallRate", "ChannelGetCurrentFallRate", "ChannelSetCurrentFallRate");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "CurrentRiseRate", "ChannelGetCurrentRiseRate", "ChannelSetCurrentRiseRate");
// not so important    addDynamicChannelAttributeLong(channel_index, "Channel" + ext + "Index", "ChannelGetIndex", "");
// LV + HV
    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "MeasurementCurrent", "ChannelGetMeasurementCurrent", "", "%6.2e", "A");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "MeasurementSenseVoltage", "ChannelGetMeasurementSenseVoltage", "");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "MeasurementTemperature", "ChannelGetMeasurementTemperature", "");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "MeasurementTerminalVoltage", "ChannelGetMeasurementTerminalVoltage", "");
// HV variant  (attribute name changes)
    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "MeasurementVoltage", "ChannelGetMeasurementTerminalVoltage", "", "", "V");
// LV + HV
    addDynamicChannelAttributeLong(channel_index, "Channel" + ext + "Status", "ChannelGetStatus", "", "%xX");
    addDynamicChannelAttributeString(channel_index, "Channel" + ext + "StatusAsString", "ChannelGetStatusAsString", "");
///    addDynamicChannelAttributeLong(channel_index, "Channel" + ext + "SupervisionBehavior", "ChannelGetSupervisionBehavior", "ChannelSetSupervisionBehavior", "%xX");
    addDynamicChannelTripActionAttribute(channel_index, "Channel" + ext + "SupervisionBehavior_DelayedCurrentTrip");
    addDynamicChannelInhibitActionAttribute(channel_index, "Channel" + ext + "SupervisionBehavior_Inhibit");
    // LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "SupervisionMaxCurrent", "ChannelGetSupervisionMaxCurrent", "ChannelSetSupervisionMaxCurrent", "", "A");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "SupervisionMaxPower", "ChannelGetSupervisionMaxPower", "");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "SupervisionMaxTerminalVoltage", "ChannelGetSupervisionMaxTerminalVoltage", "ChannelSetSupervisionMaxTerminalVoltage", "", "V");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "SupervisionMinSenseVoltage", "ChannelGetSupervisionMinSenseVoltage", "ChannelSetSupervisionMinSenseVoltage", "", "V");
///    addDynamicChannelAttributeLong(channel_index, "Channel" + ext + "Switch", "ChannelGetSwitch", "ChannelSetSwitch", "%xX");
/**
    addDynamicChannelAttributeBoolEnum(channel_index, "Channel" + ext + "Switch_OFF", "ChannelGetSwitch", "ChannelSetSwitch", 0);
    addDynamicChannelAttributeBoolEnum(channel_index, "Channel" + ext + "Switch_ON", "ChannelGetSwitch", "ChannelSetSwitch", 1);
    addDynamicChannelAttributeBoolEnum(channel_index, "Channel" + ext + "Switch_CLEAR_EMERGENCY", "ChannelGetSwitch", "ChannelSetSwitch", 2);
    addDynamicChannelAttributeBoolEnum(channel_index, "Channel" + ext + "Switch_EMERGENCY", "ChannelGetSwitch", "ChannelSetSwitch", 3);
    addDynamicChannelAttributeBoolEnum(channel_index, "Channel" + ext + "Switch_CLEAR_EVENTS", "ChannelGetSwitch", "ChannelSetSwitch", 10);
*/
    addDynamicChannelSwitchAttribute(channel_index, "Channel" + ext + "Switch");

    addDynamicChannelAttributeLong(channel_index, "Channel" + ext + "TripTime", "ChannelGetTripTime", "ChannelSetTripTime", "", "ms");
// LV    addDynamicChannelAttributeLong(channel_index, "Channel" + ext + "UserConfig", "ChannelGetUserConfig", "ChannelSetUserConfig", "%xX");
    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "Voltage", "ChannelGetVoltage", "ChannelSetVoltage", "", "V");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "VoltageFallRate", "ChannelGetVoltageFallRate", "ChannelSetVoltageFallRate");
// LV    addDynamicChannelAttributeDouble(channel_index, "Channel" + ext + "VoltageRiseRate", "ChannelGetVoltageRiseRate", "ChannelSetVoltageRiseRate");

    addDynamicChannelAttributesDoubleVector(channel_index, "Channel" + ext + "MeasurementCurrentVector", "ChannelGetMeasurementCurrentVector", "%6.2e", "A");
// LV   addDynamicChannelAttributesDoubleVector(channel_index, "Channel" + ext + "MeasurementSenseVoltageVector", "ChannelGetMeasurementSenseVoltageVector", "", "V");
// LV    addDynamicChannelAttributesDoubleVector(channel_index, "Channel" + ext + "MeasurementTerminalVoltageVector", "ChannelGetMeasurementTerminalVoltageVector", "", "V");
    /// for HV the terminal and sense voltages are identical => use only the terminal voltage and rename it to "measured voltage"
    addDynamicChannelAttributesDoubleVector(channel_index, "Channel" + ext + "MeasurementVoltageVector", "ChannelGetMeasurementTerminalVoltageVector", "", "V");

}


void WienerMpodHvModule::readChannelDynDouble(Tango::Attribute &attr, size_t channel_index, std::string &command) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    Tango::DevDouble *att_value = get_ChannelDynDoubleReadWrite_data_ptr(attr.get_name());

    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        din << arg;
        dout = m_mpodLvHvCtrl->command_inout(command, din);
        dout >> *att_value;
    }

    //    Set the attribute value
    attr.set_value(att_value);
}
void WienerMpodHvModule::writeChannelDynDouble(Tango::WAttribute &attr, size_t channel_index, std::string &command) {
    Tango::DeviceData din;
    Tango::DevVarDoubleArray arg;
    if (m_mpodLvHvCtrl) {
        Tango::DevDouble    w_val;
        attr.get_write_value(w_val);
        arg.length(3);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        arg[2] = w_val;
        din << arg;
        m_mpodLvHvCtrl->command_inout(command, din);
    }
}
void WienerMpodHvModule::readChannelDynLong(Tango::Attribute &attr, size_t channel_index, std::string &command) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    Tango::DevLong *att_value = get_ChannelDynLongReadWrite_data_ptr(attr.get_name());

    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        din << arg;
        dout = m_mpodLvHvCtrl->command_inout(command, din);
        dout >> *att_value;
    }

    //    Set the attribute value
    attr.set_value(att_value);
}
void WienerMpodHvModule::writeChannelDynLong(Tango::WAttribute &attr, size_t channel_index, std::string &command) {
    Tango::DeviceData din;
    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        Tango::DevLong w_val;
        attr.get_write_value(w_val);
        arg.length(3);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        arg[2] = w_val;
        din << arg;
        m_mpodLvHvCtrl->command_inout(command, din);
    }
}
void WienerMpodHvModule::readChannelDynString(Tango::Attribute &attr, size_t channel_index, std::string &command) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    Tango::DevString *att_value = get_ChannelDynStringRead_data_ptr(attr.get_name());

    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl && channel_index < m_dynamicStringAttributBuffers.size()) {
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        din << arg;
        dout = m_mpodLvHvCtrl->command_inout(command, din);
        dout >> m_dynamicStringAttributBuffers[channel_index];
        *att_value = (char*)(m_dynamicStringAttributBuffers[channel_index].c_str());
    }

    //    Set the attribute value
    attr.set_value(att_value);
}
void WienerMpodHvModule::readChannelDynBoolEnum(Tango::Attribute &attr, size_t channel_index, std::string &command, size_t enum_value) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    Tango::DevLong value;
    Tango::DevBoolean *att_value = get_ChannelDynBoolReadWrite_data_ptr(attr.get_name());

    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        din << arg;
        dout = m_mpodLvHvCtrl->command_inout(command, din);
        dout >> value;
        *att_value = (value == enum_value);
    }

    //    Set the attribute value
    attr.set_value(att_value);
}
void WienerMpodHvModule::writeChannelDynBoolEnum(Tango::WAttribute &attr, size_t channel_index, std::string &command, size_t enum_value) {
    Tango::DeviceData din;
    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        Tango::DevBoolean w_val;
        attr.get_write_value(w_val);
        /// we write only if w_val is true !
        if ( w_val ) {
            arg.length(3);
            arg[0] = crateSlotIndex;
            arg[1] = channel_index;
            arg[2] = enum_value;
            din << arg;
            m_mpodLvHvCtrl->command_inout(command, din);
        }
    }
}
void WienerMpodHvModule::readChannelSwitchDynEnum(Tango::Attribute &attr, size_t channel_index) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    Tango::DevLong value;
    Tango::DevEnum *att_value = get_ChannelDynEnumReadWrite_data_ptr(attr.get_name());

    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        din << arg;
        dout = m_mpodLvHvCtrl->command_inout("ChannelGetSwitch", din);
        dout >> value;
        /// clear events
        if ( value == 10) {
            value = 4;
        }
        *att_value = value;
    }

    //    Set the attribute value
    attr.set_value(att_value);
}
void WienerMpodHvModule::writeChannelSwitchDynEnum(Tango::WAttribute &attr, size_t channel_index) {
    Tango::DeviceData din;
    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        Tango::DevEnum w_val;
        attr.get_write_value(w_val);
        if ( w_val == 4 ) {
            w_val = 10;
        }
        arg.length(3);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        arg[2] = w_val;
        din << arg;
        m_mpodLvHvCtrl->command_inout("ChannelSetSwitch", din);
    }
}
void WienerMpodHvModule::readChannelTripActionDynEnum(Tango::Attribute &attr, size_t channel_index) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    Tango::DevLong value;
    Tango::DevEnum *att_value = get_ChannelDynEnumReadWrite_data_ptr(attr.get_name());

    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        din << arg;
        dout = m_mpodLvHvCtrl->command_inout("ChannelGetSupervisionBehavior", din);
        dout >> value;
        value = (value >> 6) & 3;
        *att_value = value;
    }

    //    Set the attribute value
    attr.set_value(att_value);
}
void WienerMpodHvModule::writeChannelTripActionDynEnum(Tango::WAttribute &attr, size_t channel_index) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    Tango::DeviceData din_write;
    Tango::DevLong value, mask;

    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        Tango::DevEnum w_val;
        attr.get_write_value(w_val);
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        din << arg;
        dout = m_mpodLvHvCtrl->command_inout("ChannelGetSupervisionBehavior", din);
        dout >> value;
        w_val = (w_val & 3) << 6;
        mask = ~(3 << 6);
        value = value & mask;
        value = value | w_val;
        arg.length(3);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        arg[2] = value;
        din_write << arg;
        m_mpodLvHvCtrl->command_inout("ChannelSetSupervisionBehavior", din_write);
    }
}
void WienerMpodHvModule::readChannelInhibitActionDynEnum(Tango::Attribute &attr, size_t channel_index) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    Tango::DevLong value;
    Tango::DevEnum *att_value = get_ChannelDynEnumReadWrite_data_ptr(attr.get_name());

    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        din << arg;
        dout = m_mpodLvHvCtrl->command_inout("ChannelGetSupervisionBehavior", din);
        dout >> value;
        value = (value >> 12) & 3;
        *att_value = value;
    }

    //    Set the attribute value
    attr.set_value(att_value);
}
void WienerMpodHvModule::writeChannelInhibitActionDynEnum(Tango::WAttribute &attr, size_t channel_index) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    Tango::DeviceData din_write;
    Tango::DevLong value, mask;

    Tango::DevVarULongArray arg;
    if (m_mpodLvHvCtrl) {
        Tango::DevEnum w_val;
        attr.get_write_value(w_val);
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        din << arg;
        dout = m_mpodLvHvCtrl->command_inout("ChannelGetSupervisionBehavior", din);
        dout >> value;
        w_val = (w_val & 3) << 12;
        mask = ~(3 << 12);
        value = value & mask;
        value = value | w_val;
        arg.length(3);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        arg[2] = value;
        din_write << arg;
        m_mpodLvHvCtrl->command_inout("ChannelSetSupervisionBehavior", din_write);
    }
}
void WienerMpodHvModule::readDynDoubleVector(Tango::Attribute &attr, std::string &command) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    std::vector<double> value;
    size_t vector_size = 0;
    Tango::DevDouble *att_value = get_ChannelDynDoubleVectorRead_data_ptr(attr.get_name());

    if (m_mpodLvHvCtrl) {
        dout = m_mpodLvHvCtrl->command_inout(command, din);
        dout >> value;
        for (size_t i = 0; i < value.size(); i++) {
            att_value[i] = value[i];
        }
        vector_size = value.size();
    }
    attr.set_value(att_value, vector_size);
}
void WienerMpodHvModule::readChannelDynDoubleVector(Tango::Attribute &attr, size_t channel_index, std::string &command) {
    Tango::DeviceData dout;
    Tango::DeviceData din;
    std::vector<double> value;
    size_t vector_size = 0;
    Tango::DevVarULongArray arg;
    Tango::DevDouble *att_value = get_ChannelDynDoubleVectorRead_data_ptr(attr.get_name());

    if (m_mpodLvHvCtrl) {
        arg.length(2);
        arg[0] = crateSlotIndex;
        arg[1] = channel_index;
        din << arg;
        dout = m_mpodLvHvCtrl->command_inout(command, din);
        dout >> value;
        for (size_t i = 0; i < value.size(); i++) {
            att_value[i] = value[i];
        }
        vector_size = value.size();
    }
    attr.set_value(att_value, vector_size);
}



/*----- PROTECTED REGION END -----*/    //    WienerMpodHvModule::namespace_ending
} //    namespace
